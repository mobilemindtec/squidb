//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TableStatement.java
//

#ifndef TableStatement_H
#define TableStatement_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CompilableWithArguments.h"
#include "J2ObjC_header.h"
#include "SqlStatement.h"
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class SquiDBCompileContext;
@class SquiDBCompiledStatement;
@class SquiDBSqlTable;
@class SquiDBVersionCode;

@interface SquiDBTableStatement : SquiDBCompilableWithArguments < SquiDBSqlStatement >

#pragma mark Public

- (instancetype __nonnull)init;

- (SquiDBCompiledStatement *)compileWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext;

- (SquiDBCompiledStatement *)compileWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion;

- (SquiDBSqlTable *)getTable;

- (NSString *)sqlForValidationWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext;

- (NSString *)sqlForValidationWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion;

#pragma mark Protected

- (void)invalidateCompileCache;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBTableStatement)

FOUNDATION_EXPORT void SquiDBTableStatement_init(SquiDBTableStatement *self);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTableStatement)

@compatibility_alias ComYahooSquidbSqlTableStatement SquiDBTableStatement;

typedef NS_ENUM(NSUInteger, SquiDBTableStatement_ConflictAlgorithm_Enum) {
  SquiDBTableStatement_ConflictAlgorithm_Enum_NONE = 0,
  SquiDBTableStatement_ConflictAlgorithm_Enum_ROLLBACK = 1,
  SquiDBTableStatement_ConflictAlgorithm_Enum_ABORT = 2,
  SquiDBTableStatement_ConflictAlgorithm_Enum_FAIL = 3,
  SquiDBTableStatement_ConflictAlgorithm_Enum_IGNORE = 4,
  SquiDBTableStatement_ConflictAlgorithm_Enum_REPLACE = 5,
};

@interface SquiDBTableStatement_ConflictAlgorithm : JavaLangEnum

@property (readonly, class, nonnull) SquiDBTableStatement_ConflictAlgorithm *NONE NS_SWIFT_NAME(NONE);
@property (readonly, class, nonnull) SquiDBTableStatement_ConflictAlgorithm *ROLLBACK NS_SWIFT_NAME(ROLLBACK);
@property (readonly, class, nonnull) SquiDBTableStatement_ConflictAlgorithm *ABORT NS_SWIFT_NAME(ABORT);
@property (readonly, class, nonnull) SquiDBTableStatement_ConflictAlgorithm *FAIL NS_SWIFT_NAME(FAIL);
@property (readonly, class, nonnull) SquiDBTableStatement_ConflictAlgorithm *IGNORE NS_SWIFT_NAME(IGNORE);
@property (readonly, class, nonnull) SquiDBTableStatement_ConflictAlgorithm *REPLACE NS_SWIFT_NAME(REPLACE);
+ (SquiDBTableStatement_ConflictAlgorithm * __nonnull)NONE;

+ (SquiDBTableStatement_ConflictAlgorithm * __nonnull)ROLLBACK;

+ (SquiDBTableStatement_ConflictAlgorithm * __nonnull)ABORT;

+ (SquiDBTableStatement_ConflictAlgorithm * __nonnull)FAIL;

+ (SquiDBTableStatement_ConflictAlgorithm * __nonnull)IGNORE;

+ (SquiDBTableStatement_ConflictAlgorithm * __nonnull)REPLACE;

#pragma mark Public

+ (SquiDBTableStatement_ConflictAlgorithm *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (SquiDBTableStatement_ConflictAlgorithm_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBTableStatement_ConflictAlgorithm)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_values_[];

inline SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_get_NONE(void);
J2OBJC_ENUM_CONSTANT(SquiDBTableStatement_ConflictAlgorithm, NONE)

inline SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_get_ROLLBACK(void);
J2OBJC_ENUM_CONSTANT(SquiDBTableStatement_ConflictAlgorithm, ROLLBACK)

inline SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_get_ABORT(void);
J2OBJC_ENUM_CONSTANT(SquiDBTableStatement_ConflictAlgorithm, ABORT)

inline SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_get_FAIL(void);
J2OBJC_ENUM_CONSTANT(SquiDBTableStatement_ConflictAlgorithm, FAIL)

inline SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_get_IGNORE(void);
J2OBJC_ENUM_CONSTANT(SquiDBTableStatement_ConflictAlgorithm, IGNORE)

inline SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_get_REPLACE(void);
J2OBJC_ENUM_CONSTANT(SquiDBTableStatement_ConflictAlgorithm, REPLACE)

FOUNDATION_EXPORT IOSObjectArray *SquiDBTableStatement_ConflictAlgorithm_values(void);

FOUNDATION_EXPORT SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTableStatement_ConflictAlgorithm)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TableStatement_H
