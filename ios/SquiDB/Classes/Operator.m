//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Operator.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Operator.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface SquiDBOperator () {
 @public
  NSString *operator__;
}

@end

J2OBJC_FIELD_SETTER(SquiDBOperator, operator__, NSString *)

inline id<JavaUtilMap> SquiDBOperator_get_contraryRegistry(void);
static id<JavaUtilMap> SquiDBOperator_contraryRegistry;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBOperator, contraryRegistry, id<JavaUtilMap>)

__attribute__((unused)) static void SquiDBOperator_initWithNSString_withNSString_withInt_(SquiDBOperator *self, NSString *operator_, NSString *__name, jint __ordinal);

__attribute__((unused)) static SquiDBOperator *new_SquiDBOperator_initWithNSString_withNSString_withInt_(NSString *operator_, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(SquiDBOperator)

SquiDBOperator *SquiDBOperator_values_[21];

@implementation SquiDBOperator

+ (SquiDBOperator *)eq {
  return JreEnum(SquiDBOperator, eq);
}

+ (SquiDBOperator *)neq {
  return JreEnum(SquiDBOperator, neq);
}

+ (SquiDBOperator *)is {
  return JreEnum(SquiDBOperator, is);
}

+ (SquiDBOperator *)isNot {
  return JreEnum(SquiDBOperator, isNot);
}

+ (SquiDBOperator *)gt {
  return JreEnum(SquiDBOperator, gt);
}

+ (SquiDBOperator *)lt {
  return JreEnum(SquiDBOperator, lt);
}

+ (SquiDBOperator *)gte {
  return JreEnum(SquiDBOperator, gte);
}

+ (SquiDBOperator *)lte {
  return JreEnum(SquiDBOperator, lte);
}

+ (SquiDBOperator *)and_ {
  return JreEnum(SquiDBOperator, and);
}

+ (SquiDBOperator *)or_ {
  return JreEnum(SquiDBOperator, or);
}

+ (SquiDBOperator *)not_ {
  return JreEnum(SquiDBOperator, not);
}

+ (SquiDBOperator *)exists {
  return JreEnum(SquiDBOperator, exists);
}

+ (SquiDBOperator *)like {
  return JreEnum(SquiDBOperator, like);
}

+ (SquiDBOperator *)notLike {
  return JreEnum(SquiDBOperator, notLike);
}

+ (SquiDBOperator *)in {
  return JreEnum(SquiDBOperator, in);
}

+ (SquiDBOperator *)notIn {
  return JreEnum(SquiDBOperator, notIn);
}

+ (SquiDBOperator *)between {
  return JreEnum(SquiDBOperator, between);
}

+ (SquiDBOperator *)notBetween {
  return JreEnum(SquiDBOperator, notBetween);
}

+ (SquiDBOperator *)glob {
  return JreEnum(SquiDBOperator, glob);
}

+ (SquiDBOperator *)notGlob {
  return JreEnum(SquiDBOperator, notGlob);
}

+ (SquiDBOperator *)match {
  return JreEnum(SquiDBOperator, match);
}

- (SquiDBOperator *)getContrary {
  return [((id<JavaUtilMap>) nil_chk(SquiDBOperator_contraryRegistry)) getWithId:self];
}

- (NSString *)description {
  return self->operator__;
}

+ (IOSObjectArray *)values {
  return SquiDBOperator_values();
}

+ (SquiDBOperator *)valueOfWithNSString:(NSString *)name {
  return SquiDBOperator_valueOfWithNSString_(name);
}

- (SquiDBOperator_Enum)toNSEnum {
  return (SquiDBOperator_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LSquiDBOperator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "[LSquiDBOperator;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBOperator;", 0x9, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getContrary);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eq", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "neq", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "is", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "isNot", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "gt", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "lt", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "gte", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "lte", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "and", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "or", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "not", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "exists", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "like", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "notLike", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "in", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "notIn", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "between", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "notBetween", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "glob", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "notGlob", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "match", "LSquiDBOperator;", .constantValue.asLong = 0, 0x4019, -1, 23, -1, -1 },
    { "contraryRegistry", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 24, 25, -1 },
    { "operator__", "LNSString;", .constantValue.asLong = 0, 0x12, 26, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "valueOf", "LNSString;", &JreEnum(SquiDBOperator, eq), &JreEnum(SquiDBOperator, neq), &JreEnum(SquiDBOperator, is), &JreEnum(SquiDBOperator, isNot), &JreEnum(SquiDBOperator, gt), &JreEnum(SquiDBOperator, lt), &JreEnum(SquiDBOperator, gte), &JreEnum(SquiDBOperator, lte), &JreEnum(SquiDBOperator, and), &JreEnum(SquiDBOperator, or), &JreEnum(SquiDBOperator, not), &JreEnum(SquiDBOperator, exists), &JreEnum(SquiDBOperator, like), &JreEnum(SquiDBOperator, notLike), &JreEnum(SquiDBOperator, in), &JreEnum(SquiDBOperator, notIn), &JreEnum(SquiDBOperator, between), &JreEnum(SquiDBOperator, notBetween), &JreEnum(SquiDBOperator, glob), &JreEnum(SquiDBOperator, notGlob), &JreEnum(SquiDBOperator, match), &SquiDBOperator_contraryRegistry, "Ljava/util/Map<Lcom/yahoo/squidb/sql/Operator;Lcom/yahoo/squidb/sql/Operator;>;", "operator", "Ljava/lang/Enum<Lcom/yahoo/squidb/sql/Operator;>;" };
  static const J2ObjcClassInfo _SquiDBOperator = { "Operator", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x4011, 4, 23, -1, -1, -1, 27, -1 };
  return &_SquiDBOperator;
}

+ (void)initialize {
  if (self == [SquiDBOperator class]) {
    JreEnum(SquiDBOperator, eq) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@"=", JreEnumConstantName(SquiDBOperator_class_(), 0), 0);
    JreEnum(SquiDBOperator, neq) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@"<>", JreEnumConstantName(SquiDBOperator_class_(), 1), 1);
    JreEnum(SquiDBOperator, is) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" IS ", JreEnumConstantName(SquiDBOperator_class_(), 2), 2);
    JreEnum(SquiDBOperator, isNot) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" IS NOT ", JreEnumConstantName(SquiDBOperator_class_(), 3), 3);
    JreEnum(SquiDBOperator, gt) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@">", JreEnumConstantName(SquiDBOperator_class_(), 4), 4);
    JreEnum(SquiDBOperator, lt) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@"<", JreEnumConstantName(SquiDBOperator_class_(), 5), 5);
    JreEnum(SquiDBOperator, gte) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@">=", JreEnumConstantName(SquiDBOperator_class_(), 6), 6);
    JreEnum(SquiDBOperator, lte) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@"<=", JreEnumConstantName(SquiDBOperator_class_(), 7), 7);
    JreEnum(SquiDBOperator, and) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" AND ", JreEnumConstantName(SquiDBOperator_class_(), 8), 8);
    JreEnum(SquiDBOperator, or) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" OR ", JreEnumConstantName(SquiDBOperator_class_(), 9), 9);
    JreEnum(SquiDBOperator, not) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" NOT ", JreEnumConstantName(SquiDBOperator_class_(), 10), 10);
    JreEnum(SquiDBOperator, exists) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" EXISTS ", JreEnumConstantName(SquiDBOperator_class_(), 11), 11);
    JreEnum(SquiDBOperator, like) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" LIKE ", JreEnumConstantName(SquiDBOperator_class_(), 12), 12);
    JreEnum(SquiDBOperator, notLike) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" NOT LIKE ", JreEnumConstantName(SquiDBOperator_class_(), 13), 13);
    JreEnum(SquiDBOperator, in) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" IN ", JreEnumConstantName(SquiDBOperator_class_(), 14), 14);
    JreEnum(SquiDBOperator, notIn) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" NOT IN ", JreEnumConstantName(SquiDBOperator_class_(), 15), 15);
    JreEnum(SquiDBOperator, between) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" BETWEEN ", JreEnumConstantName(SquiDBOperator_class_(), 16), 16);
    JreEnum(SquiDBOperator, notBetween) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" NOT BETWEEN ", JreEnumConstantName(SquiDBOperator_class_(), 17), 17);
    JreEnum(SquiDBOperator, glob) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" GLOB ", JreEnumConstantName(SquiDBOperator_class_(), 18), 18);
    JreEnum(SquiDBOperator, notGlob) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" NOT GLOB ", JreEnumConstantName(SquiDBOperator_class_(), 19), 19);
    JreEnum(SquiDBOperator, match) = new_SquiDBOperator_initWithNSString_withNSString_withInt_(@" MATCH ", JreEnumConstantName(SquiDBOperator_class_(), 20), 20);
    SquiDBOperator_contraryRegistry = new_JavaUtilHashMap_init();
    {
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, eq) withId:JreEnum(SquiDBOperator, neq)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, neq) withId:JreEnum(SquiDBOperator, eq)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, is) withId:JreEnum(SquiDBOperator, isNot)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, isNot) withId:JreEnum(SquiDBOperator, is)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, gt) withId:JreEnum(SquiDBOperator, lte)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, lte) withId:JreEnum(SquiDBOperator, gt)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, lt) withId:JreEnum(SquiDBOperator, gte)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, gte) withId:JreEnum(SquiDBOperator, lt)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, like) withId:JreEnum(SquiDBOperator, notLike)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, notLike) withId:JreEnum(SquiDBOperator, like)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, in) withId:JreEnum(SquiDBOperator, notIn)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, notIn) withId:JreEnum(SquiDBOperator, in)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, between) withId:JreEnum(SquiDBOperator, notBetween)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, notBetween) withId:JreEnum(SquiDBOperator, between)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, glob) withId:JreEnum(SquiDBOperator, notGlob)];
      (void) [SquiDBOperator_contraryRegistry putWithId:JreEnum(SquiDBOperator, notGlob) withId:JreEnum(SquiDBOperator, glob)];
    }
    J2OBJC_SET_INITIALIZED(SquiDBOperator)
  }
}

@end

void SquiDBOperator_initWithNSString_withNSString_withInt_(SquiDBOperator *self, NSString *operator_, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->operator__ = operator_;
}

SquiDBOperator *new_SquiDBOperator_initWithNSString_withNSString_withInt_(NSString *operator_, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SquiDBOperator, initWithNSString_withNSString_withInt_, operator_, __name, __ordinal)
}

IOSObjectArray *SquiDBOperator_values() {
  SquiDBOperator_initialize();
  return [IOSObjectArray arrayWithObjects:SquiDBOperator_values_ count:21 type:SquiDBOperator_class_()];
}

SquiDBOperator *SquiDBOperator_valueOfWithNSString_(NSString *name) {
  SquiDBOperator_initialize();
  for (int i = 0; i < 21; i++) {
    SquiDBOperator *e = SquiDBOperator_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SquiDBOperator *SquiDBOperator_fromOrdinal(NSUInteger ordinal) {
  SquiDBOperator_initialize();
  if (ordinal >= 21) {
    return nil;
  }
  return SquiDBOperator_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBOperator)

J2OBJC_NAME_MAPPING(SquiDBOperator, "com.yahoo.squidb.sql", "SquiDB")
