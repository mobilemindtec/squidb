//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/ContentProviderQueryBuilder.java
//

#include "ContentProviderQueryBuilder.h"
#include "Criterion.h"
#include "Field.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Order.h"
#include "ProjectionMap.h"
#include "Query.h"
#include "SqlTable.h"
#include "SqlUtils.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface SquiDBContentProviderQueryBuilder () {
 @public
  jboolean strictMode_;
  SquiDBProjectionMap *projectionMap_;
  SquiDBSqlTable *dataSource_;
  IOSObjectArray *defaultOrder_;
}

- (id<JavaUtilList>)computeProjectionWithNSStringArray:(IOSObjectArray *)projectionIn;

@end

J2OBJC_FIELD_SETTER(SquiDBContentProviderQueryBuilder, projectionMap_, SquiDBProjectionMap *)
J2OBJC_FIELD_SETTER(SquiDBContentProviderQueryBuilder, dataSource_, SquiDBSqlTable *)
J2OBJC_FIELD_SETTER(SquiDBContentProviderQueryBuilder, defaultOrder_, IOSObjectArray *)

__attribute__((unused)) static id<JavaUtilList> SquiDBContentProviderQueryBuilder_computeProjectionWithNSStringArray_(SquiDBContentProviderQueryBuilder *self, IOSObjectArray *projectionIn);

@implementation SquiDBContentProviderQueryBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBContentProviderQueryBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithSquiDBPropertyArray:(IOSObjectArray *)properties
                         withSquiDBSqlTable:(SquiDBSqlTable *)dataSource {
  SquiDBContentProviderQueryBuilder_initWithSquiDBPropertyArray_withSquiDBSqlTable_(self, properties, dataSource);
  return self;
}

- (SquiDBContentProviderQueryBuilder *)setStrictWithBoolean:(jboolean)strict {
  self->strictMode_ = strict;
  return self;
}

- (SquiDBContentProviderQueryBuilder *)setProjectionMapWithSquiDBProjectionMap:(SquiDBProjectionMap *)projectionMap {
  self->projectionMap_ = projectionMap;
  return self;
}

- (SquiDBContentProviderQueryBuilder *)setDataSourceWithSquiDBSqlTable:(SquiDBSqlTable *)dataSource {
  self->dataSource_ = dataSource;
  return self;
}

- (SquiDBContentProviderQueryBuilder *)setDefaultOrderWithSquiDBOrderArray:(IOSObjectArray *)orders {
  if (orders == nil || orders->size_ == 0) {
    defaultOrder_ = nil;
  }
  else {
    defaultOrder_ = orders;
  }
  return self;
}

- (SquiDBQuery *)buildWithNSStringArray:(IOSObjectArray *)projection
                           withNSString:(NSString *)selection
                      withNSStringArray:(IOSObjectArray *)selectionArgs
                           withNSString:(NSString *)sortOrder {
  SquiDBQuery *query = [((SquiDBQuery *) nil_chk(SquiDBQuery_selectWithJavaUtilList_(SquiDBContentProviderQueryBuilder_computeProjectionWithNSStringArray_(self, projection)))) fromWithSquiDBSqlTable:dataSource_];
  jboolean hasUserSelection = !SquiDBSqlUtils_isEmptyWithNSString_(selection);
  if (hasUserSelection) {
    (void) [((SquiDBQuery *) nil_chk(query)) whereWithSquiDBCriterion:SquiDBCriterion_fromRawSelectionWithNSString_withNSStringArray_(selection, selectionArgs)];
  }
  if (!SquiDBSqlUtils_isEmptyWithNSString_(sortOrder)) {
    (void) [((SquiDBQuery *) nil_chk(query)) orderByWithSquiDBOrderArray:[IOSObjectArray newArrayWithObjects:(id[]){ SquiDBOrder_fromExpressionWithNSString_(sortOrder) } count:1 type:SquiDBOrder_class_()]];
  }
  else if (defaultOrder_ != nil && defaultOrder_->size_ > 0) {
    (void) [((SquiDBQuery *) nil_chk(query)) orderByWithSquiDBOrderArray:defaultOrder_];
  }
  if (strictMode_ && hasUserSelection) {
    [((SquiDBQuery *) nil_chk(query)) requestValidation];
  }
  return query;
}

- (id<JavaUtilList>)computeProjectionWithNSStringArray:(IOSObjectArray *)projectionIn {
  return SquiDBContentProviderQueryBuilder_computeProjectionWithNSStringArray_(self, projectionIn);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LSquiDBContentProviderQueryBuilder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LSquiDBContentProviderQueryBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LSquiDBContentProviderQueryBuilder;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LSquiDBContentProviderQueryBuilder;", 0x81, 9, 10, -1, -1, -1, -1 },
    { NULL, "LSquiDBQuery;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 13, 14, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithSquiDBPropertyArray:withSquiDBSqlTable:);
  methods[2].selector = @selector(setStrictWithBoolean:);
  methods[3].selector = @selector(setProjectionMapWithSquiDBProjectionMap:);
  methods[4].selector = @selector(setDataSourceWithSquiDBSqlTable:);
  methods[5].selector = @selector(setDefaultOrderWithSquiDBOrderArray:);
  methods[6].selector = @selector(buildWithNSStringArray:withNSString:withNSStringArray:withNSString:);
  methods[7].selector = @selector(computeProjectionWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "strictMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "projectionMap_", "LSquiDBProjectionMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataSource_", "LSquiDBSqlTable;", .constantValue.asLong = 0, 0x2, -1, -1, 16, -1 },
    { "defaultOrder_", "[LSquiDBOrder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LSquiDBProperty;LSquiDBSqlTable;", "([Lcom/yahoo/squidb/sql/Property<*>;Lcom/yahoo/squidb/sql/SqlTable<*>;)V", "setStrict", "Z", "setProjectionMap", "LSquiDBProjectionMap;", "setDataSource", "LSquiDBSqlTable;", "(Lcom/yahoo/squidb/sql/SqlTable<*>;)Lcom/yahoo/squidb/utility/ContentProviderQueryBuilder;", "setDefaultOrder", "[LSquiDBOrder;", "build", "[LNSString;LNSString;[LNSString;LNSString;", "computeProjection", "[LNSString;", "([Ljava/lang/String;)Ljava/util/List<Lcom/yahoo/squidb/sql/Field<*>;>;", "Lcom/yahoo/squidb/sql/SqlTable<*>;" };
  static const J2ObjcClassInfo _SquiDBContentProviderQueryBuilder = { "ContentProviderQueryBuilder", "com.yahoo.squidb.utility", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_SquiDBContentProviderQueryBuilder;
}

@end

void SquiDBContentProviderQueryBuilder_init(SquiDBContentProviderQueryBuilder *self) {
  NSObject_init(self);
  self->strictMode_ = false;
  self->projectionMap_ = nil;
  self->dataSource_ = nil;
  self->defaultOrder_ = nil;
}

SquiDBContentProviderQueryBuilder *new_SquiDBContentProviderQueryBuilder_init() {
  J2OBJC_NEW_IMPL(SquiDBContentProviderQueryBuilder, init)
}

SquiDBContentProviderQueryBuilder *create_SquiDBContentProviderQueryBuilder_init() {
  J2OBJC_CREATE_IMPL(SquiDBContentProviderQueryBuilder, init)
}

void SquiDBContentProviderQueryBuilder_initWithSquiDBPropertyArray_withSquiDBSqlTable_(SquiDBContentProviderQueryBuilder *self, IOSObjectArray *properties, SquiDBSqlTable *dataSource) {
  NSObject_init(self);
  self->strictMode_ = false;
  self->projectionMap_ = nil;
  self->dataSource_ = nil;
  self->defaultOrder_ = nil;
  SquiDBProjectionMap *projectionMap = new_SquiDBProjectionMap_init();
  [projectionMap putAllWithSquiDBFieldArray:properties];
  (void) [self setProjectionMapWithSquiDBProjectionMap:projectionMap];
  (void) [self setDataSourceWithSquiDBSqlTable:dataSource];
}

SquiDBContentProviderQueryBuilder *new_SquiDBContentProviderQueryBuilder_initWithSquiDBPropertyArray_withSquiDBSqlTable_(IOSObjectArray *properties, SquiDBSqlTable *dataSource) {
  J2OBJC_NEW_IMPL(SquiDBContentProviderQueryBuilder, initWithSquiDBPropertyArray_withSquiDBSqlTable_, properties, dataSource)
}

SquiDBContentProviderQueryBuilder *create_SquiDBContentProviderQueryBuilder_initWithSquiDBPropertyArray_withSquiDBSqlTable_(IOSObjectArray *properties, SquiDBSqlTable *dataSource) {
  J2OBJC_CREATE_IMPL(SquiDBContentProviderQueryBuilder, initWithSquiDBPropertyArray_withSquiDBSqlTable_, properties, dataSource)
}

id<JavaUtilList> SquiDBContentProviderQueryBuilder_computeProjectionWithNSStringArray_(SquiDBContentProviderQueryBuilder *self, IOSObjectArray *projectionIn) {
  id<JavaUtilList> projection = nil;
  if (self->projectionMap_ == nil) {
    if (self->strictMode_) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Strict mode requires a projection map to be set");
    }
    if (projectionIn != nil && projectionIn->size_ > 0) {
      projection = new_JavaUtilArrayList_initWithInt_(projectionIn->size_);
      {
        IOSObjectArray *a__ = projectionIn;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *expression = *b__++;
          [projection addWithId:SquiDBField_fieldWithNSString_(expression)];
        }
      }
    }
  }
  else {
    if (projectionIn == nil || projectionIn->size_ == 0) {
      projection = [self->projectionMap_ getDefaultProjection];
    }
    else {
      projection = new_JavaUtilArrayList_initWithInt_(projectionIn->size_);
      {
        IOSObjectArray *a__ = projectionIn;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *expression = *b__++;
          SquiDBField *column = [((SquiDBProjectionMap *) nil_chk(self->projectionMap_)) getWithNSString:expression];
          if (column != nil) {
            [projection addWithId:column];
          }
          else if (self->strictMode_) {
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid column: ", expression));
          }
        }
      }
    }
  }
  return projection;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBContentProviderQueryBuilder)

J2OBJC_NAME_MAPPING(SquiDBContentProviderQueryBuilder, "com.yahoo.squidb.utility", "SquiDB")
