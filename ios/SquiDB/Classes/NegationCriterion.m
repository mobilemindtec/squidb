//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/NegationCriterion.java
//

#include "Criterion.h"
#include "J2ObjC_source.h"
#include "NegationCriterion.h"
#include "Operator.h"
#include "SqlBuilder.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"

@interface ComYahooSquidbSqlNegationCriterion () {
 @public
  ComYahooSquidbSqlCriterion *toNegate_;
}

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbSqlNegationCriterion, toNegate_, ComYahooSquidbSqlCriterion *)

@implementation ComYahooSquidbSqlNegationCriterion

- (instancetype)initWithComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)toNegate {
  ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(self, toNegate);
  return self;
}

- (void)populateWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                    withBoolean:(jboolean)forSqlValidation {
  (void) [((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithId:operator__];
  [((ComYahooSquidbSqlCriterion *) nil_chk(toNegate_)) appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:builder withBoolean:forSqlValidation];
}

- (ComYahooSquidbSqlCriterion *)negate {
  return toNegate_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlCriterion;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComYahooSquidbSqlCriterion:);
  methods[1].selector = @selector(populateWithComYahooSquidbSqlSqlBuilder:withBoolean:);
  methods[2].selector = @selector(negate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "toNegate_", "LComYahooSquidbSqlCriterion;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComYahooSquidbSqlCriterion;", "populate", "LComYahooSquidbSqlSqlBuilder;Z" };
  static const J2ObjcClassInfo _ComYahooSquidbSqlNegationCriterion = { "NegationCriterion", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, -1, -1, -1, -1 };
  return &_ComYahooSquidbSqlNegationCriterion;
}

@end

void ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(ComYahooSquidbSqlNegationCriterion *self, ComYahooSquidbSqlCriterion *toNegate) {
  ComYahooSquidbSqlCriterion_initWithComYahooSquidbSqlOperator_(self, JreLoadEnum(ComYahooSquidbSqlOperator, not));
  if (toNegate == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't negate a null criterion");
  }
  self->toNegate_ = toNegate;
}

ComYahooSquidbSqlNegationCriterion *new_ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(ComYahooSquidbSqlCriterion *toNegate) {
  J2OBJC_NEW_IMPL(ComYahooSquidbSqlNegationCriterion, initWithComYahooSquidbSqlCriterion_, toNegate)
}

ComYahooSquidbSqlNegationCriterion *create_ComYahooSquidbSqlNegationCriterion_initWithComYahooSquidbSqlCriterion_(ComYahooSquidbSqlCriterion *toNegate) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbSqlNegationCriterion, initWithComYahooSquidbSqlCriterion_, toNegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlNegationCriterion)
