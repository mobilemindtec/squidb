//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Trigger.java
//

#ifndef Trigger_H
#define Trigger_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DBObject.h"
#include "J2ObjC_header.h"
#include "SqlStatement.h"

@class IOSObjectArray;
@class SquiDBCompileContext;
@class SquiDBCompiledStatement;
@class SquiDBCriterion;
@class SquiDBProperty;
@class SquiDBSqlBuilder;
@class SquiDBTable;
@class SquiDBTrigger_TriggerType;
@class SquiDBVersionCode;
@class SquiDBView;

@interface SquiDBTrigger : SquiDBDBObject < SquiDBSqlStatement >

#pragma mark Public

+ (SquiDBTrigger *)afterWithNSString:(NSString *)name;

- (SquiDBTrigger *)asWithNSString:(NSString *)arg0;

+ (SquiDBTrigger *)beforeWithNSString:(NSString *)name;

- (SquiDBCompiledStatement *)compileWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext;

- (SquiDBCompiledStatement *)compileWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion;

- (SquiDBTrigger *)deleteOnWithSquiDBTable:(SquiDBTable *)table;

- (SquiDBTrigger *)deleteOnWithSquiDBView:(SquiDBView *)view;

- (SquiDBTrigger *)insertOnWithSquiDBTable:(SquiDBTable *)table;

- (SquiDBTrigger *)insertOnWithSquiDBView:(SquiDBView *)view;

+ (SquiDBTrigger *)insteadOfWithNSString:(NSString *)name;

+ (SquiDBProperty *)newValueOfWithSquiDBProperty:(SquiDBProperty *)property OBJC_METHOD_FAMILY_NONE;

+ (SquiDBProperty *)oldValueOfWithSquiDBProperty:(SquiDBProperty *)property;

- (SquiDBTrigger *)performWithSquiDBTableStatementArray:(IOSObjectArray *)statements;

+ (SquiDBTrigger *)tempAfterWithNSString:(NSString *)name;

+ (SquiDBTrigger *)tempBeforeWithNSString:(NSString *)name;

+ (SquiDBTrigger *)tempInsteadOfWithNSString:(NSString *)name;

- (SquiDBTrigger *)updateOnWithSquiDBTable:(SquiDBTable *)table
                   withSquiDBPropertyArray:(IOSObjectArray *)columns;

- (SquiDBTrigger *)updateOnWithSquiDBView:(SquiDBView *)view
                  withSquiDBPropertyArray:(IOSObjectArray *)columns;

- (SquiDBTrigger *)whenWithSquiDBCriterion:(SquiDBCriterion *)criterion;

#pragma mark Protected

- (instancetype __nonnull)initWithNSString:(NSString *)name
             withSquiDBTrigger_TriggerType:(SquiDBTrigger_TriggerType *)triggerType;

#pragma mark Package-Private

- (void)appendToSqlBuilderWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                   withBoolean:(jboolean)forSqlValidation;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initPackagePrivateWithNSString:(NSString *)arg0
                                            withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(SquiDBTrigger)

FOUNDATION_EXPORT void SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(SquiDBTrigger *self, NSString *name, SquiDBTrigger_TriggerType *triggerType);

FOUNDATION_EXPORT SquiDBTrigger *new_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(NSString *name, SquiDBTrigger_TriggerType *triggerType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBTrigger *create_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(NSString *name, SquiDBTrigger_TriggerType *triggerType);

FOUNDATION_EXPORT SquiDBTrigger *SquiDBTrigger_beforeWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger *SquiDBTrigger_afterWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger *SquiDBTrigger_insteadOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger *SquiDBTrigger_tempBeforeWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger *SquiDBTrigger_tempAfterWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger *SquiDBTrigger_tempInsteadOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBProperty *SquiDBTrigger_oldValueOfWithSquiDBProperty_(SquiDBProperty *property);

FOUNDATION_EXPORT SquiDBProperty *SquiDBTrigger_newValueOfWithSquiDBProperty_(SquiDBProperty *property);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTrigger)

@compatibility_alias ComYahooSquidbSqlTrigger SquiDBTrigger;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Trigger_H
