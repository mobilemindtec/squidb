//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/AbstractModel.java
//

#include "AbstractModel.h"
#include "Field.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MapValuesStorage.h"
#include "Property.h"
#include "SquidCursor.h"
#include "ValuesStorage.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@class SquiDBAbstractModel_ValueCastingVisitor;
@class SquiDBAbstractModel_ValuesStorageSavingVisitor;

@interface SquiDBAbstractModel ()

- (void)prepareToReadProperties;

- (void)readFieldIntoModelWithSquiDBSquidCursor:(SquiDBSquidCursor *)cursor
                                withSquiDBField:(SquiDBField *)field;

- (id)getFromValuesWithSquiDBProperty:(SquiDBProperty *)property
              withSquiDBValuesStorage:(SquiDBValuesStorage *)values;

- (jboolean)valuesContainsKeyWithSquiDBValuesStorage:(SquiDBValuesStorage *)values
                                  withSquiDBProperty:(SquiDBProperty *)property;

@end

inline SquiDBAbstractModel_ValuesStorageSavingVisitor *SquiDBAbstractModel_get_saver(void);
static SquiDBAbstractModel_ValuesStorageSavingVisitor *SquiDBAbstractModel_saver;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBAbstractModel, saver, SquiDBAbstractModel_ValuesStorageSavingVisitor *)

inline SquiDBAbstractModel_ValueCastingVisitor *SquiDBAbstractModel_get_valueCastingVisitor(void);
static SquiDBAbstractModel_ValueCastingVisitor *SquiDBAbstractModel_valueCastingVisitor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBAbstractModel, valueCastingVisitor, SquiDBAbstractModel_ValueCastingVisitor *)

__attribute__((unused)) static void SquiDBAbstractModel_prepareToReadProperties(SquiDBAbstractModel *self);

__attribute__((unused)) static void SquiDBAbstractModel_readFieldIntoModelWithSquiDBSquidCursor_withSquiDBField_(SquiDBAbstractModel *self, SquiDBSquidCursor *cursor, SquiDBField *field);

__attribute__((unused)) static id SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(SquiDBAbstractModel *self, SquiDBProperty *property, SquiDBValuesStorage *values);

__attribute__((unused)) static jboolean SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(SquiDBAbstractModel *self, SquiDBValuesStorage *values, SquiDBProperty *property);

@interface SquiDBAbstractModel_ValuesStorageSavingVisitor : NSObject < SquiDBProperty_PropertyWritingVisitor >

- (instancetype)init;

- (void)saveWithSquiDBProperty:(SquiDBProperty *)property
       withSquiDBValuesStorage:(SquiDBValuesStorage *)newStore
                        withId:(id)value;

- (JavaLangVoid *)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(SquiDBValuesStorage *)dst
                                         withId:(id)value;

- (JavaLangVoid *)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(SquiDBValuesStorage *)dst
                                          withId:(id)value;

- (JavaLangVoid *)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(SquiDBValuesStorage *)dst
                                       withId:(id)value;

- (JavaLangVoid *)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(SquiDBValuesStorage *)dst
                                         withId:(id)value;

- (JavaLangVoid *)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(SquiDBValuesStorage *)dst
                                          withId:(id)value;

- (JavaLangVoid *)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(SquiDBValuesStorage *)dst
                                       withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBAbstractModel_ValuesStorageSavingVisitor)

__attribute__((unused)) static void SquiDBAbstractModel_ValuesStorageSavingVisitor_init(SquiDBAbstractModel_ValuesStorageSavingVisitor *self);

__attribute__((unused)) static SquiDBAbstractModel_ValuesStorageSavingVisitor *new_SquiDBAbstractModel_ValuesStorageSavingVisitor_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBAbstractModel_ValuesStorageSavingVisitor *create_SquiDBAbstractModel_ValuesStorageSavingVisitor_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBAbstractModel_ValuesStorageSavingVisitor)

@interface SquiDBAbstractModel_ValueCastingVisitor : NSObject < SquiDBProperty_PropertyVisitor >

- (instancetype)init;

- (id)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                              withId:(id)data;

- (id)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                           withId:(id)data;

- (id)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                             withId:(id)data;

- (id)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                             withId:(id)data;

- (id)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                              withId:(id)data;

- (id)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                           withId:(id)data;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBAbstractModel_ValueCastingVisitor)

__attribute__((unused)) static void SquiDBAbstractModel_ValueCastingVisitor_init(SquiDBAbstractModel_ValueCastingVisitor *self);

__attribute__((unused)) static SquiDBAbstractModel_ValueCastingVisitor *new_SquiDBAbstractModel_ValueCastingVisitor_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBAbstractModel_ValueCastingVisitor *create_SquiDBAbstractModel_ValueCastingVisitor_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBAbstractModel_ValueCastingVisitor)

J2OBJC_INITIALIZED_DEFN(SquiDBAbstractModel)

@implementation SquiDBAbstractModel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBAbstractModel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (SquiDBValuesStorage *)getDefaultValues {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SquiDBValuesStorage *)getDatabaseValues {
  return values_;
}

- (SquiDBValuesStorage *)getSetValues {
  return setValues_;
}

- (SquiDBValuesStorage *)getMergedValues {
  SquiDBValuesStorage *mergedValues = [self newValuesStorage];
  SquiDBValuesStorage *defaultValues = [self getDefaultValues];
  if (defaultValues != nil) {
    [((SquiDBValuesStorage *) nil_chk(mergedValues)) putAllWithSquiDBValuesStorage:defaultValues];
  }
  if (values_ != nil) {
    [((SquiDBValuesStorage *) nil_chk(mergedValues)) putAllWithSquiDBValuesStorage:values_];
  }
  if (setValues_ != nil) {
    [((SquiDBValuesStorage *) nil_chk(mergedValues)) putAllWithSquiDBValuesStorage:setValues_];
  }
  return mergedValues;
}

- (SquiDBValuesStorage *)newValuesStorage {
  return new_SquiDBMapValuesStorage_init();
}

- (void)clear {
  values_ = nil;
  setValues_ = nil;
  transitoryData_ = nil;
}

- (void)markSaved {
  if (values_ == nil) {
    values_ = setValues_;
  }
  else if (setValues_ != nil) {
    [values_ putAllWithSquiDBValuesStorage:setValues_];
  }
  setValues_ = nil;
}

- (jboolean)isEqual:(id)other {
  return other != nil && [[self java_getClass] isEqual:[other java_getClass]] && [((SquiDBValuesStorage *) nil_chk([self getMergedValues])) isEqual:[((SquiDBAbstractModel *) cast_chk(other, [SquiDBAbstractModel class])) getMergedValues]];
}

- (NSUInteger)hash {
  return ((jint) [((SquiDBValuesStorage *) nil_chk([self getMergedValues])) hash]) ^ ((jint) [[self java_getClass] hash]);
}

- (NSString *)description {
  return JreStrcat("$$@$@C", [[self java_getClass] getSimpleName], @"\nset values:\n", setValues_, @"\nvalues:\n", values_, 0x000a);
}

- (SquiDBAbstractModel *)java_clone {
  SquiDBAbstractModel *clone;
  @try {
    clone = (SquiDBAbstractModel *) cast_chk([super java_clone], [SquiDBAbstractModel class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  if (setValues_ != nil) {
    ((SquiDBAbstractModel *) nil_chk(clone))->setValues_ = [self newValuesStorage];
    [((SquiDBValuesStorage *) nil_chk(clone->setValues_)) putAllWithSquiDBValuesStorage:setValues_];
  }
  if (values_ != nil) {
    ((SquiDBAbstractModel *) nil_chk(clone))->values_ = [self newValuesStorage];
    [((SquiDBValuesStorage *) nil_chk(clone->values_)) putAllWithSquiDBValuesStorage:values_];
  }
  if (transitoryData_ != nil) {
    ((SquiDBAbstractModel *) nil_chk(clone))->transitoryData_ = new_JavaUtilHashMap_initWithJavaUtilMap_(transitoryData_);
  }
  return clone;
}

- (jboolean)isModified {
  return setValues_ != nil && [setValues_ size] > 0;
}

- (void)readPropertiesFromValuesStorageWithSquiDBValuesStorage:(SquiDBValuesStorage *)values
                                       withSquiDBPropertyArray:(IOSObjectArray *)properties {
  SquiDBAbstractModel_prepareToReadProperties(self);
  if (values != nil) {
    {
      IOSObjectArray *a__ = properties;
      SquiDBProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      SquiDBProperty * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        SquiDBProperty *property = *b__++;
        if ([values containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]]) {
          [((SquiDBValuesStorage *) nil_chk(self->values_)) putWithNSString:[property getName] withId:SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(self, property, values) withBoolean:true];
        }
      }
    }
  }
}

- (void)readPropertiesFromMapWithJavaUtilMap:(id<JavaUtilMap>)values
                     withSquiDBPropertyArray:(IOSObjectArray *)properties {
  if (values == nil) {
    return;
  }
  [self readPropertiesFromValuesStorageWithSquiDBValuesStorage:new_SquiDBMapValuesStorage_initWithJavaUtilMap_(values) withSquiDBPropertyArray:properties];
}

- (void)setPropertiesFromMapWithJavaUtilMap:(id<JavaUtilMap>)values
                    withSquiDBPropertyArray:(IOSObjectArray *)properties {
  if (values == nil) {
    return;
  }
  [self setPropertiesFromValuesStorageWithSquiDBValuesStorage:new_SquiDBMapValuesStorage_initWithJavaUtilMap_(values) withSquiDBPropertyArray:properties];
}

- (void)readPropertiesFromCursorWithSquiDBSquidCursor:(SquiDBSquidCursor *)cursor {
  SquiDBAbstractModel_prepareToReadProperties(self);
  for (SquiDBField * __strong field in nil_chk([((SquiDBSquidCursor *) nil_chk(cursor)) getFields])) {
    SquiDBAbstractModel_readFieldIntoModelWithSquiDBSquidCursor_withSquiDBField_(self, cursor, field);
  }
}

- (void)readPropertiesFromCursorWithSquiDBSquidCursor:(SquiDBSquidCursor *)cursor
                              withSquiDBPropertyArray:(IOSObjectArray *)properties {
  SquiDBAbstractModel_prepareToReadProperties(self);
  {
    IOSObjectArray *a__ = properties;
    SquiDBProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    SquiDBProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      SquiDBProperty *field = *b__++;
      SquiDBAbstractModel_readFieldIntoModelWithSquiDBSquidCursor_withSquiDBField_(self, cursor, field);
    }
  }
}

- (void)prepareToReadProperties {
  SquiDBAbstractModel_prepareToReadProperties(self);
}

- (void)readFieldIntoModelWithSquiDBSquidCursor:(SquiDBSquidCursor *)cursor
                                withSquiDBField:(SquiDBField *)field {
  SquiDBAbstractModel_readFieldIntoModelWithSquiDBSquidCursor_withSquiDBField_(self, cursor, field);
}

- (id)getWithSquiDBProperty:(SquiDBProperty *)property {
  return [self getWithSquiDBProperty:property withBoolean:false];
}

- (id)getWithSquiDBProperty:(SquiDBProperty *)property
                withBoolean:(jboolean)throwOnFail {
  if (setValues_ != nil && [setValues_ containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]]) {
    return SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(self, property, setValues_);
  }
  else if (values_ != nil && [values_ containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]]) {
    return SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(self, property, values_);
  }
  else if ([((SquiDBValuesStorage *) nil_chk([self getDefaultValues])) containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]]) {
    return SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(self, property, [self getDefaultValues]);
  }
  else if (throwOnFail) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", [property getName], @" not found in model. Make sure the value was set explicitly, read from a cursor, or that the model has a default value for this property."));
  }
  return nil;
}

- (id)getFromValuesWithSquiDBProperty:(SquiDBProperty *)property
              withSquiDBValuesStorage:(SquiDBValuesStorage *)values {
  return SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(self, property, values);
}

- (jboolean)containsValueWithSquiDBProperty:(SquiDBProperty *)property {
  return SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(self, setValues_, property) || SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(self, values_, property);
}

- (jboolean)containsNonNullValueWithSquiDBProperty:(SquiDBProperty *)property {
  if (SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(self, setValues_, property)) {
    return [((SquiDBValuesStorage *) nil_chk(setValues_)) getWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]] != nil;
  }
  else if (SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(self, values_, property)) {
    return [((SquiDBValuesStorage *) nil_chk(values_)) getWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]] != nil;
  }
  return false;
}

- (jboolean)fieldIsDirtyWithSquiDBProperty:(SquiDBProperty *)property {
  return SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(self, setValues_, property);
}

- (jboolean)valuesContainsKeyWithSquiDBValuesStorage:(SquiDBValuesStorage *)values
                                  withSquiDBProperty:(SquiDBProperty *)property {
  return SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(self, values, property);
}

- (jboolean)shouldSaveValueWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(id)newValue {
  return [self shouldSaveValueWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withId:newValue];
}

- (jboolean)shouldSaveValueWithNSString:(NSString *)name
                                 withId:(id)newValue {
  if ([((SquiDBValuesStorage *) nil_chk(setValues_)) containsKeyWithNSString:name]) {
    return true;
  }
  if (values_ != nil && [values_ containsKeyWithNSString:name]) {
    id value = [values_ getWithNSString:name];
    if (value == nil) {
      if (newValue == nil) {
        return false;
      }
    }
    else if ([value isEqual:newValue]) {
      return false;
    }
  }
  return true;
}

- (void)setWithSquiDBProperty:(SquiDBProperty *)property
                       withId:(id)value {
  if (setValues_ == nil) {
    setValues_ = [self newValuesStorage];
  }
  if (![self shouldSaveValueWithSquiDBProperty:property withId:value]) {
    return;
  }
  [((SquiDBAbstractModel_ValuesStorageSavingVisitor *) nil_chk(SquiDBAbstractModel_saver)) saveWithSquiDBProperty:property withSquiDBValuesStorage:setValues_ withId:value];
}

- (void)setPropertiesFromValuesStorageWithSquiDBValuesStorage:(SquiDBValuesStorage *)values
                                      withSquiDBPropertyArray:(IOSObjectArray *)properties {
  if (values != nil) {
    if (setValues_ == nil) {
      setValues_ = [self newValuesStorage];
    }
    {
      IOSObjectArray *a__ = properties;
      SquiDBProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      SquiDBProperty * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        SquiDBProperty *property = *b__++;
        NSString *key = [((SquiDBProperty *) nil_chk(property)) getName];
        if ([values containsKeyWithNSString:key]) {
          id value = [property acceptWithSquiDBProperty_PropertyVisitor:SquiDBAbstractModel_valueCastingVisitor withId:[values getWithNSString:key]];
          if ([self shouldSaveValueWithNSString:key withId:value]) {
            [((SquiDBValuesStorage *) nil_chk(self->setValues_)) putWithNSString:[property getName] withId:value withBoolean:true];
          }
        }
      }
    }
  }
}

- (void)clearValueWithSquiDBProperty:(SquiDBProperty *)property {
  if (setValues_ != nil && [setValues_ containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]]) {
    [setValues_ removeWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]];
  }
  if (values_ != nil && [values_ containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]]) {
    [values_ removeWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]];
  }
}

- (void)putTransitoryWithNSString:(NSString *)key
                           withId:(id)value {
  if (transitoryData_ == nil) {
    transitoryData_ = new_JavaUtilHashMap_init();
  }
  (void) [transitoryData_ putWithId:key withId:value];
}

- (id)getTransitoryWithNSString:(NSString *)key {
  if (transitoryData_ == nil) {
    return nil;
  }
  return [transitoryData_ getWithId:key];
}

- (id)clearTransitoryWithNSString:(NSString *)key {
  if (transitoryData_ == nil) {
    return nil;
  }
  return [transitoryData_ removeWithId:key];
}

- (void)clearAllTransitory {
  transitoryData_ = nil;
}

- (id<JavaUtilSet>)getAllTransitoryKeys {
  if (transitoryData_ == nil) {
    return nil;
  }
  return [transitoryData_ keySet];
}

- (jboolean)hasTransitoryWithNSString:(NSString *)key {
  return transitoryData_ != nil && [transitoryData_ containsKeyWithId:key];
}

- (jboolean)checkAndClearTransitoryWithNSString:(NSString *)key {
  if ([self hasTransitoryWithNSString:key]) {
    (void) [self clearTransitoryWithNSString:key];
    return true;
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBValuesStorage;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBValuesStorage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBValuesStorage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBValuesStorage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBValuesStorage;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBAbstractModel;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x81, 11, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x81, 12, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, 19, -1, -1 },
    { NULL, "LNSObject;", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "LNSObject;", 0x1, 20, 23, -1, 24, -1, -1 },
    { NULL, "LNSObject;", 0x2, 25, 26, -1, 27, -1, -1 },
    { NULL, "Z", 0x1, 28, 21, -1, 29, -1, -1 },
    { NULL, "Z", 0x1, 30, 21, -1, 29, -1, -1 },
    { NULL, "Z", 0x1, 31, 21, -1, 29, -1, -1 },
    { NULL, "Z", 0x2, 32, 33, -1, 34, -1, -1 },
    { NULL, "Z", 0x4, 35, 36, -1, 37, -1, -1 },
    { NULL, "Z", 0x4, 35, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 36, -1, 40, -1, -1 },
    { NULL, "V", 0x81, 41, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 42, 21, -1, 43, -1, -1 },
    { NULL, "V", 0x1, 44, 38, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 47, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 48, -1, -1 },
    { NULL, "Z", 0x1, 49, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 50, 46, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDefaultValues);
  methods[2].selector = @selector(getDatabaseValues);
  methods[3].selector = @selector(getSetValues);
  methods[4].selector = @selector(getMergedValues);
  methods[5].selector = @selector(newValuesStorage);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(markSaved);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(java_clone);
  methods[12].selector = @selector(isModified);
  methods[13].selector = @selector(readPropertiesFromValuesStorageWithSquiDBValuesStorage:withSquiDBPropertyArray:);
  methods[14].selector = @selector(readPropertiesFromMapWithJavaUtilMap:withSquiDBPropertyArray:);
  methods[15].selector = @selector(setPropertiesFromMapWithJavaUtilMap:withSquiDBPropertyArray:);
  methods[16].selector = @selector(readPropertiesFromCursorWithSquiDBSquidCursor:);
  methods[17].selector = @selector(readPropertiesFromCursorWithSquiDBSquidCursor:withSquiDBPropertyArray:);
  methods[18].selector = @selector(prepareToReadProperties);
  methods[19].selector = @selector(readFieldIntoModelWithSquiDBSquidCursor:withSquiDBField:);
  methods[20].selector = @selector(getWithSquiDBProperty:);
  methods[21].selector = @selector(getWithSquiDBProperty:withBoolean:);
  methods[22].selector = @selector(getFromValuesWithSquiDBProperty:withSquiDBValuesStorage:);
  methods[23].selector = @selector(containsValueWithSquiDBProperty:);
  methods[24].selector = @selector(containsNonNullValueWithSquiDBProperty:);
  methods[25].selector = @selector(fieldIsDirtyWithSquiDBProperty:);
  methods[26].selector = @selector(valuesContainsKeyWithSquiDBValuesStorage:withSquiDBProperty:);
  methods[27].selector = @selector(shouldSaveValueWithSquiDBProperty:withId:);
  methods[28].selector = @selector(shouldSaveValueWithNSString:withId:);
  methods[29].selector = @selector(setWithSquiDBProperty:withId:);
  methods[30].selector = @selector(setPropertiesFromValuesStorageWithSquiDBValuesStorage:withSquiDBPropertyArray:);
  methods[31].selector = @selector(clearValueWithSquiDBProperty:);
  methods[32].selector = @selector(putTransitoryWithNSString:withId:);
  methods[33].selector = @selector(getTransitoryWithNSString:);
  methods[34].selector = @selector(clearTransitoryWithNSString:);
  methods[35].selector = @selector(clearAllTransitory);
  methods[36].selector = @selector(getAllTransitoryKeys);
  methods[37].selector = @selector(hasTransitoryWithNSString:);
  methods[38].selector = @selector(checkAndClearTransitoryWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "saver", "LSquiDBAbstractModel_ValuesStorageSavingVisitor;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "valueCastingVisitor", "LSquiDBAbstractModel_ValueCastingVisitor;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "setValues_", "LSquiDBValuesStorage;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "values_", "LSquiDBValuesStorage;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "transitoryData_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 53, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "hashCode", "toString", "clone", "readPropertiesFromValuesStorage", "LSquiDBValuesStorage;[LSquiDBProperty;", "(Lcom/yahoo/squidb/data/ValuesStorage;[Lcom/yahoo/squidb/sql/Property<*>;)V", "readPropertiesFromMap", "LJavaUtilMap;[LSquiDBProperty;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;[Lcom/yahoo/squidb/sql/Property<*>;)V", "setPropertiesFromMap", "readPropertiesFromCursor", "LSquiDBSquidCursor;", "(Lcom/yahoo/squidb/data/SquidCursor<*>;)V", "LSquiDBSquidCursor;[LSquiDBProperty;", "(Lcom/yahoo/squidb/data/SquidCursor<*>;[Lcom/yahoo/squidb/sql/Property<*>;)V", "readFieldIntoModel", "LSquiDBSquidCursor;LSquiDBField;", "(Lcom/yahoo/squidb/data/SquidCursor<*>;Lcom/yahoo/squidb/sql/Field<*>;)V", "get", "LSquiDBProperty;", "<TYPE:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Property<TTYPE;>;)TTYPE;", "LSquiDBProperty;Z", "<TYPE:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Property<TTYPE;>;Z)TTYPE;", "getFromValues", "LSquiDBProperty;LSquiDBValuesStorage;", "<TYPE:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Property<TTYPE;>;Lcom/yahoo/squidb/data/ValuesStorage;)TTYPE;", "containsValue", "(Lcom/yahoo/squidb/sql/Property<*>;)Z", "containsNonNullValue", "fieldIsDirty", "valuesContainsKey", "LSquiDBValuesStorage;LSquiDBProperty;", "(Lcom/yahoo/squidb/data/ValuesStorage;Lcom/yahoo/squidb/sql/Property<*>;)Z", "shouldSaveValue", "LSquiDBProperty;LNSObject;", "<TYPE:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Property<TTYPE;>;TTYPE;)Z", "LNSString;LNSObject;", "set", "<TYPE:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Property<TTYPE;>;TTYPE;)V", "setPropertiesFromValuesStorage", "clearValue", "(Lcom/yahoo/squidb/sql/Property<*>;)V", "putTransitory", "getTransitory", "LNSString;", "clearTransitory", "()Ljava/util/Set<Ljava/lang/String;>;", "hasTransitory", "checkAndClearTransitory", &SquiDBAbstractModel_saver, &SquiDBAbstractModel_valueCastingVisitor, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;", "LSquiDBAbstractModel_ValuesStorageSavingVisitor;LSquiDBAbstractModel_ValueCastingVisitor;" };
  static const J2ObjcClassInfo _SquiDBAbstractModel = { "AbstractModel", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x401, 39, 5, -1, 54, -1, -1, -1 };
  return &_SquiDBAbstractModel;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

+ (void)initialize {
  if (self == [SquiDBAbstractModel class]) {
    SquiDBAbstractModel_saver = new_SquiDBAbstractModel_ValuesStorageSavingVisitor_init();
    SquiDBAbstractModel_valueCastingVisitor = new_SquiDBAbstractModel_ValueCastingVisitor_init();
    J2OBJC_SET_INITIALIZED(SquiDBAbstractModel)
  }
}

@end

void SquiDBAbstractModel_init(SquiDBAbstractModel *self) {
  NSObject_init(self);
  self->setValues_ = nil;
  self->values_ = nil;
  self->transitoryData_ = nil;
}

void SquiDBAbstractModel_prepareToReadProperties(SquiDBAbstractModel *self) {
  if (self->values_ == nil) {
    self->values_ = [self newValuesStorage];
  }
  self->setValues_ = nil;
  self->transitoryData_ = nil;
}

void SquiDBAbstractModel_readFieldIntoModelWithSquiDBSquidCursor_withSquiDBField_(SquiDBAbstractModel *self, SquiDBSquidCursor *cursor, SquiDBField *field) {
  @try {
    if ([field isKindOfClass:[SquiDBProperty class]]) {
      SquiDBProperty *property = (SquiDBProperty *) field;
      [((SquiDBAbstractModel_ValuesStorageSavingVisitor *) nil_chk(SquiDBAbstractModel_saver)) saveWithSquiDBProperty:property withSquiDBValuesStorage:self->values_ withId:[((SquiDBSquidCursor *) nil_chk(cursor)) getWithSquiDBProperty:property]];
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
  }
}

id SquiDBAbstractModel_getFromValuesWithSquiDBProperty_withSquiDBValuesStorage_(SquiDBAbstractModel *self, SquiDBProperty *property, SquiDBValuesStorage *values) {
  id value = [((SquiDBValuesStorage *) nil_chk(values)) getWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]];
  return [property acceptWithSquiDBProperty_PropertyVisitor:SquiDBAbstractModel_valueCastingVisitor withId:value];
}

jboolean SquiDBAbstractModel_valuesContainsKeyWithSquiDBValuesStorage_withSquiDBProperty_(SquiDBAbstractModel *self, SquiDBValuesStorage *values, SquiDBProperty *property) {
  return values != nil && [values containsKeyWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBAbstractModel)

J2OBJC_NAME_MAPPING(SquiDBAbstractModel, "com.yahoo.squidb.data", "SquiDB")

@implementation SquiDBAbstractModel_ValuesStorageSavingVisitor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBAbstractModel_ValuesStorageSavingVisitor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)saveWithSquiDBProperty:(SquiDBProperty *)property
       withSquiDBValuesStorage:(SquiDBValuesStorage *)newStore
                        withId:(id)value {
  if (value != nil) {
    (void) [((SquiDBProperty *) nil_chk(property)) acceptWithSquiDBProperty_PropertyWritingVisitor:self withId:newStore withId:value];
  }
  else {
    [((SquiDBValuesStorage *) nil_chk(newStore)) putNullWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]];
  }
}

- (JavaLangVoid *)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(SquiDBValuesStorage *)dst
                                         withId:(id)value {
  [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withJavaLangDouble:(JavaLangDouble *) cast_chk(value, [JavaLangDouble class])];
  return nil;
}

- (JavaLangVoid *)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(SquiDBValuesStorage *)dst
                                          withId:(id)value {
  [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withJavaLangInteger:(JavaLangInteger *) cast_chk(value, [JavaLangInteger class])];
  return nil;
}

- (JavaLangVoid *)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(SquiDBValuesStorage *)dst
                                       withId:(id)value {
  [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withJavaLangLong:(JavaLangLong *) cast_chk(value, [JavaLangLong class])];
  return nil;
}

- (JavaLangVoid *)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(SquiDBValuesStorage *)dst
                                         withId:(id)value {
  [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withNSString:(NSString *) cast_chk(value, [NSString class])];
  return nil;
}

- (JavaLangVoid *)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(SquiDBValuesStorage *)dst
                                          withId:(id)value {
  if ([value isKindOfClass:[JavaLangBoolean class]]) {
    [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withJavaLangBoolean:(JavaLangBoolean *) value];
  }
  else if ([value isKindOfClass:[JavaLangInteger class]]) {
    [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_([((JavaLangInteger *) nil_chk(((JavaLangInteger *) value))) intValue] != 0)];
  }
  return nil;
}

- (JavaLangVoid *)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(SquiDBValuesStorage *)dst
                                       withId:(id)value {
  [((SquiDBValuesStorage *) nil_chk(dst)) putWithNSString:[((SquiDBProperty *) nil_chk(property)) getName] withByteArray:(IOSByteArray *) cast_chk(value, [IOSByteArray class])];
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 7, 1, -1, 8, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 9, 1, -1, 10, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 11, 1, -1, 12, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 13, 1, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(saveWithSquiDBProperty:withSquiDBValuesStorage:withId:);
  methods[2].selector = @selector(visitDoubleWithSquiDBProperty:withId:withId:);
  methods[3].selector = @selector(visitIntegerWithSquiDBProperty:withId:withId:);
  methods[4].selector = @selector(visitLongWithSquiDBProperty:withId:withId:);
  methods[5].selector = @selector(visitStringWithSquiDBProperty:withId:withId:);
  methods[6].selector = @selector(visitBooleanWithSquiDBProperty:withId:withId:);
  methods[7].selector = @selector(visitBlobWithSquiDBProperty:withId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "save", "LSquiDBProperty;LSquiDBValuesStorage;LNSObject;", "(Lcom/yahoo/squidb/sql/Property<*>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)V", "visitDouble", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Double;>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)Ljava/lang/Void;", "visitInteger", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Integer;>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)Ljava/lang/Void;", "visitLong", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Long;>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)Ljava/lang/Void;", "visitString", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/String;>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)Ljava/lang/Void;", "visitBoolean", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Boolean;>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)Ljava/lang/Void;", "visitBlob", "(Lcom/yahoo/squidb/sql/Property<[B>;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;)Ljava/lang/Void;", "LSquiDBAbstractModel;", "Ljava/lang/Object;Lcom/yahoo/squidb/sql/Property$PropertyWritingVisitor<Ljava/lang/Void;Lcom/yahoo/squidb/data/ValuesStorage;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _SquiDBAbstractModel_ValuesStorageSavingVisitor = { "ValuesStorageSavingVisitor", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0xa, 8, 0, 15, -1, -1, 16, -1 };
  return &_SquiDBAbstractModel_ValuesStorageSavingVisitor;
}

@end

void SquiDBAbstractModel_ValuesStorageSavingVisitor_init(SquiDBAbstractModel_ValuesStorageSavingVisitor *self) {
  NSObject_init(self);
}

SquiDBAbstractModel_ValuesStorageSavingVisitor *new_SquiDBAbstractModel_ValuesStorageSavingVisitor_init() {
  J2OBJC_NEW_IMPL(SquiDBAbstractModel_ValuesStorageSavingVisitor, init)
}

SquiDBAbstractModel_ValuesStorageSavingVisitor *create_SquiDBAbstractModel_ValuesStorageSavingVisitor_init() {
  J2OBJC_CREATE_IMPL(SquiDBAbstractModel_ValuesStorageSavingVisitor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBAbstractModel_ValuesStorageSavingVisitor)

@implementation SquiDBAbstractModel_ValueCastingVisitor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBAbstractModel_ValueCastingVisitor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                              withId:(id)data {
  if (data == nil || [data isKindOfClass:[JavaLangInteger class]]) {
    return data;
  }
  else if ([data isKindOfClass:[NSNumber class]]) {
    return JavaLangInteger_valueOfWithInt_([((NSNumber *) data) intValue]);
  }
  else if ([data isKindOfClass:[JavaLangBoolean class]]) {
    return JavaLangInteger_valueOfWithInt_([(JavaLangBoolean *) data booleanValue] ? 1 : 0);
  }
  else if ([data isKindOfClass:[NSString class]]) {
    @try {
      return JavaLangInteger_valueOfWithNSString_((NSString *) data);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
  }
  @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@$", @"Value ", data, @" could not be cast to Integer"));
}

- (id)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                           withId:(id)data {
  if (data == nil || [data isKindOfClass:[JavaLangLong class]]) {
    return data;
  }
  else if ([data isKindOfClass:[NSNumber class]]) {
    return JavaLangLong_valueOfWithLong_([((NSNumber *) data) longLongValue]);
  }
  else if ([data isKindOfClass:[JavaLangBoolean class]]) {
    return JavaLangLong_valueOfWithLong_([(JavaLangBoolean *) data booleanValue] ? 1LL : 0LL);
  }
  else if ([data isKindOfClass:[NSString class]]) {
    @try {
      return JavaLangLong_valueOfWithNSString_((NSString *) data);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
  }
  @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@$", @"Value ", data, @" could not be cast to Long"));
}

- (id)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                             withId:(id)data {
  if (data == nil || [data isKindOfClass:[JavaLangDouble class]]) {
    return data;
  }
  else if ([data isKindOfClass:[NSNumber class]]) {
    return JavaLangDouble_valueOfWithDouble_([((NSNumber *) data) doubleValue]);
  }
  else if ([data isKindOfClass:[NSString class]]) {
    @try {
      return JavaLangDouble_valueOfWithNSString_((NSString *) data);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
  }
  @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@$", @"Value ", data, @" could not be cast to Double"));
}

- (id)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                             withId:(id)data {
  if (data == nil || [data isKindOfClass:[NSString class]]) {
    return data;
  }
  else {
    return NSString_java_valueOf_(data);
  }
}

- (id)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                              withId:(id)data {
  if (data == nil || [data isKindOfClass:[JavaLangBoolean class]]) {
    return data;
  }
  else if ([data isKindOfClass:[NSNumber class]]) {
    return JavaLangBoolean_valueOfWithBoolean_([((NSNumber *) data) intValue] != 0);
  }
  @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@$", @"Value ", data, @" could not be cast to Boolean"));
}

- (id)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                           withId:(id)data {
  if (data != nil && !([data isKindOfClass:[IOSByteArray class]])) {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@$", @"Data ", data, @" could not be cast to byte[]"));
  }
  return data;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 1, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 1, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 1, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(visitIntegerWithSquiDBProperty:withId:);
  methods[2].selector = @selector(visitLongWithSquiDBProperty:withId:);
  methods[3].selector = @selector(visitDoubleWithSquiDBProperty:withId:);
  methods[4].selector = @selector(visitStringWithSquiDBProperty:withId:);
  methods[5].selector = @selector(visitBooleanWithSquiDBProperty:withId:);
  methods[6].selector = @selector(visitBlobWithSquiDBProperty:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "visitInteger", "LSquiDBProperty;LNSObject;", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Integer;>;Ljava/lang/Object;)Ljava/lang/Object;", "visitLong", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Long;>;Ljava/lang/Object;)Ljava/lang/Object;", "visitDouble", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Double;>;Ljava/lang/Object;)Ljava/lang/Object;", "visitString", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/String;>;Ljava/lang/Object;)Ljava/lang/Object;", "visitBoolean", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Boolean;>;Ljava/lang/Object;)Ljava/lang/Object;", "visitBlob", "(Lcom/yahoo/squidb/sql/Property<[B>;Ljava/lang/Object;)Ljava/lang/Object;", "LSquiDBAbstractModel;", "Ljava/lang/Object;Lcom/yahoo/squidb/sql/Property$PropertyVisitor<Ljava/lang/Object;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _SquiDBAbstractModel_ValueCastingVisitor = { "ValueCastingVisitor", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0xa, 7, 0, 13, -1, -1, 14, -1 };
  return &_SquiDBAbstractModel_ValueCastingVisitor;
}

@end

void SquiDBAbstractModel_ValueCastingVisitor_init(SquiDBAbstractModel_ValueCastingVisitor *self) {
  NSObject_init(self);
}

SquiDBAbstractModel_ValueCastingVisitor *new_SquiDBAbstractModel_ValueCastingVisitor_init() {
  J2OBJC_NEW_IMPL(SquiDBAbstractModel_ValueCastingVisitor, init)
}

SquiDBAbstractModel_ValueCastingVisitor *create_SquiDBAbstractModel_ValueCastingVisitor_init() {
  J2OBJC_CREATE_IMPL(SquiDBAbstractModel_ValueCastingVisitor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBAbstractModel_ValueCastingVisitor)
