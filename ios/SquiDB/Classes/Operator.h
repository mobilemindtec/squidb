//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Operator.java
//

#ifndef Operator_H
#define Operator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, SquiDBOperator_Enum) {
  SquiDBOperator_Enum_eq = 0,
  SquiDBOperator_Enum_neq = 1,
  SquiDBOperator_Enum_is = 2,
  SquiDBOperator_Enum_isNot = 3,
  SquiDBOperator_Enum_gt = 4,
  SquiDBOperator_Enum_lt = 5,
  SquiDBOperator_Enum_gte = 6,
  SquiDBOperator_Enum_lte = 7,
  SquiDBOperator_Enum_and = 8,
  SquiDBOperator_Enum_or = 9,
  SquiDBOperator_Enum_not = 10,
  SquiDBOperator_Enum_exists = 11,
  SquiDBOperator_Enum_like = 12,
  SquiDBOperator_Enum_notLike = 13,
  SquiDBOperator_Enum_in = 14,
  SquiDBOperator_Enum_notIn = 15,
  SquiDBOperator_Enum_between = 16,
  SquiDBOperator_Enum_notBetween = 17,
  SquiDBOperator_Enum_glob = 18,
  SquiDBOperator_Enum_notGlob = 19,
  SquiDBOperator_Enum_match = 20,
};

@interface SquiDBOperator : JavaLangEnum

@property (readonly, class, nonnull) SquiDBOperator *eq NS_SWIFT_NAME(eq);
@property (readonly, class, nonnull) SquiDBOperator *neq NS_SWIFT_NAME(neq);
@property (readonly, class, nonnull) SquiDBOperator *is NS_SWIFT_NAME(is);
@property (readonly, class, nonnull) SquiDBOperator *isNot NS_SWIFT_NAME(isNot);
@property (readonly, class, nonnull) SquiDBOperator *gt NS_SWIFT_NAME(gt);
@property (readonly, class, nonnull) SquiDBOperator *lt NS_SWIFT_NAME(lt);
@property (readonly, class, nonnull) SquiDBOperator *gte NS_SWIFT_NAME(gte);
@property (readonly, class, nonnull) SquiDBOperator *lte NS_SWIFT_NAME(lte);
@property (readonly, class, nonnull) SquiDBOperator *and_ NS_SWIFT_NAME(and_);
@property (readonly, class, nonnull) SquiDBOperator *or_ NS_SWIFT_NAME(or_);
@property (readonly, class, nonnull) SquiDBOperator *not_ NS_SWIFT_NAME(not_);
@property (readonly, class, nonnull) SquiDBOperator *exists NS_SWIFT_NAME(exists);
@property (readonly, class, nonnull) SquiDBOperator *like NS_SWIFT_NAME(like);
@property (readonly, class, nonnull) SquiDBOperator *notLike NS_SWIFT_NAME(notLike);
@property (readonly, class, nonnull) SquiDBOperator *in NS_SWIFT_NAME(in);
@property (readonly, class, nonnull) SquiDBOperator *notIn NS_SWIFT_NAME(notIn);
@property (readonly, class, nonnull) SquiDBOperator *between NS_SWIFT_NAME(between);
@property (readonly, class, nonnull) SquiDBOperator *notBetween NS_SWIFT_NAME(notBetween);
@property (readonly, class, nonnull) SquiDBOperator *glob NS_SWIFT_NAME(glob);
@property (readonly, class, nonnull) SquiDBOperator *notGlob NS_SWIFT_NAME(notGlob);
@property (readonly, class, nonnull) SquiDBOperator *match NS_SWIFT_NAME(match);
+ (SquiDBOperator * __nonnull)eq;

+ (SquiDBOperator * __nonnull)neq;

+ (SquiDBOperator * __nonnull)is;

+ (SquiDBOperator * __nonnull)isNot;

+ (SquiDBOperator * __nonnull)gt;

+ (SquiDBOperator * __nonnull)lt;

+ (SquiDBOperator * __nonnull)gte;

+ (SquiDBOperator * __nonnull)lte;

+ (SquiDBOperator * __nonnull)and_;

+ (SquiDBOperator * __nonnull)or_;

+ (SquiDBOperator * __nonnull)not_;

+ (SquiDBOperator * __nonnull)exists;

+ (SquiDBOperator * __nonnull)like;

+ (SquiDBOperator * __nonnull)notLike;

+ (SquiDBOperator * __nonnull)in;

+ (SquiDBOperator * __nonnull)notIn;

+ (SquiDBOperator * __nonnull)between;

+ (SquiDBOperator * __nonnull)notBetween;

+ (SquiDBOperator * __nonnull)glob;

+ (SquiDBOperator * __nonnull)notGlob;

+ (SquiDBOperator * __nonnull)match;

#pragma mark Public

- (SquiDBOperator *)getContrary;

- (NSString *)description;

+ (SquiDBOperator *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (SquiDBOperator_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBOperator)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBOperator *SquiDBOperator_values_[];

inline SquiDBOperator *SquiDBOperator_get_eq(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, eq)

inline SquiDBOperator *SquiDBOperator_get_neq(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, neq)

inline SquiDBOperator *SquiDBOperator_get_is(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, is)

inline SquiDBOperator *SquiDBOperator_get_isNot(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, isNot)

inline SquiDBOperator *SquiDBOperator_get_gt(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, gt)

inline SquiDBOperator *SquiDBOperator_get_lt(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, lt)

inline SquiDBOperator *SquiDBOperator_get_gte(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, gte)

inline SquiDBOperator *SquiDBOperator_get_lte(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, lte)

inline SquiDBOperator *SquiDBOperator_get_and(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, and)

inline SquiDBOperator *SquiDBOperator_get_or(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, or)

inline SquiDBOperator *SquiDBOperator_get_not(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, not)

inline SquiDBOperator *SquiDBOperator_get_exists(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, exists)

inline SquiDBOperator *SquiDBOperator_get_like(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, like)

inline SquiDBOperator *SquiDBOperator_get_notLike(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, notLike)

inline SquiDBOperator *SquiDBOperator_get_in(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, in)

inline SquiDBOperator *SquiDBOperator_get_notIn(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, notIn)

inline SquiDBOperator *SquiDBOperator_get_between(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, between)

inline SquiDBOperator *SquiDBOperator_get_notBetween(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, notBetween)

inline SquiDBOperator *SquiDBOperator_get_glob(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, glob)

inline SquiDBOperator *SquiDBOperator_get_notGlob(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, notGlob)

inline SquiDBOperator *SquiDBOperator_get_match(void);
J2OBJC_ENUM_CONSTANT(SquiDBOperator, match)

FOUNDATION_EXPORT IOSObjectArray *SquiDBOperator_values(void);

FOUNDATION_EXPORT SquiDBOperator *SquiDBOperator_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBOperator *SquiDBOperator_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBOperator)

@compatibility_alias ComYahooSquidbSqlOperator SquiDBOperator;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Operator_H
