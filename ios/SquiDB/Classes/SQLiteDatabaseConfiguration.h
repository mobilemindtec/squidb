//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SQLiteDatabaseConfiguration.java
//

#ifndef SQLiteDatabaseConfiguration_H
#define SQLiteDatabaseConfiguration_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class JavaUtilArrayList;
@class JavaUtilLocale;

@interface SquiDBSQLiteDatabaseConfiguration : NSObject {
 @public
  NSString *path_;
  NSString *label_;
  jint openFlags_;
  jint maxSqlCacheSize_;
  JavaUtilLocale *locale_;
  jboolean foreignKeyConstraintsEnabled_;
  JavaUtilArrayList *customFunctions_;
}
@property (readonly, copy, class) NSString *MEMORY_DB_PATH NS_SWIFT_NAME(MEMORY_DB_PATH);

+ (NSString *)MEMORY_DB_PATH;

#pragma mark Public

- (instancetype __nonnull)initWithSquiDBSQLiteDatabaseConfiguration:(SquiDBSQLiteDatabaseConfiguration *)other;

- (instancetype __nonnull)initWithNSString:(NSString *)path
                                   withInt:(jint)openFlags;

- (jboolean)isInMemoryDb;

- (void)updateParametersFromWithSquiDBSQLiteDatabaseConfiguration:(SquiDBSQLiteDatabaseConfiguration *)other;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(SquiDBSQLiteDatabaseConfiguration)

J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabaseConfiguration, path_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabaseConfiguration, label_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabaseConfiguration, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabaseConfiguration, customFunctions_, JavaUtilArrayList *)

inline NSString *SquiDBSQLiteDatabaseConfiguration_get_MEMORY_DB_PATH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SquiDBSQLiteDatabaseConfiguration_MEMORY_DB_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteDatabaseConfiguration, MEMORY_DB_PATH, NSString *)

FOUNDATION_EXPORT void SquiDBSQLiteDatabaseConfiguration_initWithNSString_withInt_(SquiDBSQLiteDatabaseConfiguration *self, NSString *path, jint openFlags);

FOUNDATION_EXPORT SquiDBSQLiteDatabaseConfiguration *new_SquiDBSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBSQLiteDatabaseConfiguration *create_SquiDBSQLiteDatabaseConfiguration_initWithNSString_withInt_(NSString *path, jint openFlags);

FOUNDATION_EXPORT void SquiDBSQLiteDatabaseConfiguration_initWithSquiDBSQLiteDatabaseConfiguration_(SquiDBSQLiteDatabaseConfiguration *self, SquiDBSQLiteDatabaseConfiguration *other);

FOUNDATION_EXPORT SquiDBSQLiteDatabaseConfiguration *new_SquiDBSQLiteDatabaseConfiguration_initWithSquiDBSQLiteDatabaseConfiguration_(SquiDBSQLiteDatabaseConfiguration *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBSQLiteDatabaseConfiguration *create_SquiDBSQLiteDatabaseConfiguration_initWithSquiDBSQLiteDatabaseConfiguration_(SquiDBSQLiteDatabaseConfiguration *other);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSQLiteDatabaseConfiguration)

@compatibility_alias ComYahooAndroidSqliteSQLiteDatabaseConfiguration SquiDBSQLiteDatabaseConfiguration;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SQLiteDatabaseConfiguration_H
