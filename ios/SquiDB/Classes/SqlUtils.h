//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SqlUtils.java
//

#ifndef SqlUtils_H
#define SqlUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSByteArray;
@class JavaLangStringBuilder;
@protocol JavaUtilCollection;
@protocol SquiDBArgumentResolver;

@interface SquiDBSqlUtils : NSObject

#pragma mark Public

+ (jboolean)equalsWithNSString:(NSString *)a
                  withNSString:(NSString *)b;

+ (NSString *)escapeLikePatternWithNSString:(NSString *)pattern
                                   withChar:(jchar)escape;

+ (jboolean)isEmptyWithNSString:(NSString *)str;

+ (id)resolveArgReferencesWithId:(id)arg;

#pragma mark Package-Private

+ (void)addInlineCollectionToSqlStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                                     withSquiDBArgumentResolver:(id<SquiDBArgumentResolver>)argResolver
                                         withJavaUtilCollection:(id<JavaUtilCollection>)values;

+ (NSString *)byteArrayToBlobLiteralWithByteArray:(IOSByteArray *)blob;

+ (NSString *)sanitizeStringAsLiteralWithNSString:(NSString *)literal;

+ (NSString *)toSanitizedStringWithId:(id)value
           withSquiDBArgumentResolver:(id<SquiDBArgumentResolver>)argResolver;

@end

J2OBJC_STATIC_INIT(SquiDBSqlUtils)

FOUNDATION_EXPORT jboolean SquiDBSqlUtils_isEmptyWithNSString_(NSString *str);

FOUNDATION_EXPORT jboolean SquiDBSqlUtils_equalsWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT id SquiDBSqlUtils_resolveArgReferencesWithId_(id arg);

FOUNDATION_EXPORT void SquiDBSqlUtils_addInlineCollectionToSqlStringWithJavaLangStringBuilder_withSquiDBArgumentResolver_withJavaUtilCollection_(JavaLangStringBuilder *sql, id<SquiDBArgumentResolver> argResolver, id<JavaUtilCollection> values);

FOUNDATION_EXPORT NSString *SquiDBSqlUtils_toSanitizedStringWithId_withSquiDBArgumentResolver_(id value, id<SquiDBArgumentResolver> argResolver);

FOUNDATION_EXPORT NSString *SquiDBSqlUtils_byteArrayToBlobLiteralWithByteArray_(IOSByteArray *blob);

FOUNDATION_EXPORT NSString *SquiDBSqlUtils_sanitizeStringAsLiteralWithNSString_(NSString *literal);

FOUNDATION_EXPORT NSString *SquiDBSqlUtils_escapeLikePatternWithNSString_withChar_(NSString *pattern, jchar escape);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSqlUtils)

@compatibility_alias ComYahooSquidbSqlSqlUtils SquiDBSqlUtils;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SqlUtils_H
