//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Criterion.java
//

#ifndef Criterion_H
#define Criterion_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "CompilableWithArguments.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class SquiDBOperator;
@class SquiDBQuery;
@class SquiDBSqlBuilder;
@protocol JavaUtilList;

@interface SquiDBCriterion : SquiDBCompilableWithArguments {
 @public
  SquiDBOperator *operator__;
}

#pragma mark Public

- (instancetype __nonnull)initWithSquiDBOperator:(SquiDBOperator *)operator_;

- (SquiDBCriterion *)and__WithSquiDBCriterion:(SquiDBCriterion *)criterion;

+ (SquiDBCriterion *)and__WithSquiDBCriterion:(SquiDBCriterion *)criterion
                     withSquiDBCriterionArray:(IOSObjectArray *)criterions;

+ (SquiDBCriterion *)and__WithJavaUtilList:(id<JavaUtilList>)criterions;

- (jboolean)isEqual:(id)o;

+ (SquiDBCriterion *)existsWithSquiDBQuery:(SquiDBQuery *)query;

+ (SquiDBCriterion *)fromRawSelectionWithNSString:(NSString *)selection
                                withNSStringArray:(IOSObjectArray *)selectionArgs;

- (NSUInteger)hash;

+ (SquiDBCriterion *)literalWithId:(id)value;

- (SquiDBCriterion *)negate;

+ (SquiDBCriterion *)not__WithSquiDBCriterion:(SquiDBCriterion *)criterion;

- (SquiDBCriterion *)or__WithSquiDBCriterion:(SquiDBCriterion *)criterion;

+ (SquiDBCriterion *)or__WithSquiDBCriterion:(SquiDBCriterion *)criterion
                    withSquiDBCriterionArray:(IOSObjectArray *)criterions;

+ (SquiDBCriterion *)or__WithJavaUtilList:(id<JavaUtilList>)criterions;

#pragma mark Protected

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation;

#pragma mark Package-Private

- (void)appendToSqlBuilderWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                   withBoolean:(jboolean)forSqlValidation;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBCriterion)

J2OBJC_FIELD_SETTER(SquiDBCriterion, operator__, SquiDBOperator *)

FOUNDATION_EXPORT void SquiDBCriterion_initWithSquiDBOperator_(SquiDBCriterion *self, SquiDBOperator *operator_);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_and__WithSquiDBCriterion_withSquiDBCriterionArray_(SquiDBCriterion *criterion, IOSObjectArray *criterions);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_and__WithJavaUtilList_(id<JavaUtilList> criterions);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_or__WithSquiDBCriterion_withSquiDBCriterionArray_(SquiDBCriterion *criterion, IOSObjectArray *criterions);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_or__WithJavaUtilList_(id<JavaUtilList> criterions);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_not__WithSquiDBCriterion_(SquiDBCriterion *criterion);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_existsWithSquiDBQuery_(SquiDBQuery *query);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_fromRawSelectionWithNSString_withNSStringArray_(NSString *selection, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT SquiDBCriterion *SquiDBCriterion_literalWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBCriterion)

@compatibility_alias ComYahooSquidbSqlCriterion SquiDBCriterion;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Criterion_H
