//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/MathOperator.java
//

#ifndef MathOperator_H
#define MathOperator_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, SquiDBMathOperator_Enum) {
  SquiDBMathOperator_Enum_PLUS = 0,
  SquiDBMathOperator_Enum_MINUS = 1,
  SquiDBMathOperator_Enum_MULT = 2,
  SquiDBMathOperator_Enum_DIVIDE = 3,
  SquiDBMathOperator_Enum_MODULO = 4,
  SquiDBMathOperator_Enum_BITWISE_AND = 5,
  SquiDBMathOperator_Enum_BITWISE_OR = 6,
};

@interface SquiDBMathOperator : JavaLangEnum

@property (readonly, class, nonnull) SquiDBMathOperator *PLUS NS_SWIFT_NAME(PLUS);
@property (readonly, class, nonnull) SquiDBMathOperator *MINUS NS_SWIFT_NAME(MINUS);
@property (readonly, class, nonnull) SquiDBMathOperator *MULT NS_SWIFT_NAME(MULT);
@property (readonly, class, nonnull) SquiDBMathOperator *DIVIDE NS_SWIFT_NAME(DIVIDE);
@property (readonly, class, nonnull) SquiDBMathOperator *MODULO NS_SWIFT_NAME(MODULO);
@property (readonly, class, nonnull) SquiDBMathOperator *BITWISE_AND NS_SWIFT_NAME(BITWISE_AND);
@property (readonly, class, nonnull) SquiDBMathOperator *BITWISE_OR NS_SWIFT_NAME(BITWISE_OR);
+ (SquiDBMathOperator * __nonnull)PLUS;

+ (SquiDBMathOperator * __nonnull)MINUS;

+ (SquiDBMathOperator * __nonnull)MULT;

+ (SquiDBMathOperator * __nonnull)DIVIDE;

+ (SquiDBMathOperator * __nonnull)MODULO;

+ (SquiDBMathOperator * __nonnull)BITWISE_AND;

+ (SquiDBMathOperator * __nonnull)BITWISE_OR;

#pragma mark Public

- (NSString *)description;

+ (SquiDBMathOperator *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (SquiDBMathOperator_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBMathOperator)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBMathOperator *SquiDBMathOperator_values_[];

inline SquiDBMathOperator *SquiDBMathOperator_get_PLUS(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, PLUS)

inline SquiDBMathOperator *SquiDBMathOperator_get_MINUS(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, MINUS)

inline SquiDBMathOperator *SquiDBMathOperator_get_MULT(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, MULT)

inline SquiDBMathOperator *SquiDBMathOperator_get_DIVIDE(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, DIVIDE)

inline SquiDBMathOperator *SquiDBMathOperator_get_MODULO(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, MODULO)

inline SquiDBMathOperator *SquiDBMathOperator_get_BITWISE_AND(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, BITWISE_AND)

inline SquiDBMathOperator *SquiDBMathOperator_get_BITWISE_OR(void);
J2OBJC_ENUM_CONSTANT(SquiDBMathOperator, BITWISE_OR)

FOUNDATION_EXPORT IOSObjectArray *SquiDBMathOperator_values(void);

FOUNDATION_EXPORT SquiDBMathOperator *SquiDBMathOperator_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBMathOperator *SquiDBMathOperator_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBMathOperator)

@compatibility_alias ComYahooSquidbSqlMathOperator SquiDBMathOperator;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // MathOperator_H
