//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Field.java
//

#ifndef Field_H
#define Field_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "DBObject.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class SquiDBCriterion;
@class SquiDBOrder;
@class SquiDBQuery;
@protocol JavaUtilCollection;

@interface SquiDBField : SquiDBDBObject
@property (readonly, class) SquiDBField *NULL_ NS_SWIFT_NAME(NULL_);

+ (SquiDBField *)NULL_;

#pragma mark Public

- (SquiDBOrder *)asc;

- (SquiDBCriterion *)asCriterion;

- (SquiDBField *)asWithNSString:(NSString *)arg0;

- (SquiDBCriterion *)betweenWithId:(id)lower
                            withId:(id)upper;

- (SquiDBOrder *)byArrayWithNSObjectArray:(IOSObjectArray *)order;

- (SquiDBOrder *)desc;

- (SquiDBCriterion *)eqWithId:(id)value;

- (SquiDBCriterion *)eqCaseInsensitiveWithNSString:(NSString *)value;

+ (SquiDBField *)fieldWithNSString:(NSString *)expression;

+ (SquiDBField *)fieldWithNSString:(NSString *)expression
                      withNSString:(NSString *)qualifier;

- (SquiDBCriterion *)globWithId:(id)value;

- (SquiDBCriterion *)gtWithId:(id)value;

- (SquiDBCriterion *)gteWithId:(id)value;

- (SquiDBCriterion *)inWithJavaUtilCollection:(id<JavaUtilCollection>)values;

- (SquiDBCriterion *)inWithNSObjectArray:(IOSObjectArray *)values;

- (SquiDBCriterion *)inWithSquiDBQuery:(SquiDBQuery *)query;

- (SquiDBCriterion *)isWithId:(id)value;

- (SquiDBCriterion *)isNotWithId:(id)value;

- (SquiDBCriterion *)isNotNull;

- (SquiDBCriterion *)isNull;

- (SquiDBCriterion *)likeWithId:(id)value;

- (SquiDBCriterion *)likeWithId:(id)pattern
                       withChar:(jchar)escape;

- (SquiDBCriterion *)ltWithId:(id)value;

- (SquiDBCriterion *)lteWithId:(id)value;

- (SquiDBCriterion *)neqWithId:(id)value;

- (SquiDBCriterion *)notBetweenWithId:(id)lower
                               withId:(id)upper;

- (SquiDBCriterion *)notGlobWithId:(id)value;

- (SquiDBCriterion *)notInWithJavaUtilCollection:(id<JavaUtilCollection>)values;

- (SquiDBCriterion *)notInWithNSObjectArray:(IOSObjectArray *)values;

- (SquiDBCriterion *)notInWithSquiDBQuery:(SquiDBQuery *)query;

- (SquiDBCriterion *)notLikeWithId:(id)value;

- (SquiDBCriterion *)notLikeWithId:(id)pattern
                          withChar:(jchar)escape;

#pragma mark Protected

- (instancetype __nonnull)initWithNSString:(NSString *)expression;

- (instancetype __nonnull)initWithNSString:(NSString *)expression
                              withNSString:(NSString *)qualifier;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initPackagePrivateWithNSString:(NSString *)arg0
                                            withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(SquiDBField)

inline SquiDBField *SquiDBField_get_NULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT SquiDBField *SquiDBField_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBField, NULL, SquiDBField *)

FOUNDATION_EXPORT void SquiDBField_initWithNSString_(SquiDBField *self, NSString *expression);

FOUNDATION_EXPORT SquiDBField *new_SquiDBField_initWithNSString_(NSString *expression) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBField *create_SquiDBField_initWithNSString_(NSString *expression);

FOUNDATION_EXPORT void SquiDBField_initWithNSString_withNSString_(SquiDBField *self, NSString *expression, NSString *qualifier);

FOUNDATION_EXPORT SquiDBField *new_SquiDBField_initWithNSString_withNSString_(NSString *expression, NSString *qualifier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBField *create_SquiDBField_initWithNSString_withNSString_(NSString *expression, NSString *qualifier);

FOUNDATION_EXPORT SquiDBField *SquiDBField_fieldWithNSString_(NSString *expression);

FOUNDATION_EXPORT SquiDBField *SquiDBField_fieldWithNSString_withNSString_(NSString *expression, NSString *qualifier);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBField)

@compatibility_alias ComYahooSquidbSqlField SquiDBField;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Field_H
