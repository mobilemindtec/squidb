//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Trigger.java
//

#include "CompileContext.h"
#include "CompiledStatement.h"
#include "Criterion.h"
#include "DBObject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Property.h"
#include "SqlBuilder.h"
#include "SqlStatement.h"
#include "SqlTable.h"
#include "SquidUtilities.h"
#include "Table.h"
#include "TableModel.h"
#include "TableStatement.h"
#include "Trigger.h"
#include "VersionCode.h"
#include "View.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@class SquiDBTrigger_TriggerEvent;
@class SquiDBTrigger_TriggerType;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface SquiDBTrigger () {
 @public
  SquiDBSqlTable *table_;
  SquiDBTrigger_TriggerType *triggerType_;
  SquiDBTrigger_TriggerEvent *triggerEvent_;
  jboolean isTemp_;
  id<JavaUtilList> columns_;
  id<JavaUtilList> criterions_;
  id<JavaUtilList> statements_;
}

- (SquiDBTrigger *)deleteOnTableWithSquiDBSqlTable:(SquiDBSqlTable *)table;

- (SquiDBTrigger *)insertOnTableWithSquiDBSqlTable:(SquiDBSqlTable *)table;

- (SquiDBTrigger *)updateOnTableWithSquiDBSqlTable:(SquiDBSqlTable *)table
                           withSquiDBPropertyArray:(IOSObjectArray *)columns;

- (void)assertNoTriggerEvent;

- (void)assertTriggerEvent;

- (void)assertStatements;

- (void)visitCreateTriggerWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (void)visitTriggerTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (void)visitTriggerEventWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (void)visitWhenWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                          withBoolean:(jboolean)forSqlValidation;

- (void)visitStatementsWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder;

@end

J2OBJC_FIELD_SETTER(SquiDBTrigger, table_, SquiDBSqlTable *)
J2OBJC_FIELD_SETTER(SquiDBTrigger, triggerType_, SquiDBTrigger_TriggerType *)
J2OBJC_FIELD_SETTER(SquiDBTrigger, triggerEvent_, SquiDBTrigger_TriggerEvent *)
J2OBJC_FIELD_SETTER(SquiDBTrigger, columns_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(SquiDBTrigger, criterions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(SquiDBTrigger, statements_, id<JavaUtilList>)

inline SquiDBTable *SquiDBTrigger_get_OLD(void);
static SquiDBTable *SquiDBTrigger_OLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBTrigger, OLD, SquiDBTable *)

inline SquiDBTable *SquiDBTrigger_get_NEW(void);
static SquiDBTable *SquiDBTrigger_NEW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBTrigger, NEW, SquiDBTable *)

__attribute__((unused)) static SquiDBTrigger *SquiDBTrigger_deleteOnTableWithSquiDBSqlTable_(SquiDBTrigger *self, SquiDBSqlTable *table);

__attribute__((unused)) static SquiDBTrigger *SquiDBTrigger_insertOnTableWithSquiDBSqlTable_(SquiDBTrigger *self, SquiDBSqlTable *table);

__attribute__((unused)) static SquiDBTrigger *SquiDBTrigger_updateOnTableWithSquiDBSqlTable_withSquiDBPropertyArray_(SquiDBTrigger *self, SquiDBSqlTable *table, IOSObjectArray *columns);

__attribute__((unused)) static void SquiDBTrigger_assertNoTriggerEvent(SquiDBTrigger *self);

__attribute__((unused)) static void SquiDBTrigger_assertTriggerEvent(SquiDBTrigger *self);

__attribute__((unused)) static void SquiDBTrigger_assertStatements(SquiDBTrigger *self);

__attribute__((unused)) static void SquiDBTrigger_visitCreateTriggerWithJavaLangStringBuilder_(SquiDBTrigger *self, JavaLangStringBuilder *sql);

__attribute__((unused)) static void SquiDBTrigger_visitTriggerTypeWithJavaLangStringBuilder_(SquiDBTrigger *self, JavaLangStringBuilder *sql);

__attribute__((unused)) static void SquiDBTrigger_visitTriggerEventWithJavaLangStringBuilder_(SquiDBTrigger *self, JavaLangStringBuilder *sql);

__attribute__((unused)) static void SquiDBTrigger_visitWhenWithSquiDBSqlBuilder_withBoolean_(SquiDBTrigger *self, SquiDBSqlBuilder *builder, jboolean forSqlValidation);

__attribute__((unused)) static void SquiDBTrigger_visitStatementsWithSquiDBSqlBuilder_(SquiDBTrigger *self, SquiDBSqlBuilder *builder);

__attribute__((unused)) static IOSObjectArray *SquiDBTrigger__Annotations$0(void);

typedef NS_ENUM(NSUInteger, SquiDBTrigger_TriggerType_Enum) {
  SquiDBTrigger_TriggerType_Enum_BEFORE = 0,
  SquiDBTrigger_TriggerType_Enum_AFTER = 1,
  SquiDBTrigger_TriggerType_Enum_INSTEAD = 2,
};

@interface SquiDBTrigger_TriggerType : JavaLangEnum {
 @public
  NSString *name_TriggerType_;
}

@property (readonly, class, nonnull) SquiDBTrigger_TriggerType *BEFORE NS_SWIFT_NAME(BEFORE);
@property (readonly, class, nonnull) SquiDBTrigger_TriggerType *AFTER NS_SWIFT_NAME(AFTER);
@property (readonly, class, nonnull) SquiDBTrigger_TriggerType *INSTEAD NS_SWIFT_NAME(INSTEAD);
+ (IOSObjectArray *)values;

+ (SquiDBTrigger_TriggerType *)valueOfWithNSString:(NSString *)name;

- (SquiDBTrigger_TriggerType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBTrigger_TriggerType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_values_[];

inline SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_get_BEFORE(void);
J2OBJC_ENUM_CONSTANT(SquiDBTrigger_TriggerType, BEFORE)

inline SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_get_AFTER(void);
J2OBJC_ENUM_CONSTANT(SquiDBTrigger_TriggerType, AFTER)

inline SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_get_INSTEAD(void);
J2OBJC_ENUM_CONSTANT(SquiDBTrigger_TriggerType, INSTEAD)

J2OBJC_FIELD_SETTER(SquiDBTrigger_TriggerType, name_TriggerType_, NSString *)

__attribute__((unused)) static void SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(SquiDBTrigger_TriggerType *self, NSString *name, NSString *__name, jint __ordinal);

__attribute__((unused)) static SquiDBTrigger_TriggerType *new_SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(NSString *name, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *SquiDBTrigger_TriggerType_values(void);

__attribute__((unused)) static SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTrigger_TriggerType)

typedef NS_ENUM(NSUInteger, SquiDBTrigger_TriggerEvent_Enum) {
  SquiDBTrigger_TriggerEvent_Enum_DELETE = 0,
  SquiDBTrigger_TriggerEvent_Enum_INSERT = 1,
  SquiDBTrigger_TriggerEvent_Enum_UPDATE = 2,
};

@interface SquiDBTrigger_TriggerEvent : JavaLangEnum

@property (readonly, class, nonnull) SquiDBTrigger_TriggerEvent *DELETE NS_SWIFT_NAME(DELETE);
@property (readonly, class, nonnull) SquiDBTrigger_TriggerEvent *INSERT NS_SWIFT_NAME(INSERT);
@property (readonly, class, nonnull) SquiDBTrigger_TriggerEvent *UPDATE NS_SWIFT_NAME(UPDATE);
+ (IOSObjectArray *)values;

+ (SquiDBTrigger_TriggerEvent *)valueOfWithNSString:(NSString *)name;

- (SquiDBTrigger_TriggerEvent_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBTrigger_TriggerEvent)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_values_[];

inline SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_get_DELETE(void);
J2OBJC_ENUM_CONSTANT(SquiDBTrigger_TriggerEvent, DELETE)

inline SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_get_INSERT(void);
J2OBJC_ENUM_CONSTANT(SquiDBTrigger_TriggerEvent, INSERT)

inline SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_get_UPDATE(void);
J2OBJC_ENUM_CONSTANT(SquiDBTrigger_TriggerEvent, UPDATE)

__attribute__((unused)) static void SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(SquiDBTrigger_TriggerEvent *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static SquiDBTrigger_TriggerEvent *new_SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *SquiDBTrigger_TriggerEvent_values(void);

__attribute__((unused)) static SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTrigger_TriggerEvent)

J2OBJC_INITIALIZED_DEFN(SquiDBTrigger)

@implementation SquiDBTrigger

- (instancetype)initWithNSString:(NSString *)name
   withSquiDBTrigger_TriggerType:(SquiDBTrigger_TriggerType *)triggerType {
  SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(self, name, triggerType);
  return self;
}

+ (SquiDBTrigger *)beforeWithNSString:(NSString *)name {
  return SquiDBTrigger_beforeWithNSString_(name);
}

+ (SquiDBTrigger *)afterWithNSString:(NSString *)name {
  return SquiDBTrigger_afterWithNSString_(name);
}

+ (SquiDBTrigger *)insteadOfWithNSString:(NSString *)name {
  return SquiDBTrigger_insteadOfWithNSString_(name);
}

+ (SquiDBTrigger *)tempBeforeWithNSString:(NSString *)name {
  return SquiDBTrigger_tempBeforeWithNSString_(name);
}

+ (SquiDBTrigger *)tempAfterWithNSString:(NSString *)name {
  return SquiDBTrigger_tempAfterWithNSString_(name);
}

+ (SquiDBTrigger *)tempInsteadOfWithNSString:(NSString *)name {
  return SquiDBTrigger_tempInsteadOfWithNSString_(name);
}

- (SquiDBTrigger *)deleteOnWithSquiDBTable:(SquiDBTable *)table {
  return SquiDBTrigger_deleteOnTableWithSquiDBSqlTable_(self, table);
}

- (SquiDBTrigger *)deleteOnWithSquiDBView:(SquiDBView *)view {
  SquiDBTrigger *result = SquiDBTrigger_deleteOnTableWithSquiDBSqlTable_(self, view);
  ((SquiDBTrigger *) nil_chk(result))->triggerType_ = JreLoadEnum(SquiDBTrigger_TriggerType, INSTEAD);
  return result;
}

- (SquiDBTrigger *)deleteOnTableWithSquiDBSqlTable:(SquiDBSqlTable *)table {
  return SquiDBTrigger_deleteOnTableWithSquiDBSqlTable_(self, table);
}

- (SquiDBTrigger *)insertOnWithSquiDBTable:(SquiDBTable *)table {
  return SquiDBTrigger_insertOnTableWithSquiDBSqlTable_(self, table);
}

- (SquiDBTrigger *)insertOnWithSquiDBView:(SquiDBView *)view {
  SquiDBTrigger *result = SquiDBTrigger_insertOnTableWithSquiDBSqlTable_(self, view);
  ((SquiDBTrigger *) nil_chk(result))->triggerType_ = JreLoadEnum(SquiDBTrigger_TriggerType, INSTEAD);
  return result;
}

- (SquiDBTrigger *)insertOnTableWithSquiDBSqlTable:(SquiDBSqlTable *)table {
  return SquiDBTrigger_insertOnTableWithSquiDBSqlTable_(self, table);
}

- (SquiDBTrigger *)updateOnWithSquiDBTable:(SquiDBTable *)table
                   withSquiDBPropertyArray:(IOSObjectArray *)columns {
  return SquiDBTrigger_updateOnTableWithSquiDBSqlTable_withSquiDBPropertyArray_(self, table, columns);
}

- (SquiDBTrigger *)updateOnWithSquiDBView:(SquiDBView *)view
                  withSquiDBPropertyArray:(IOSObjectArray *)columns {
  SquiDBTrigger *result = SquiDBTrigger_updateOnTableWithSquiDBSqlTable_withSquiDBPropertyArray_(self, view, columns);
  ((SquiDBTrigger *) nil_chk(result))->triggerType_ = JreLoadEnum(SquiDBTrigger_TriggerType, INSTEAD);
  return result;
}

- (SquiDBTrigger *)updateOnTableWithSquiDBSqlTable:(SquiDBSqlTable *)table
                           withSquiDBPropertyArray:(IOSObjectArray *)columns {
  return SquiDBTrigger_updateOnTableWithSquiDBSqlTable_withSquiDBPropertyArray_(self, table, columns);
}

- (void)assertNoTriggerEvent {
  SquiDBTrigger_assertNoTriggerEvent(self);
}

- (SquiDBTrigger *)whenWithSquiDBCriterion:(SquiDBCriterion *)criterion {
  if (criterion != nil) {
    [((id<JavaUtilList>) nil_chk(criterions_)) addWithId:criterion];
  }
  return self;
}

- (SquiDBTrigger *)performWithSquiDBTableStatementArray:(IOSObjectArray *)statements {
  JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(self->statements_, statements);
  return self;
}

+ (SquiDBProperty *)oldValueOfWithSquiDBProperty:(SquiDBProperty *)property {
  return SquiDBTrigger_oldValueOfWithSquiDBProperty_(property);
}

+ (SquiDBProperty *)newValueOfWithSquiDBProperty:(SquiDBProperty *)property {
  return SquiDBTrigger_newValueOfWithSquiDBProperty_(property);
}

- (SquiDBCompiledStatement *)compileWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion {
  return [self compileWithSquiDBCompileContext:SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(sqliteVersion)];
}

- (SquiDBCompiledStatement *)compileWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext {
  return new_SquiDBCompiledStatement_initWithNSString_withNSObjectArray_withBoolean_([self toRawSqlWithSquiDBCompileContext:compileContext], JreLoadStatic(SquiDBSqlStatement, EMPTY_ARGS), false);
}

- (void)appendToSqlBuilderWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                   withBoolean:(jboolean)forSqlValidation {
  SquiDBTrigger_assertTriggerEvent(self);
  SquiDBTrigger_assertStatements(self);
  SquiDBTrigger_visitCreateTriggerWithJavaLangStringBuilder_(self, ((SquiDBSqlBuilder *) nil_chk(builder))->sql_);
  SquiDBTrigger_visitTriggerTypeWithJavaLangStringBuilder_(self, builder->sql_);
  SquiDBTrigger_visitTriggerEventWithJavaLangStringBuilder_(self, builder->sql_);
  SquiDBTrigger_visitWhenWithSquiDBSqlBuilder_withBoolean_(self, builder, forSqlValidation);
  SquiDBTrigger_visitStatementsWithSquiDBSqlBuilder_(self, builder);
}

- (void)assertTriggerEvent {
  SquiDBTrigger_assertTriggerEvent(self);
}

- (void)assertStatements {
  SquiDBTrigger_assertStatements(self);
}

- (void)visitCreateTriggerWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  SquiDBTrigger_visitCreateTriggerWithJavaLangStringBuilder_(self, sql);
}

- (void)visitTriggerTypeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  SquiDBTrigger_visitTriggerTypeWithJavaLangStringBuilder_(self, sql);
}

- (void)visitTriggerEventWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  SquiDBTrigger_visitTriggerEventWithJavaLangStringBuilder_(self, sql);
}

- (void)visitWhenWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                          withBoolean:(jboolean)forSqlValidation {
  SquiDBTrigger_visitWhenWithSquiDBSqlBuilder_withBoolean_(self, builder, forSqlValidation);
}

- (void)visitStatementsWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder {
  SquiDBTrigger_visitStatementsWithSquiDBSqlBuilder_(self, builder);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x9, 5, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x9, 6, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x9, 7, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x1, 14, 10, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x2, 15, 12, -1, 13, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x81, 16, 17, -1, 18, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x81, 16, 19, -1, 20, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x82, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger;", 0x81, 26, 27, -1, -1, -1, -1 },
    { NULL, "LSquiDBProperty;", 0x9, 28, 29, -1, 30, -1, -1 },
    { NULL, "LSquiDBProperty;", 0x9, 31, 29, -1, 30, -1, -1 },
    { NULL, "LSquiDBCompiledStatement;", 0x1, 32, 33, -1, -1, 34, -1 },
    { NULL, "LSquiDBCompiledStatement;", 0x1, 32, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withSquiDBTrigger_TriggerType:);
  methods[1].selector = @selector(beforeWithNSString:);
  methods[2].selector = @selector(afterWithNSString:);
  methods[3].selector = @selector(insteadOfWithNSString:);
  methods[4].selector = @selector(tempBeforeWithNSString:);
  methods[5].selector = @selector(tempAfterWithNSString:);
  methods[6].selector = @selector(tempInsteadOfWithNSString:);
  methods[7].selector = @selector(deleteOnWithSquiDBTable:);
  methods[8].selector = @selector(deleteOnWithSquiDBView:);
  methods[9].selector = @selector(deleteOnTableWithSquiDBSqlTable:);
  methods[10].selector = @selector(insertOnWithSquiDBTable:);
  methods[11].selector = @selector(insertOnWithSquiDBView:);
  methods[12].selector = @selector(insertOnTableWithSquiDBSqlTable:);
  methods[13].selector = @selector(updateOnWithSquiDBTable:withSquiDBPropertyArray:);
  methods[14].selector = @selector(updateOnWithSquiDBView:withSquiDBPropertyArray:);
  methods[15].selector = @selector(updateOnTableWithSquiDBSqlTable:withSquiDBPropertyArray:);
  methods[16].selector = @selector(assertNoTriggerEvent);
  methods[17].selector = @selector(whenWithSquiDBCriterion:);
  methods[18].selector = @selector(performWithSquiDBTableStatementArray:);
  methods[19].selector = @selector(oldValueOfWithSquiDBProperty:);
  methods[20].selector = @selector(newValueOfWithSquiDBProperty:);
  methods[21].selector = @selector(compileWithSquiDBVersionCode:);
  methods[22].selector = @selector(compileWithSquiDBCompileContext:);
  methods[23].selector = @selector(appendToSqlBuilderWithSquiDBSqlBuilder:withBoolean:);
  methods[24].selector = @selector(assertTriggerEvent);
  methods[25].selector = @selector(assertStatements);
  methods[26].selector = @selector(visitCreateTriggerWithJavaLangStringBuilder:);
  methods[27].selector = @selector(visitTriggerTypeWithJavaLangStringBuilder:);
  methods[28].selector = @selector(visitTriggerEventWithJavaLangStringBuilder:);
  methods[29].selector = @selector(visitWhenWithSquiDBSqlBuilder:withBoolean:);
  methods[30].selector = @selector(visitStatementsWithSquiDBSqlBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OLD", "LSquiDBTable;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "NEW", "LSquiDBTable;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "table_", "LSquiDBSqlTable;", .constantValue.asLong = 0, 0x2, -1, -1, 47, -1 },
    { "triggerType_", "LSquiDBTrigger_TriggerType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "triggerEvent_", "LSquiDBTrigger_TriggerEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isTemp_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "columns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "criterions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "statements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LSquiDBTrigger_TriggerType;", "before", "LNSString;", "after", "insteadOf", "tempBefore", "tempAfter", "tempInsteadOf", "deleteOn", "LSquiDBTable;", "LSquiDBView;", "deleteOnTable", "LSquiDBSqlTable;", "(Lcom/yahoo/squidb/sql/SqlTable<*>;)Lcom/yahoo/squidb/sql/Trigger;", "insertOn", "insertOnTable", "updateOn", "LSquiDBTable;[LSquiDBProperty;", "(Lcom/yahoo/squidb/sql/Table;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/sql/Trigger;", "LSquiDBView;[LSquiDBProperty;", "(Lcom/yahoo/squidb/sql/View;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/sql/Trigger;", "updateOnTable", "LSquiDBSqlTable;[LSquiDBProperty;", "(Lcom/yahoo/squidb/sql/SqlTable<*>;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/sql/Trigger;", "when", "LSquiDBCriterion;", "perform", "[LSquiDBTableStatement;", "oldValueOf", "LSquiDBProperty;", "<T:Lcom/yahoo/squidb/sql/Property<*>;>(TT;)TT;", "newValueOf", "compile", "LSquiDBVersionCode;", (void *)&SquiDBTrigger__Annotations$0, "LSquiDBCompileContext;", "appendToSqlBuilder", "LSquiDBSqlBuilder;Z", "visitCreateTrigger", "LJavaLangStringBuilder;", "visitTriggerType", "visitTriggerEvent", "visitWhen", "visitStatements", "LSquiDBSqlBuilder;", &SquiDBTrigger_OLD, &SquiDBTrigger_NEW, "Lcom/yahoo/squidb/sql/SqlTable<*>;", "Ljava/util/List<Lcom/yahoo/squidb/sql/Property<*>;>;", "Ljava/util/List<Lcom/yahoo/squidb/sql/Criterion;>;", "Ljava/util/List<Lcom/yahoo/squidb/sql/TableStatement;>;", "LSquiDBTrigger_TriggerType;LSquiDBTrigger_TriggerEvent;", "Lcom/yahoo/squidb/sql/DBObject<Lcom/yahoo/squidb/sql/Trigger;>;Lcom/yahoo/squidb/sql/SqlStatement;" };
  static const J2ObjcClassInfo _SquiDBTrigger = { "Trigger", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x1, 31, 9, -1, 51, -1, 52, -1 };
  return &_SquiDBTrigger;
}

+ (void)initialize {
  if (self == [SquiDBTrigger class]) {
    SquiDBTrigger_OLD = new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_(SquiDBTableModel_class_(), nil, @"OLD");
    SquiDBTrigger_NEW = new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_(SquiDBTableModel_class_(), nil, @"NEW");
    J2OBJC_SET_INITIALIZED(SquiDBTrigger)
  }
}

@end

void SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(SquiDBTrigger *self, NSString *name, SquiDBTrigger_TriggerType *triggerType) {
  SquiDBDBObject_initPackagePrivateWithNSString_(self, name);
  self->columns_ = new_JavaUtilArrayList_init();
  self->criterions_ = new_JavaUtilArrayList_init();
  self->statements_ = new_JavaUtilArrayList_init();
  self->triggerType_ = triggerType;
}

SquiDBTrigger *new_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(NSString *name, SquiDBTrigger_TriggerType *triggerType) {
  J2OBJC_NEW_IMPL(SquiDBTrigger, initWithNSString_withSquiDBTrigger_TriggerType_, name, triggerType)
}

SquiDBTrigger *create_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(NSString *name, SquiDBTrigger_TriggerType *triggerType) {
  J2OBJC_CREATE_IMPL(SquiDBTrigger, initWithNSString_withSquiDBTrigger_TriggerType_, name, triggerType)
}

SquiDBTrigger *SquiDBTrigger_beforeWithNSString_(NSString *name) {
  SquiDBTrigger_initialize();
  return new_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(name, JreLoadEnum(SquiDBTrigger_TriggerType, BEFORE));
}

SquiDBTrigger *SquiDBTrigger_afterWithNSString_(NSString *name) {
  SquiDBTrigger_initialize();
  return new_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(name, JreLoadEnum(SquiDBTrigger_TriggerType, AFTER));
}

SquiDBTrigger *SquiDBTrigger_insteadOfWithNSString_(NSString *name) {
  SquiDBTrigger_initialize();
  return new_SquiDBTrigger_initWithNSString_withSquiDBTrigger_TriggerType_(name, JreLoadEnum(SquiDBTrigger_TriggerType, INSTEAD));
}

SquiDBTrigger *SquiDBTrigger_tempBeforeWithNSString_(NSString *name) {
  SquiDBTrigger_initialize();
  SquiDBTrigger *trigger = SquiDBTrigger_beforeWithNSString_(name);
  ((SquiDBTrigger *) nil_chk(trigger))->isTemp_ = true;
  return trigger;
}

SquiDBTrigger *SquiDBTrigger_tempAfterWithNSString_(NSString *name) {
  SquiDBTrigger_initialize();
  SquiDBTrigger *trigger = SquiDBTrigger_afterWithNSString_(name);
  ((SquiDBTrigger *) nil_chk(trigger))->isTemp_ = true;
  return trigger;
}

SquiDBTrigger *SquiDBTrigger_tempInsteadOfWithNSString_(NSString *name) {
  SquiDBTrigger_initialize();
  SquiDBTrigger *trigger = SquiDBTrigger_insteadOfWithNSString_(name);
  ((SquiDBTrigger *) nil_chk(trigger))->isTemp_ = true;
  return trigger;
}

SquiDBTrigger *SquiDBTrigger_deleteOnTableWithSquiDBSqlTable_(SquiDBTrigger *self, SquiDBSqlTable *table) {
  SquiDBTrigger_assertNoTriggerEvent(self);
  self->table_ = table;
  self->triggerEvent_ = JreLoadEnum(SquiDBTrigger_TriggerEvent, DELETE);
  return self;
}

SquiDBTrigger *SquiDBTrigger_insertOnTableWithSquiDBSqlTable_(SquiDBTrigger *self, SquiDBSqlTable *table) {
  SquiDBTrigger_assertNoTriggerEvent(self);
  self->table_ = table;
  self->triggerEvent_ = JreLoadEnum(SquiDBTrigger_TriggerEvent, INSERT);
  return self;
}

SquiDBTrigger *SquiDBTrigger_updateOnTableWithSquiDBSqlTable_withSquiDBPropertyArray_(SquiDBTrigger *self, SquiDBSqlTable *table, IOSObjectArray *columns) {
  SquiDBTrigger_assertNoTriggerEvent(self);
  self->table_ = table;
  self->triggerEvent_ = JreLoadEnum(SquiDBTrigger_TriggerEvent, UPDATE);
  SquiDBSquidUtilities_addAllWithJavaUtilCollection_withNSObjectArray_(self->columns_, columns);
  return self;
}

void SquiDBTrigger_assertNoTriggerEvent(SquiDBTrigger *self) {
  if (self->triggerEvent_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Trigger event already specified for this trigger.");
  }
}

SquiDBProperty *SquiDBTrigger_oldValueOfWithSquiDBProperty_(SquiDBProperty *property) {
  SquiDBTrigger_initialize();
  return [((SquiDBProperty *) nil_chk(property)) asWithSquiDBSqlTable:SquiDBTrigger_OLD withNSString:[property getExpression]];
}

SquiDBProperty *SquiDBTrigger_newValueOfWithSquiDBProperty_(SquiDBProperty *property) {
  SquiDBTrigger_initialize();
  return [((SquiDBProperty *) nil_chk(property)) asWithSquiDBSqlTable:SquiDBTrigger_NEW withNSString:[property getExpression]];
}

void SquiDBTrigger_assertTriggerEvent(SquiDBTrigger *self) {
  if (self->triggerEvent_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No trigger event (ON DELETE, ON INSERT, or ON UPDATE) specified for this trigger.");
  }
}

void SquiDBTrigger_assertStatements(SquiDBTrigger *self) {
  if ([((id<JavaUtilList>) nil_chk(self->statements_)) isEmpty]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No statements specified for this trigger.");
  }
}

void SquiDBTrigger_visitCreateTriggerWithJavaLangStringBuilder_(SquiDBTrigger *self, JavaLangStringBuilder *sql) {
  (void) [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"CREATE "];
  if (self->isTemp_) {
    (void) [sql appendWithNSString:@"TEMP "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@"TRIGGER IF NOT EXISTS "])) appendWithNSString:[self getExpression]])) appendWithNSString:@" "];
}

void SquiDBTrigger_visitTriggerTypeWithJavaLangStringBuilder_(SquiDBTrigger *self, JavaLangStringBuilder *sql) {
  if (self->triggerType_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:self->triggerType_->name_TriggerType_])) appendWithNSString:@" "];
  }
}

void SquiDBTrigger_visitTriggerEventWithJavaLangStringBuilder_(SquiDBTrigger *self, JavaLangStringBuilder *sql) {
  (void) [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:[((SquiDBTrigger_TriggerEvent *) nil_chk(self->triggerEvent_)) name]];
  if (JreLoadEnum(SquiDBTrigger_TriggerEvent, UPDATE) == self->triggerEvent_ && ![((id<JavaUtilList>) nil_chk(self->columns_)) isEmpty]) {
    (void) [sql appendWithNSString:@" OF "];
    for (SquiDBProperty * __strong column in nil_chk(self->columns_)) {
      (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:[((SquiDBProperty *) nil_chk(column)) getExpression]])) appendWithNSString:@","];
    }
    (void) [sql deleteCharAtWithInt:[sql java_length] - 1];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@" ON "])) appendWithNSString:[((SquiDBSqlTable *) nil_chk(self->table_)) getExpression]])) appendWithNSString:@" "];
}

void SquiDBTrigger_visitWhenWithSquiDBSqlBuilder_withBoolean_(SquiDBTrigger *self, SquiDBSqlBuilder *builder, jboolean forSqlValidation) {
  if ([((id<JavaUtilList>) nil_chk(self->criterions_)) isEmpty]) {
    return;
  }
  (void) [((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@"WHEN "];
  [builder appendConcatenatedCompilablesWithJavaUtilList:self->criterions_ withNSString:@" AND " withBoolean:forSqlValidation];
  (void) [builder->sql_ appendWithNSString:@" "];
}

void SquiDBTrigger_visitStatementsWithSquiDBSqlBuilder_(SquiDBTrigger *self, SquiDBSqlBuilder *builder) {
  (void) [((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@"BEGIN "];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->statements_)) size]; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk([builder->sql_ appendWithNSString:[((SquiDBTableStatement *) nil_chk([self->statements_ getWithInt:i])) toRawSqlWithSquiDBCompileContext:builder->compileContext_]])) appendWithNSString:@"; "];
  }
  (void) [builder->sql_ appendWithNSString:@"END"];
}

IOSObjectArray *SquiDBTrigger__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTrigger)

J2OBJC_NAME_MAPPING(SquiDBTrigger, "com.yahoo.squidb.sql", "SquiDB")

J2OBJC_INITIALIZED_DEFN(SquiDBTrigger_TriggerType)

SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_values_[3];

@implementation SquiDBTrigger_TriggerType

+ (SquiDBTrigger_TriggerType *)BEFORE {
  return JreEnum(SquiDBTrigger_TriggerType, BEFORE);
}

+ (SquiDBTrigger_TriggerType *)AFTER {
  return JreEnum(SquiDBTrigger_TriggerType, AFTER);
}

+ (SquiDBTrigger_TriggerType *)INSTEAD {
  return JreEnum(SquiDBTrigger_TriggerType, INSTEAD);
}

+ (IOSObjectArray *)values {
  return SquiDBTrigger_TriggerType_values();
}

+ (SquiDBTrigger_TriggerType *)valueOfWithNSString:(NSString *)name {
  return SquiDBTrigger_TriggerType_valueOfWithNSString_(name);
}

- (SquiDBTrigger_TriggerType_Enum)toNSEnum {
  return (SquiDBTrigger_TriggerType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LSquiDBTrigger_TriggerType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger_TriggerType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BEFORE", "LSquiDBTrigger_TriggerType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "AFTER", "LSquiDBTrigger_TriggerType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "INSTEAD", "LSquiDBTrigger_TriggerType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "name_TriggerType_", "LNSString;", .constantValue.asLong = 0, 0x10, 5, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(SquiDBTrigger_TriggerType, BEFORE), &JreEnum(SquiDBTrigger_TriggerType, AFTER), &JreEnum(SquiDBTrigger_TriggerType, INSTEAD), "name", "LSquiDBTrigger;", "Ljava/lang/Enum<Lcom/yahoo/squidb/sql/Trigger$TriggerType;>;" };
  static const J2ObjcClassInfo _SquiDBTrigger_TriggerType = { "TriggerType", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_SquiDBTrigger_TriggerType;
}

+ (void)initialize {
  if (self == [SquiDBTrigger_TriggerType class]) {
    JreEnum(SquiDBTrigger_TriggerType, BEFORE) = new_SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(@"BEFORE", JreEnumConstantName(SquiDBTrigger_TriggerType_class_(), 0), 0);
    JreEnum(SquiDBTrigger_TriggerType, AFTER) = new_SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(@"AFTER", JreEnumConstantName(SquiDBTrigger_TriggerType_class_(), 1), 1);
    JreEnum(SquiDBTrigger_TriggerType, INSTEAD) = new_SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(@"INSTEAD OF", JreEnumConstantName(SquiDBTrigger_TriggerType_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(SquiDBTrigger_TriggerType)
  }
}

@end

void SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(SquiDBTrigger_TriggerType *self, NSString *name, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->name_TriggerType_ = name;
}

SquiDBTrigger_TriggerType *new_SquiDBTrigger_TriggerType_initWithNSString_withNSString_withInt_(NSString *name, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SquiDBTrigger_TriggerType, initWithNSString_withNSString_withInt_, name, __name, __ordinal)
}

IOSObjectArray *SquiDBTrigger_TriggerType_values() {
  SquiDBTrigger_TriggerType_initialize();
  return [IOSObjectArray arrayWithObjects:SquiDBTrigger_TriggerType_values_ count:3 type:SquiDBTrigger_TriggerType_class_()];
}

SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_valueOfWithNSString_(NSString *name) {
  SquiDBTrigger_TriggerType_initialize();
  for (int i = 0; i < 3; i++) {
    SquiDBTrigger_TriggerType *e = SquiDBTrigger_TriggerType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SquiDBTrigger_TriggerType *SquiDBTrigger_TriggerType_fromOrdinal(NSUInteger ordinal) {
  SquiDBTrigger_TriggerType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return SquiDBTrigger_TriggerType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTrigger_TriggerType)

J2OBJC_INITIALIZED_DEFN(SquiDBTrigger_TriggerEvent)

SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_values_[3];

@implementation SquiDBTrigger_TriggerEvent

+ (SquiDBTrigger_TriggerEvent *)DELETE {
  return JreEnum(SquiDBTrigger_TriggerEvent, DELETE);
}

+ (SquiDBTrigger_TriggerEvent *)INSERT {
  return JreEnum(SquiDBTrigger_TriggerEvent, INSERT);
}

+ (SquiDBTrigger_TriggerEvent *)UPDATE {
  return JreEnum(SquiDBTrigger_TriggerEvent, UPDATE);
}

+ (IOSObjectArray *)values {
  return SquiDBTrigger_TriggerEvent_values();
}

+ (SquiDBTrigger_TriggerEvent *)valueOfWithNSString:(NSString *)name {
  return SquiDBTrigger_TriggerEvent_valueOfWithNSString_(name);
}

- (SquiDBTrigger_TriggerEvent_Enum)toNSEnum {
  return (SquiDBTrigger_TriggerEvent_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LSquiDBTrigger_TriggerEvent;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBTrigger_TriggerEvent;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DELETE", "LSquiDBTrigger_TriggerEvent;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "INSERT", "LSquiDBTrigger_TriggerEvent;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "UPDATE", "LSquiDBTrigger_TriggerEvent;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(SquiDBTrigger_TriggerEvent, DELETE), &JreEnum(SquiDBTrigger_TriggerEvent, INSERT), &JreEnum(SquiDBTrigger_TriggerEvent, UPDATE), "LSquiDBTrigger;", "Ljava/lang/Enum<Lcom/yahoo/squidb/sql/Trigger$TriggerEvent;>;" };
  static const J2ObjcClassInfo _SquiDBTrigger_TriggerEvent = { "TriggerEvent", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_SquiDBTrigger_TriggerEvent;
}

+ (void)initialize {
  if (self == [SquiDBTrigger_TriggerEvent class]) {
    JreEnum(SquiDBTrigger_TriggerEvent, DELETE) = new_SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(JreEnumConstantName(SquiDBTrigger_TriggerEvent_class_(), 0), 0);
    JreEnum(SquiDBTrigger_TriggerEvent, INSERT) = new_SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(JreEnumConstantName(SquiDBTrigger_TriggerEvent_class_(), 1), 1);
    JreEnum(SquiDBTrigger_TriggerEvent, UPDATE) = new_SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(JreEnumConstantName(SquiDBTrigger_TriggerEvent_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(SquiDBTrigger_TriggerEvent)
  }
}

@end

void SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(SquiDBTrigger_TriggerEvent *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

SquiDBTrigger_TriggerEvent *new_SquiDBTrigger_TriggerEvent_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SquiDBTrigger_TriggerEvent, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *SquiDBTrigger_TriggerEvent_values() {
  SquiDBTrigger_TriggerEvent_initialize();
  return [IOSObjectArray arrayWithObjects:SquiDBTrigger_TriggerEvent_values_ count:3 type:SquiDBTrigger_TriggerEvent_class_()];
}

SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_valueOfWithNSString_(NSString *name) {
  SquiDBTrigger_TriggerEvent_initialize();
  for (int i = 0; i < 3; i++) {
    SquiDBTrigger_TriggerEvent *e = SquiDBTrigger_TriggerEvent_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SquiDBTrigger_TriggerEvent *SquiDBTrigger_TriggerEvent_fromOrdinal(NSUInteger ordinal) {
  SquiDBTrigger_TriggerEvent_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return SquiDBTrigger_TriggerEvent_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTrigger_TriggerEvent)
