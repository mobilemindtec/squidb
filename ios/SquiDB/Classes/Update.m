//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Update.java
//

#include "AbstractModel.h"
#include "Criterion.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Property.h"
#include "SqlBuilder.h"
#include "SqlTable.h"
#include "Table.h"
#include "TableStatement.h"
#include "Update.h"
#include "ValuesStorage.h"
#include "View.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComYahooSquidbSqlUpdate () {
 @public
  ComYahooSquidbSqlSqlTable *table_;
  ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm_;
  id<JavaUtilMap> valuesToUpdate_;
  id<JavaUtilList> criterions_;
}

- (void)assertValues;

- (void)visitConflictAlgorithmWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (void)visitWhereWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                      withBoolean:(jboolean)forSqlValidation;

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbSqlUpdate, table_, ComYahooSquidbSqlSqlTable *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlUpdate, conflictAlgorithm_, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlUpdate, valuesToUpdate_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlUpdate, criterions_, id<JavaUtilList>)

__attribute__((unused)) static void ComYahooSquidbSqlUpdate_assertValues(ComYahooSquidbSqlUpdate *self);

__attribute__((unused)) static void ComYahooSquidbSqlUpdate_visitConflictAlgorithmWithJavaLangStringBuilder_(ComYahooSquidbSqlUpdate *self, JavaLangStringBuilder *sql);

__attribute__((unused)) static void ComYahooSquidbSqlUpdate_visitWhereWithComYahooSquidbSqlSqlBuilder_withBoolean_(ComYahooSquidbSqlUpdate *self, ComYahooSquidbSqlSqlBuilder *builder, jboolean forSqlValidation);

@implementation ComYahooSquidbSqlUpdate

- (instancetype)initWithComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table {
  ComYahooSquidbSqlUpdate_initWithComYahooSquidbSqlSqlTable_(self, table);
  return self;
}

+ (ComYahooSquidbSqlUpdate *)tableWithComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table {
  return ComYahooSquidbSqlUpdate_tableWithComYahooSquidbSqlTable_(table);
}

+ (ComYahooSquidbSqlUpdate *)tableWithComYahooSquidbSqlView:(ComYahooSquidbSqlView *)view {
  return ComYahooSquidbSqlUpdate_tableWithComYahooSquidbSqlView_(view);
}

- (ComYahooSquidbSqlSqlTable *)getTable {
  return table_;
}

- (ComYahooSquidbSqlUpdate *)onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  self->conflictAlgorithm_ = conflictAlgorithm;
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlUpdate *)whereWithComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)criterion {
  if (criterion != nil) {
    [((id<JavaUtilList>) nil_chk(self->criterions_)) addWithId:criterion];
    [self invalidateCompileCache];
  }
  return self;
}

- (ComYahooSquidbSqlUpdate *)setWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)column
                                                       withId:(id)value {
  if (column == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"column must not be null");
  }
  (void) [((id<JavaUtilMap>) nil_chk(valuesToUpdate_)) putWithId:[column getExpression] withId:value];
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlUpdate *)setWithComYahooSquidbSqlPropertyArray:(IOSObjectArray *)columns
                                                 withNSObjectArray:(IOSObjectArray *)values {
  if (((IOSObjectArray *) nil_chk(columns))->size_ != ((IOSObjectArray *) nil_chk(values))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"You must provide the same number of columns and values");
  }
  for (jint i = 0; i < columns->size_; i++) {
    (void) [self setWithComYahooSquidbSqlProperty:IOSObjectArray_Get(columns, i) withId:IOSObjectArray_Get(values, i)];
  }
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlUpdate *)setWithJavaUtilList:(id<JavaUtilList>)columns
                                withJavaUtilList:(id<JavaUtilList>)values {
  jint size = [((id<JavaUtilList>) nil_chk(columns)) size];
  if (size != [((id<JavaUtilList>) nil_chk(values)) size]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"You must provide the same number of columns and values");
  }
  for (jint i = 0; i < size; i++) {
    (void) [self setWithComYahooSquidbSqlProperty:[columns getWithInt:i] withId:[values getWithInt:i]];
  }
  [self invalidateCompileCache];
  return self;
}

- (ComYahooSquidbSqlUpdate *)fromTemplateWithComYahooSquidbDataAbstractModel:(ComYahooSquidbDataAbstractModel *)template_ {
  if (![((ComYahooSquidbDataAbstractModel *) nil_chk(template_)) isModified]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Template has no values set to use for update");
  }
  ComYahooSquidbDataValuesStorage *setValues = [template_ getSetValues];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((ComYahooSquidbDataValuesStorage *) nil_chk(setValues)) valueSet])) {
    (void) [((id<JavaUtilMap>) nil_chk(valuesToUpdate_)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
  [self invalidateCompileCache];
  return self;
}

- (void)appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                              withBoolean:(jboolean)forSqlValidation {
  ComYahooSquidbSqlUpdate_assertValues(self);
  (void) [((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@"UPDATE "];
  ComYahooSquidbSqlUpdate_visitConflictAlgorithmWithJavaLangStringBuilder_(self, builder->sql_);
  (void) [((JavaLangStringBuilder *) nil_chk([builder->sql_ appendWithNSString:[((ComYahooSquidbSqlSqlTable *) nil_chk(table_)) getExpression]])) appendWithNSString:@" SET "];
  [self visitValuesWithComYahooSquidbSqlSqlBuilder:builder withBoolean:forSqlValidation];
  ComYahooSquidbSqlUpdate_visitWhereWithComYahooSquidbSqlSqlBuilder_withBoolean_(self, builder, forSqlValidation);
}

- (void)assertValues {
  ComYahooSquidbSqlUpdate_assertValues(self);
}

- (void)visitConflictAlgorithmWithJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  ComYahooSquidbSqlUpdate_visitConflictAlgorithmWithJavaLangStringBuilder_(self, sql);
}

- (void)visitValuesWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                       withBoolean:(jboolean)forSqlValidation {
  jboolean appendComma = false;
  for (NSString * __strong column in nil_chk([((id<JavaUtilMap>) nil_chk(valuesToUpdate_)) keySet])) {
    if (appendComma) {
      (void) [((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@","];
    }
    appendComma = true;
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:column])) appendWithNSString:@" = "];
    id value = [valuesToUpdate_ getWithId:column];
    [builder addValueToSqlWithId:value withBoolean:forSqlValidation];
  }
}

- (void)visitWhereWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder
                                      withBoolean:(jboolean)forSqlValidation {
  ComYahooSquidbSqlUpdate_visitWhereWithComYahooSquidbSqlSqlBuilder_withBoolean_(self, builder, forSqlValidation);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlSqlTable;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x1, 10, 13, -1, 14, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x1, 10, 15, -1, 16, -1, -1 },
    { NULL, "LComYahooSquidbSqlUpdate;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComYahooSquidbSqlSqlTable:);
  methods[1].selector = @selector(tableWithComYahooSquidbSqlTable:);
  methods[2].selector = @selector(tableWithComYahooSquidbSqlView:);
  methods[3].selector = @selector(getTable);
  methods[4].selector = @selector(onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[5].selector = @selector(whereWithComYahooSquidbSqlCriterion:);
  methods[6].selector = @selector(setWithComYahooSquidbSqlProperty:withId:);
  methods[7].selector = @selector(setWithComYahooSquidbSqlPropertyArray:withNSObjectArray:);
  methods[8].selector = @selector(setWithJavaUtilList:withJavaUtilList:);
  methods[9].selector = @selector(fromTemplateWithComYahooSquidbDataAbstractModel:);
  methods[10].selector = @selector(appendToSqlBuilderWithComYahooSquidbSqlSqlBuilder:withBoolean:);
  methods[11].selector = @selector(assertValues);
  methods[12].selector = @selector(visitConflictAlgorithmWithJavaLangStringBuilder:);
  methods[13].selector = @selector(visitValuesWithComYahooSquidbSqlSqlBuilder:withBoolean:);
  methods[14].selector = @selector(visitWhereWithComYahooSquidbSqlSqlBuilder:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "table_", "LComYahooSquidbSqlSqlTable;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "conflictAlgorithm_", "LComYahooSquidbSqlTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "valuesToUpdate_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "criterions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "LComYahooSquidbSqlSqlTable;", "(Lcom/yahoo/squidb/sql/SqlTable<*>;)V", "table", "LComYahooSquidbSqlTable;", "LComYahooSquidbSqlView;", "()Lcom/yahoo/squidb/sql/SqlTable<*>;", "onConflict", "LComYahooSquidbSqlTableStatement_ConflictAlgorithm;", "where", "LComYahooSquidbSqlCriterion;", "set", "LComYahooSquidbSqlProperty;LNSObject;", "(Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Update;", "[LComYahooSquidbSqlProperty;[LNSObject;", "([Lcom/yahoo/squidb/sql/Property<*>;[Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Update;", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Lcom/yahoo/squidb/sql/Property<*>;>;Ljava/util/List<Ljava/lang/Object;>;)Lcom/yahoo/squidb/sql/Update;", "fromTemplate", "LComYahooSquidbDataAbstractModel;", "appendToSqlBuilder", "LComYahooSquidbSqlSqlBuilder;Z", "visitConflictAlgorithm", "LJavaLangStringBuilder;", "visitValues", "visitWhere", "Lcom/yahoo/squidb/sql/SqlTable<*>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Lcom/yahoo/squidb/sql/Criterion;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbSqlUpdate = { "Update", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x1, 15, 4, -1, -1, -1, -1, -1 };
  return &_ComYahooSquidbSqlUpdate;
}

@end

void ComYahooSquidbSqlUpdate_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlUpdate *self, ComYahooSquidbSqlSqlTable *table) {
  ComYahooSquidbSqlTableStatement_init(self);
  self->conflictAlgorithm_ = JreLoadEnum(ComYahooSquidbSqlTableStatement_ConflictAlgorithm, NONE);
  self->valuesToUpdate_ = new_JavaUtilHashMap_init();
  self->criterions_ = new_JavaUtilArrayList_init();
  self->table_ = table;
}

ComYahooSquidbSqlUpdate *new_ComYahooSquidbSqlUpdate_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlSqlTable *table) {
  J2OBJC_NEW_IMPL(ComYahooSquidbSqlUpdate, initWithComYahooSquidbSqlSqlTable_, table)
}

ComYahooSquidbSqlUpdate *create_ComYahooSquidbSqlUpdate_initWithComYahooSquidbSqlSqlTable_(ComYahooSquidbSqlSqlTable *table) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbSqlUpdate, initWithComYahooSquidbSqlSqlTable_, table)
}

ComYahooSquidbSqlUpdate *ComYahooSquidbSqlUpdate_tableWithComYahooSquidbSqlTable_(ComYahooSquidbSqlTable *table) {
  ComYahooSquidbSqlUpdate_initialize();
  return new_ComYahooSquidbSqlUpdate_initWithComYahooSquidbSqlSqlTable_(table);
}

ComYahooSquidbSqlUpdate *ComYahooSquidbSqlUpdate_tableWithComYahooSquidbSqlView_(ComYahooSquidbSqlView *view) {
  ComYahooSquidbSqlUpdate_initialize();
  return new_ComYahooSquidbSqlUpdate_initWithComYahooSquidbSqlSqlTable_(view);
}

void ComYahooSquidbSqlUpdate_assertValues(ComYahooSquidbSqlUpdate *self) {
  if ([((id<JavaUtilMap>) nil_chk(self->valuesToUpdate_)) isEmpty]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No columns specified for update");
  }
}

void ComYahooSquidbSqlUpdate_visitConflictAlgorithmWithJavaLangStringBuilder_(ComYahooSquidbSqlUpdate *self, JavaLangStringBuilder *sql) {
  if (JreLoadEnum(ComYahooSquidbSqlTableStatement_ConflictAlgorithm, NONE) != self->conflictAlgorithm_) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"OR "])) appendWithId:self->conflictAlgorithm_])) appendWithNSString:@" "];
  }
}

void ComYahooSquidbSqlUpdate_visitWhereWithComYahooSquidbSqlSqlBuilder_withBoolean_(ComYahooSquidbSqlUpdate *self, ComYahooSquidbSqlSqlBuilder *builder, jboolean forSqlValidation) {
  if ([((id<JavaUtilList>) nil_chk(self->criterions_)) isEmpty]) {
    return;
  }
  (void) [((JavaLangStringBuilder *) nil_chk(((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@" WHERE "];
  [builder appendConcatenatedCompilablesWithJavaUtilList:self->criterions_ withNSString:@" AND " withBoolean:forSqlValidation];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlUpdate)
