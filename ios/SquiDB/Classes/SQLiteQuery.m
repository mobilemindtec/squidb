//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SQLiteQuery.java
//

#include "CursorWindow.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "SQLiteDatabase.h"
#include "SQLiteDatabaseCorruptException.h"
#include "SQLiteException.h"
#include "SQLiteProgram.h"
#include "SQLiteQuery.h"
#include "SQLiteSession.h"

inline NSString *SquiDBSQLiteQuery_get_TAG(void);
static NSString *SquiDBSQLiteQuery_TAG = @"SQLiteQuery";
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteQuery, TAG, NSString *)

@implementation SquiDBSQLiteQuery

- (instancetype)initWithSquiDBSQLiteDatabase:(SquiDBSQLiteDatabase *)db
                                withNSString:(NSString *)query {
  SquiDBSQLiteQuery_initWithSquiDBSQLiteDatabase_withNSString_(self, db, query);
  return self;
}

- (jint)fillWindowWithSquiDBCursorWindow:(SquiDBCursorWindow *)window
                                 withInt:(jint)startPos
                                 withInt:(jint)requiredPos
                             withBoolean:(jboolean)countAllRows {
  [self acquireReference];
  @try {
    [((SquiDBCursorWindow *) nil_chk(window)) acquireReference];
    @try {
      jint numRows = [((SquiDBSQLiteSession *) nil_chk([self getSession])) executeForCursorWindowWithNSString:[self getSql] withNSObjectArray:[self getBindArgs] withSquiDBCursorWindow:window withInt:startPos withInt:requiredPos withBoolean:countAllRows withInt:[self getConnectionFlags]];
      return numRows;
    }
    @catch (SquiDBSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      @throw ex;
    }
    @catch (SquiDBSQLiteException *ex) {
      SquiDBLogger_eWithNSString_withNSString_(SquiDBSQLiteQuery_TAG, JreStrcat("$$$$", @"exception: ", [ex getMessage], @"; query: ", [self getSql]));
      @throw ex;
    }
    @finally {
      [window releaseReference];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteQuery: ", [self getSql]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBSQLiteDatabase:withNSString:);
  methods[1].selector = @selector(fillWindowWithSquiDBCursorWindow:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSQLiteDatabase;LNSString;", "fillWindow", "LSquiDBCursorWindow;IIZ", "toString", &SquiDBSQLiteQuery_TAG };
  static const J2ObjcClassInfo _SquiDBSQLiteQuery = { "SQLiteQuery", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_SquiDBSQLiteQuery;
}

@end

void SquiDBSQLiteQuery_initWithSquiDBSQLiteDatabase_withNSString_(SquiDBSQLiteQuery *self, SquiDBSQLiteDatabase *db, NSString *query) {
  SquiDBSQLiteProgram_initWithSquiDBSQLiteDatabase_withNSString_withNSObjectArray_(self, db, query, nil);
}

SquiDBSQLiteQuery *new_SquiDBSQLiteQuery_initWithSquiDBSQLiteDatabase_withNSString_(SquiDBSQLiteDatabase *db, NSString *query) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteQuery, initWithSquiDBSQLiteDatabase_withNSString_, db, query)
}

SquiDBSQLiteQuery *create_SquiDBSQLiteQuery_initWithSquiDBSQLiteDatabase_withNSString_(SquiDBSQLiteDatabase *db, NSString *query) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteQuery, initWithSquiDBSQLiteDatabase_withNSString_, db, query)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteQuery)

J2OBJC_NAME_MAPPING(SquiDBSQLiteQuery, "com.yahoo.android.sqlite", "SquiDB")
