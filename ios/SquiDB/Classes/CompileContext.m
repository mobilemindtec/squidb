//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/CompileContext.java
//

#include "ArgumentResolver.h"
#include "CompileContext.h"
#include "DefaultArgumentResolver.h"
#include "J2ObjC_source.h"
#include "VersionCode.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface SquiDBCompileContext () {
 @public
  SquiDBVersionCode *versionCode_;
  id<SquiDBArgumentResolver> argumentResolver_;
  id<JavaUtilMap> extras_;
}

- (instancetype)initWithSquiDBCompileContext_Builder:(SquiDBCompileContext_Builder *)builder;

@end

J2OBJC_FIELD_SETTER(SquiDBCompileContext, versionCode_, SquiDBVersionCode *)
J2OBJC_FIELD_SETTER(SquiDBCompileContext, argumentResolver_, id<SquiDBArgumentResolver>)
J2OBJC_FIELD_SETTER(SquiDBCompileContext, extras_, id<JavaUtilMap>)

__attribute__((unused)) static void SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(SquiDBCompileContext *self, SquiDBCompileContext_Builder *builder);

__attribute__((unused)) static SquiDBCompileContext *new_SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(SquiDBCompileContext_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBCompileContext *create_SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(SquiDBCompileContext_Builder *builder);

@interface SquiDBCompileContext_Builder () {
 @public
  SquiDBVersionCode *versionCode_;
  id<SquiDBArgumentResolver> argumentResolver_;
  id<JavaUtilMap> extras_;
}

@end

J2OBJC_FIELD_SETTER(SquiDBCompileContext_Builder, versionCode_, SquiDBVersionCode *)
J2OBJC_FIELD_SETTER(SquiDBCompileContext_Builder, argumentResolver_, id<SquiDBArgumentResolver>)
J2OBJC_FIELD_SETTER(SquiDBCompileContext_Builder, extras_, id<JavaUtilMap>)

@implementation SquiDBCompileContext

- (instancetype)initWithSquiDBCompileContext_Builder:(SquiDBCompileContext_Builder *)builder {
  SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(self, builder);
  return self;
}

+ (SquiDBCompileContext *)defaultContextForVersionCodeWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion {
  return SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(sqliteVersion);
}

- (SquiDBVersionCode *)getVersionCode {
  return versionCode_;
}

- (id<SquiDBArgumentResolver>)getArgumentResolver {
  return argumentResolver_;
}

- (id)getExtraWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(extras_)) getWithId:key];
}

- (SquiDBCompileContext *)setExtraWithNSString:(NSString *)key
                                        withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(extras_)) putWithId:key withId:value];
  return self;
}

- (SquiDBCompileContext *)clearExtraWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(extras_)) removeWithId:key];
  return self;
}

- (jboolean)hasExtraWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(extras_)) containsKeyWithId:key];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBVersionCode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBArgumentResolver;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBCompileContext_Builder:);
  methods[1].selector = @selector(defaultContextForVersionCodeWithSquiDBVersionCode:);
  methods[2].selector = @selector(getVersionCode);
  methods[3].selector = @selector(getArgumentResolver);
  methods[4].selector = @selector(getExtraWithNSString:);
  methods[5].selector = @selector(setExtraWithNSString:withId:);
  methods[6].selector = @selector(clearExtraWithNSString:);
  methods[7].selector = @selector(hasExtraWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "versionCode_", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "argumentResolver_", "LSquiDBArgumentResolver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "extras_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBCompileContext_Builder;", "defaultContextForVersionCode", "LSquiDBVersionCode;", "getExtra", "LNSString;", "setExtra", "LNSString;LNSObject;", "clearExtra", "hasExtra", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _SquiDBCompileContext = { "CompileContext", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, 0, -1, -1, -1 };
  return &_SquiDBCompileContext;
}

@end

void SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(SquiDBCompileContext *self, SquiDBCompileContext_Builder *builder) {
  NSObject_init(self);
  self->versionCode_ = ((SquiDBCompileContext_Builder *) nil_chk(builder))->versionCode_;
  self->argumentResolver_ = builder->argumentResolver_;
  self->extras_ = new_JavaUtilHashMap_initWithJavaUtilMap_(builder->extras_);
}

SquiDBCompileContext *new_SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(SquiDBCompileContext_Builder *builder) {
  J2OBJC_NEW_IMPL(SquiDBCompileContext, initWithSquiDBCompileContext_Builder_, builder)
}

SquiDBCompileContext *create_SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(SquiDBCompileContext_Builder *builder) {
  J2OBJC_CREATE_IMPL(SquiDBCompileContext, initWithSquiDBCompileContext_Builder_, builder)
}

SquiDBCompileContext *SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(SquiDBVersionCode *sqliteVersion) {
  SquiDBCompileContext_initialize();
  return [new_SquiDBCompileContext_Builder_initWithSquiDBVersionCode_(sqliteVersion) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBCompileContext)

J2OBJC_NAME_MAPPING(SquiDBCompileContext, "com.yahoo.squidb.sql", "SquiDB")

@implementation SquiDBCompileContext_Builder

- (instancetype)initWithSquiDBVersionCode:(SquiDBVersionCode *)versionCode {
  SquiDBCompileContext_Builder_initWithSquiDBVersionCode_(self, versionCode);
  return self;
}

- (SquiDBCompileContext *)build {
  return new_SquiDBCompileContext_initWithSquiDBCompileContext_Builder_(self);
}

- (SquiDBCompileContext_Builder *)setArgumentResolverWithSquiDBArgumentResolver:(id<SquiDBArgumentResolver>)argumentResolver {
  self->argumentResolver_ = argumentResolver;
  return self;
}

- (SquiDBCompileContext_Builder *)setExtraWithNSString:(NSString *)key
                                                withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(self->extras_)) putWithId:key withId:value];
  return self;
}

- (SquiDBCompileContext_Builder *)clearExtraWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(self->extras_)) removeWithId:key];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext_Builder;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBVersionCode:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(setArgumentResolverWithSquiDBArgumentResolver:);
  methods[3].selector = @selector(setExtraWithNSString:withId:);
  methods[4].selector = @selector(clearExtraWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "versionCode_", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "argumentResolver_", "LSquiDBArgumentResolver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extras_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBVersionCode;", "setArgumentResolver", "LSquiDBArgumentResolver;", "setExtra", "LNSString;LNSObject;", "clearExtra", "LNSString;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LSquiDBCompileContext;" };
  static const J2ObjcClassInfo _SquiDBCompileContext_Builder = { "Builder", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x9, 5, 3, 8, -1, -1, -1, -1 };
  return &_SquiDBCompileContext_Builder;
}

@end

void SquiDBCompileContext_Builder_initWithSquiDBVersionCode_(SquiDBCompileContext_Builder *self, SquiDBVersionCode *versionCode) {
  NSObject_init(self);
  self->argumentResolver_ = new_SquiDBDefaultArgumentResolver_init();
  self->extras_ = new_JavaUtilHashMap_init();
  if (versionCode == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't construct a CompileContext with a null VersionCode");
  }
  self->versionCode_ = versionCode;
}

SquiDBCompileContext_Builder *new_SquiDBCompileContext_Builder_initWithSquiDBVersionCode_(SquiDBVersionCode *versionCode) {
  J2OBJC_NEW_IMPL(SquiDBCompileContext_Builder, initWithSquiDBVersionCode_, versionCode)
}

SquiDBCompileContext_Builder *create_SquiDBCompileContext_Builder_initWithSquiDBVersionCode_(SquiDBVersionCode *versionCode) {
  J2OBJC_CREATE_IMPL(SquiDBCompileContext_Builder, initWithSquiDBVersionCode_, versionCode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBCompileContext_Builder)
