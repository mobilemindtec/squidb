//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SqlBuilder.java
//

#include "ArgumentResolver.h"
#include "CompilableWithArguments.h"
#include "CompileContext.h"
#include "DBObject.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Query.h"
#include "SqlBuilder.h"
#include "SqlStatement.h"
#include "SqlUtils.h"
#include "VersionCode.h"
#include "java/lang/Deprecated.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface SquiDBSqlBuilder () {
 @public
  jboolean needsValidation_;
}

@end

inline jint SquiDBSqlBuilder_get_STRING_BUILDER_INITIAL_CAPACITY(void);
#define SquiDBSqlBuilder_STRING_BUILDER_INITIAL_CAPACITY 128
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSqlBuilder, STRING_BUILDER_INITIAL_CAPACITY, jint)

__attribute__((unused)) static IOSObjectArray *SquiDBSqlBuilder__Annotations$0(void);

@implementation SquiDBSqlBuilder

- (instancetype)initWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext
                                 withBoolean:(jboolean)withBoundArguments {
  SquiDBSqlBuilder_initWithSquiDBCompileContext_withBoolean_(self, compileContext, withBoundArguments);
  return self;
}

- (NSString *)getSqlString {
  return [((JavaLangStringBuilder *) nil_chk(sql_)) description];
}

- (id<JavaUtilList>)getBoundArguments {
  return args_;
}

- (jboolean)needsValidation {
  return needsValidation_;
}

- (void)setNeedsValidation {
  needsValidation_ = true;
}

- (void)addValueToSqlWithId:(id)value
                withBoolean:(jboolean)forSqlValidation {
  if ([value isKindOfClass:[SquiDBDBObject class]]) {
    [((SquiDBDBObject *) nil_chk(((SquiDBDBObject *) value))) appendQualifiedExpressionWithSquiDBSqlBuilder:self withBoolean:forSqlValidation];
  }
  else if ([value isKindOfClass:[SquiDBQuery class]]) {
    SquiDBQuery *query = (SquiDBQuery *) value;
    (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:@"("];
    [((SquiDBQuery *) nil_chk(query)) appendToSqlBuilderWithSquiDBSqlBuilder:self withBoolean:forSqlValidation];
    (void) [sql_ appendWithNSString:@")"];
  }
  else if ([value isKindOfClass:[SquiDBCompilableWithArguments class]]) {
    [((SquiDBCompilableWithArguments *) nil_chk(((SquiDBCompilableWithArguments *) value))) appendToSqlBuilderWithSquiDBSqlBuilder:self withBoolean:forSqlValidation];
  }
  else if ([JavaUtilCollection_class_() isInstance:value]) {
    [self addCollectionArgWithJavaUtilCollection:(id<JavaUtilCollection>) cast_check(value, JavaUtilCollection_class_())];
  }
  else if (args_ == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:SquiDBSqlUtils_toSanitizedStringWithId_withSquiDBArgumentResolver_(value, [((SquiDBCompileContext *) nil_chk(compileContext_)) getArgumentResolver])];
  }
  else {
    if (value != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:SquiDBSqlStatement_REPLACEABLE_PARAMETER];
      [args_ addWithId:value];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:@"NULL"];
    }
  }
}

- (void)addCollectionArgWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  if (value != nil) {
    if (args_ == nil) {
      SquiDBSqlUtils_addInlineCollectionToSqlStringWithJavaLangStringBuilder_withSquiDBArgumentResolver_withJavaUtilCollection_(sql_, [((SquiDBCompileContext *) nil_chk(compileContext_)) getArgumentResolver], value);
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:SquiDBSqlStatement_REPLACEABLE_ARRAY_PARAMETER];
      [args_ addWithId:value];
    }
  }
}

- (void)appendConcatenatedCompilablesWithJavaUtilList:(id<JavaUtilList>)compilables
                                         withNSString:(NSString *)separator
                                          withBoolean:(jboolean)forSqlValidation {
  if (compilables != nil && ![compilables isEmpty]) {
    jboolean needSeparator = false;
    for (SquiDBCompilableWithArguments * __strong compilable in compilables) {
      if (needSeparator) {
        (void) [((JavaLangStringBuilder *) nil_chk(sql_)) appendWithNSString:separator];
      }
      needSeparator = true;
      [((SquiDBCompilableWithArguments *) nil_chk(compilable)) appendToSqlBuilderWithSquiDBSqlBuilder:self withBoolean:forSqlValidation];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBCompileContext:withBoolean:);
  methods[1].selector = @selector(getSqlString);
  methods[2].selector = @selector(getBoundArguments);
  methods[3].selector = @selector(needsValidation);
  methods[4].selector = @selector(setNeedsValidation);
  methods[5].selector = @selector(addValueToSqlWithId:withBoolean:);
  methods[6].selector = @selector(addCollectionArgWithJavaUtilCollection:);
  methods[7].selector = @selector(appendConcatenatedCompilablesWithJavaUtilList:withNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STRING_BUILDER_INITIAL_CAPACITY", "I", .constantValue.asInt = SquiDBSqlBuilder_STRING_BUILDER_INITIAL_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "sql_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "compileContext_", "LSquiDBCompileContext;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "sqliteVersion_", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x11, -1, -1, -1, 10 },
    { "args_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "needsValidation_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBCompileContext;Z", "()Ljava/util/List<Ljava/lang/Object;>;", "addValueToSql", "LNSObject;Z", "addCollectionArg", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)V", "appendConcatenatedCompilables", "LJavaUtilList;LNSString;Z", "(Ljava/util/List<+Lcom/yahoo/squidb/sql/CompilableWithArguments;>;Ljava/lang/String;Z)V", (void *)&SquiDBSqlBuilder__Annotations$0, "Ljava/util/List<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _SquiDBSqlBuilder = { "SqlBuilder", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x11, 8, 6, -1, -1, -1, -1, -1 };
  return &_SquiDBSqlBuilder;
}

@end

void SquiDBSqlBuilder_initWithSquiDBCompileContext_withBoolean_(SquiDBSqlBuilder *self, SquiDBCompileContext *compileContext, jboolean withBoundArguments) {
  NSObject_init(self);
  self->sql_ = new_JavaLangStringBuilder_initWithInt_(SquiDBSqlBuilder_STRING_BUILDER_INITIAL_CAPACITY);
  self->needsValidation_ = false;
  self->compileContext_ = compileContext;
  self->sqliteVersion_ = [((SquiDBCompileContext *) nil_chk(compileContext)) getVersionCode];
  self->args_ = withBoundArguments ? new_JavaUtilArrayList_init() : nil;
}

SquiDBSqlBuilder *new_SquiDBSqlBuilder_initWithSquiDBCompileContext_withBoolean_(SquiDBCompileContext *compileContext, jboolean withBoundArguments) {
  J2OBJC_NEW_IMPL(SquiDBSqlBuilder, initWithSquiDBCompileContext_withBoolean_, compileContext, withBoundArguments)
}

SquiDBSqlBuilder *create_SquiDBSqlBuilder_initWithSquiDBCompileContext_withBoolean_(SquiDBCompileContext *compileContext, jboolean withBoundArguments) {
  J2OBJC_CREATE_IMPL(SquiDBSqlBuilder, initWithSquiDBCompileContext_withBoolean_, compileContext, withBoundArguments)
}

IOSObjectArray *SquiDBSqlBuilder__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSqlBuilder)

J2OBJC_NAME_MAPPING(SquiDBSqlBuilder, "com.yahoo.squidb.sql", "SquiDB")
