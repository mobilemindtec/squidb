//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Function.java
//

#include "ArgumentFunction.h"
#include "CaseBuilder.h"
#include "CompilableWithArguments.h"
#include "CompileContext.h"
#include "Criterion.h"
#include "DistinctArgumentFunction.h"
#include "Field.h"
#include "Function.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MathFunction.h"
#include "MathOperator.h"
#include "Query.h"
#include "QueryFunction.h"
#include "RawFunction.h"
#include "SqlBuilder.h"
#include "VersionCode.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *SquiDBFunction__Annotations$0(void);

@interface SquiDBFunction_1 : SquiDBArgumentFunction

- (instancetype)initWithNSString:(NSString *)functionName
               withNSObjectArray:(IOSObjectArray *)arguments;

- (NSString *)separator;

- (SquiDBField *)asWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBFunction_1)

__attribute__((unused)) static void SquiDBFunction_1_initWithNSString_withNSObjectArray_(SquiDBFunction_1 *self, NSString *functionName, IOSObjectArray *arguments);

__attribute__((unused)) static SquiDBFunction_1 *new_SquiDBFunction_1_initWithNSString_withNSObjectArray_(NSString *functionName, IOSObjectArray *arguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBFunction_1 *create_SquiDBFunction_1_initWithNSString_withNSObjectArray_(NSString *functionName, IOSObjectArray *arguments);

@interface SquiDBFunction_2 : SquiDBArgumentFunction {
 @public
  SquiDBField *val$field_;
  NSString *val$newType_;
}

- (instancetype)initWithSquiDBField:(SquiDBField *)capture$0
                       withNSString:(NSString *)capture$1
                       withNSString:(NSString *)functionName
                  withNSObjectArray:(IOSObjectArray *)arguments;

- (void)appendArgumentListWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                             withNSObjectArray:(IOSObjectArray *)arguments
                                   withBoolean:(jboolean)forSqlValidation;

- (SquiDBField *)asWithNSString:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBFunction_2)

__attribute__((unused)) static void SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(SquiDBFunction_2 *self, SquiDBField *capture$0, NSString *capture$1, NSString *functionName, IOSObjectArray *arguments);

__attribute__((unused)) static SquiDBFunction_2 *new_SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(SquiDBField *capture$0, NSString *capture$1, NSString *functionName, IOSObjectArray *arguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBFunction_2 *create_SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(SquiDBField *capture$0, NSString *capture$1, NSString *functionName, IOSObjectArray *arguments);

J2OBJC_INITIALIZED_DEFN(SquiDBFunction)

SquiDBFunction *SquiDBFunction_TRUE;
SquiDBFunction *SquiDBFunction_FALSE;

@implementation SquiDBFunction

+ (SquiDBFunction *)TRUE_ {
  return SquiDBFunction_TRUE;
}

+ (SquiDBFunction *)FALSE_ {
  return SquiDBFunction_FALSE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBFunction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)expression {
  SquiDBFunction_initWithNSString_(self, expression);
  return self;
}

- (void)appendQualifiedExpressionWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                          withBoolean:(jboolean)forSqlValidation {
  [self appendFunctionExpressionWithSquiDBSqlBuilder:builder withBoolean:forSqlValidation];
}

- (void)appendFunctionExpressionWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                         withBoolean:(jboolean)forSqlValidation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getExpression {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Function expressions cannot be converted to a String without a VersionCode for context. Instead use getExpression(VersionCode)");
}

- (NSString *)getExpressionWithSquiDBVersionCode:(SquiDBVersionCode *)forSqliteVersion {
  return [self getExpressionWithSquiDBCompileContext:SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(forSqliteVersion)];
}

- (NSString *)getExpressionWithSquiDBCompileContext:(SquiDBCompileContext *)forCompileContext {
  SquiDBSqlBuilder *builder = new_SquiDBSqlBuilder_initWithSquiDBCompileContext_withBoolean_(forCompileContext, false);
  [self appendQualifiedExpressionWithSquiDBSqlBuilder:builder withBoolean:false];
  return [builder getSqlString];
}

- (NSString *)expressionForComparison {
  return [self getExpressionWithSquiDBCompileContext:SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(JreLoadStatic(SquiDBCompilableWithArguments, VERSION_FOR_TO_STRING))];
}

+ (SquiDBFunction *)functionWithArgumentsWithNSString:(NSString *)functionName
                                    withNSObjectArray:(IOSObjectArray *)arguments {
  return SquiDBFunction_functionWithArgumentsWithNSString_withNSObjectArray_(functionName, arguments);
}

+ (SquiDBFunction *)rawFunctionWithNSString:(NSString *)expression {
  return SquiDBFunction_rawFunctionWithNSString_(expression);
}

+ (SquiDBFunction *)fromQueryWithSquiDBQuery:(SquiDBQuery *)query {
  return SquiDBFunction_fromQueryWithSquiDBQuery_(query);
}

+ (SquiDBFunction *)upperWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_upperWithSquiDBField_(field);
}

+ (SquiDBFunction *)lowerWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_lowerWithSquiDBField_(field);
}

+ (SquiDBFunction *)substrWithSquiDBField:(SquiDBField *)field
                                   withId:(id)start {
  return SquiDBFunction_substrWithSquiDBField_withId_(field, start);
}

+ (SquiDBFunction *)substrWithSquiDBField:(SquiDBField *)field
                                   withId:(id)start
                                   withId:(id)length {
  return SquiDBFunction_substrWithSquiDBField_withId_withId_(field, start, length);
}

+ (SquiDBFunction *)strConcatWithNSObjectArray:(IOSObjectArray *)objects {
  return SquiDBFunction_strConcatWithNSObjectArray_(objects);
}

+ (SquiDBFunction *)count {
  return SquiDBFunction_count();
}

+ (SquiDBFunction *)countWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_countWithSquiDBField_(field);
}

+ (SquiDBFunction *)countDistinctWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_countDistinctWithSquiDBField_(field);
}

+ (SquiDBFunction *)lengthWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_lengthWithSquiDBField_(field);
}

+ (SquiDBFunction *)maxWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_maxWithSquiDBField_(field);
}

+ (SquiDBFunction *)minWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_minWithSquiDBField_(field);
}

+ (SquiDBFunction *)sumWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_sumWithSquiDBField_(field);
}

+ (SquiDBFunction *)sumDistinctWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_sumDistinctWithSquiDBField_(field);
}

+ (SquiDBFunction *)avgWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_avgWithSquiDBField_(field);
}

+ (SquiDBFunction *)avgDistinctWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_avgDistinctWithSquiDBField_(field);
}

+ (SquiDBFunction *)absWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_absWithSquiDBField_(field);
}

+ (SquiDBFunction *)groupConcatWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_groupConcatWithSquiDBField_(field);
}

+ (SquiDBFunction *)groupConcatDistinctWithSquiDBField:(SquiDBField *)field {
  return SquiDBFunction_groupConcatDistinctWithSquiDBField_(field);
}

+ (SquiDBFunction *)groupConcatWithSquiDBField:(SquiDBField *)field
                                  withNSString:(NSString *)separator {
  return SquiDBFunction_groupConcatWithSquiDBField_withNSString_(field, separator);
}

+ (SquiDBFunction *)caseWhenWithSquiDBCriterion:(SquiDBCriterion *)when {
  return SquiDBFunction_caseWhenWithSquiDBCriterion_(when);
}

+ (SquiDBFunction *)caseWhenWithSquiDBCriterion:(SquiDBCriterion *)when
                                         withId:(id)ifTrue
                                         withId:(id)ifFalse {
  return SquiDBFunction_caseWhenWithSquiDBCriterion_withId_withId_(when, ifTrue, ifFalse);
}

+ (SquiDBCaseBuilder *)caseWhenWithSquiDBCriterion:(SquiDBCriterion *)when
                                            withId:(id)then {
  return SquiDBFunction_caseWhenWithSquiDBCriterion_withId_(when, then);
}

+ (SquiDBCaseBuilder *)caseExprWithId:(id)baseExpression {
  return SquiDBFunction_caseExprWithId_(baseExpression);
}

+ (SquiDBFunction *)castWithSquiDBField:(SquiDBField *)field
                           withNSString:(NSString *)newType {
  return SquiDBFunction_castWithSquiDBField_withNSString_(field, newType);
}

+ (SquiDBFunction *)coalesceWithNSObjectArray:(IOSObjectArray *)values {
  return SquiDBFunction_coalesceWithNSObjectArray_(values);
}

+ (SquiDBFunction *)addWithNSObjectArray:(IOSObjectArray *)args {
  return SquiDBFunction_addWithNSObjectArray_(args);
}

+ (SquiDBFunction *)subtractWithNSObjectArray:(IOSObjectArray *)args {
  return SquiDBFunction_subtractWithNSObjectArray_(args);
}

+ (SquiDBFunction *)multiplyWithNSObjectArray:(IOSObjectArray *)args {
  return SquiDBFunction_multiplyWithNSObjectArray_(args);
}

+ (SquiDBFunction *)divideWithNSObjectArray:(IOSObjectArray *)args {
  return SquiDBFunction_divideWithNSObjectArray_(args);
}

+ (SquiDBFunction *)moduloWithId:(id)lhs
                          withId:(id)rhs {
  return SquiDBFunction_moduloWithId_withId_(lhs, rhs);
}

+ (SquiDBFunction *)bitwiseAndWithNSObjectArray:(IOSObjectArray *)args {
  return SquiDBFunction_bitwiseAndWithNSObjectArray_(args);
}

+ (SquiDBFunction *)bitwiseOrWithNSObjectArray:(IOSObjectArray *)args {
  return SquiDBFunction_bitwiseOrWithNSObjectArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, 6, -1 },
    { NULL, "LNSString;", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 8, 9, -1, 10, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 11, 0, -1, 12, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 19, 17, -1, 18, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 20, 21, -1, 22, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 20, 23, -1, 24, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 25, 26, -1, 27, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, -1, -1, -1, 28, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 29, 17, -1, 30, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 31, 17, -1, 30, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 32, 17, -1, 30, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 33, 17, -1, 34, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 35, 17, -1, 34, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 36, 17, -1, 37, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 38, 17, -1, 37, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 39, 17, -1, 40, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 41, 17, -1, 40, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 42, 17, -1, 37, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 43, 17, -1, 44, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 45, 17, -1, 44, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 43, 46, -1, 47, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 48, 49, -1, 50, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 48, 51, -1, 52, -1, -1 },
    { NULL, "LSquiDBCaseBuilder;", 0x9, 48, 53, -1, -1, -1, -1 },
    { NULL, "LSquiDBCaseBuilder;", 0x9, 54, 55, -1, -1, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 56, 46, -1, 57, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 58, 26, -1, 59, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 60, 26, -1, 61, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 62, 26, -1, 61, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 63, 26, -1, 61, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 64, 26, -1, 61, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x9, 65, 66, -1, 67, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 68, 26, -1, 61, -1, -1 },
    { NULL, "LSquiDBFunction;", 0x89, 69, 26, -1, 61, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(appendQualifiedExpressionWithSquiDBSqlBuilder:withBoolean:);
  methods[3].selector = @selector(appendFunctionExpressionWithSquiDBSqlBuilder:withBoolean:);
  methods[4].selector = @selector(getExpression);
  methods[5].selector = @selector(getExpressionWithSquiDBVersionCode:);
  methods[6].selector = @selector(getExpressionWithSquiDBCompileContext:);
  methods[7].selector = @selector(expressionForComparison);
  methods[8].selector = @selector(functionWithArgumentsWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(rawFunctionWithNSString:);
  methods[10].selector = @selector(fromQueryWithSquiDBQuery:);
  methods[11].selector = @selector(upperWithSquiDBField:);
  methods[12].selector = @selector(lowerWithSquiDBField:);
  methods[13].selector = @selector(substrWithSquiDBField:withId:);
  methods[14].selector = @selector(substrWithSquiDBField:withId:withId:);
  methods[15].selector = @selector(strConcatWithNSObjectArray:);
  methods[16].selector = @selector(count);
  methods[17].selector = @selector(countWithSquiDBField:);
  methods[18].selector = @selector(countDistinctWithSquiDBField:);
  methods[19].selector = @selector(lengthWithSquiDBField:);
  methods[20].selector = @selector(maxWithSquiDBField:);
  methods[21].selector = @selector(minWithSquiDBField:);
  methods[22].selector = @selector(sumWithSquiDBField:);
  methods[23].selector = @selector(sumDistinctWithSquiDBField:);
  methods[24].selector = @selector(avgWithSquiDBField:);
  methods[25].selector = @selector(avgDistinctWithSquiDBField:);
  methods[26].selector = @selector(absWithSquiDBField:);
  methods[27].selector = @selector(groupConcatWithSquiDBField:);
  methods[28].selector = @selector(groupConcatDistinctWithSquiDBField:);
  methods[29].selector = @selector(groupConcatWithSquiDBField:withNSString:);
  methods[30].selector = @selector(caseWhenWithSquiDBCriterion:);
  methods[31].selector = @selector(caseWhenWithSquiDBCriterion:withId:withId:);
  methods[32].selector = @selector(caseWhenWithSquiDBCriterion:withId:);
  methods[33].selector = @selector(caseExprWithId:);
  methods[34].selector = @selector(castWithSquiDBField:withNSString:);
  methods[35].selector = @selector(coalesceWithNSObjectArray:);
  methods[36].selector = @selector(addWithNSObjectArray:);
  methods[37].selector = @selector(subtractWithNSObjectArray:);
  methods[38].selector = @selector(multiplyWithNSObjectArray:);
  methods[39].selector = @selector(divideWithNSObjectArray:);
  methods[40].selector = @selector(moduloWithId:withId:);
  methods[41].selector = @selector(bitwiseAndWithNSObjectArray:);
  methods[42].selector = @selector(bitwiseOrWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE", "LSquiDBFunction;", .constantValue.asLong = 0, 0x19, -1, 70, 71, -1 },
    { "FALSE", "LSquiDBFunction;", .constantValue.asLong = 0, 0x19, -1, 72, 71, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "appendQualifiedExpression", "LSquiDBSqlBuilder;Z", "appendFunctionExpression", "getExpression", "LSquiDBVersionCode;", (void *)&SquiDBFunction__Annotations$0, "LSquiDBCompileContext;", "functionWithArguments", "LNSString;[LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/String;[Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<TT;>;", "rawFunction", "<T:Ljava/lang/Object;>(Ljava/lang/String;)Lcom/yahoo/squidb/sql/Function<TT;>;", "fromQuery", "LSquiDBQuery;", "<T:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Query;)Lcom/yahoo/squidb/sql/Function<TT;>;", "upper", "LSquiDBField;", "(Lcom/yahoo/squidb/sql/Field<Ljava/lang/String;>;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/String;>;", "lower", "substr", "LSquiDBField;LNSObject;", "(Lcom/yahoo/squidb/sql/Field<Ljava/lang/String;>;Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/String;>;", "LSquiDBField;LNSObject;LNSObject;", "(Lcom/yahoo/squidb/sql/Field<Ljava/lang/String;>;Ljava/lang/Object;Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/String;>;", "strConcat", "[LNSObject;", "([Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/String;>;", "()Lcom/yahoo/squidb/sql/Function<Ljava/lang/Integer;>;", "count", "(Lcom/yahoo/squidb/sql/Field<*>;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/Integer;>;", "countDistinct", "length", "max", "<T:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Field<TT;>;)Lcom/yahoo/squidb/sql/Function<TT;>;", "min", "sum", "<T:Ljava/lang/Number;>(Lcom/yahoo/squidb/sql/Field<TT;>;)Lcom/yahoo/squidb/sql/Function<TT;>;", "sumDistinct", "avg", "<T:Ljava/lang/Number;>(Lcom/yahoo/squidb/sql/Field<TT;>;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/Double;>;", "avgDistinct", "abs", "groupConcat", "(Lcom/yahoo/squidb/sql/Field<*>;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/String;>;", "groupConcatDistinct", "LSquiDBField;LNSString;", "(Lcom/yahoo/squidb/sql/Field<*>;Ljava/lang/String;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/String;>;", "caseWhen", "LSquiDBCriterion;", "(Lcom/yahoo/squidb/sql/Criterion;)Lcom/yahoo/squidb/sql/Function<Ljava/lang/Integer;>;", "LSquiDBCriterion;LNSObject;LNSObject;", "<T:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Criterion;Ljava/lang/Object;Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<TT;>;", "LSquiDBCriterion;LNSObject;", "caseExpr", "LNSObject;", "cast", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Field<TT;>;Ljava/lang/String;)Lcom/yahoo/squidb/sql/Function<TR;>;", "coalesce", "<T:Ljava/lang/Object;>([Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<TT;>;", "add", "<T:Ljava/lang/Number;>([Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<TT;>;", "subtract", "multiply", "divide", "modulo", "LNSObject;LNSObject;", "<T:Ljava/lang/Number;>(Ljava/lang/Object;Ljava/lang/Object;)Lcom/yahoo/squidb/sql/Function<TT;>;", "bitwiseAnd", "bitwiseOr", &SquiDBFunction_TRUE, "Lcom/yahoo/squidb/sql/Function<Ljava/lang/Integer;>;", &SquiDBFunction_FALSE, "<TYPE:Ljava/lang/Object;>Lcom/yahoo/squidb/sql/Field<TTYPE;>;" };
  static const J2ObjcClassInfo _SquiDBFunction = { "Function", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x401, 43, 2, -1, -1, -1, 73, -1 };
  return &_SquiDBFunction;
}

+ (void)initialize {
  if (self == [SquiDBFunction class]) {
    SquiDBFunction_TRUE = SquiDBFunction_rawFunctionWithNSString_(@"1");
    SquiDBFunction_FALSE = SquiDBFunction_rawFunctionWithNSString_(@"0");
    J2OBJC_SET_INITIALIZED(SquiDBFunction)
  }
}

@end

void SquiDBFunction_init(SquiDBFunction *self) {
  SquiDBFunction_initWithNSString_(self, nil);
}

void SquiDBFunction_initWithNSString_(SquiDBFunction *self, NSString *expression) {
  SquiDBField_initWithNSString_(self, expression);
}

SquiDBFunction *SquiDBFunction_functionWithArgumentsWithNSString_withNSObjectArray_(NSString *functionName, IOSObjectArray *arguments) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(functionName, arguments);
}

SquiDBFunction *SquiDBFunction_rawFunctionWithNSString_(NSString *expression) {
  SquiDBFunction_initialize();
  return new_SquiDBRawFunction_initPackagePrivateWithNSString_(expression);
}

SquiDBFunction *SquiDBFunction_fromQueryWithSquiDBQuery_(SquiDBQuery *query) {
  SquiDBFunction_initialize();
  return new_SquiDBQueryFunction_initPackagePrivateWithSquiDBQuery_(query);
}

SquiDBFunction *SquiDBFunction_upperWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"UPPER", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_lowerWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"LOWER", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_substrWithSquiDBField_withId_(SquiDBField *field, id start) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"SUBSTR", [IOSObjectArray newArrayWithObjects:(id[]){ field, start } count:2 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_substrWithSquiDBField_withId_withId_(SquiDBField *field, id start, id length) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"SUBSTR", [IOSObjectArray newArrayWithObjects:(id[]){ field, start, length } count:3 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_strConcatWithNSObjectArray_(IOSObjectArray *objects) {
  SquiDBFunction_initialize();
  if (objects == nil || objects->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't concatenate an empty list of objects");
  }
  return new_SquiDBFunction_1_initWithNSString_withNSObjectArray_(@"", objects);
}

SquiDBFunction *SquiDBFunction_count() {
  SquiDBFunction_initialize();
  return new_SquiDBRawFunction_initPackagePrivateWithNSString_(@"COUNT(*)");
}

SquiDBFunction *SquiDBFunction_countWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"COUNT", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_countDistinctWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBDistinctArgumentFunction_initPackagePrivateWithNSString_withId_(@"COUNT", field);
}

SquiDBFunction *SquiDBFunction_lengthWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"LENGTH", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_maxWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"MAX", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_minWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"MIN", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_sumWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"SUM", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_sumDistinctWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBDistinctArgumentFunction_initPackagePrivateWithNSString_withId_(@"SUM", field);
}

SquiDBFunction *SquiDBFunction_avgWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"AVG", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_avgDistinctWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBDistinctArgumentFunction_initPackagePrivateWithNSString_withId_(@"AVG", field);
}

SquiDBFunction *SquiDBFunction_absWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"ABS", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_groupConcatWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"GROUP_CONCAT", [IOSObjectArray newArrayWithObjects:(id[]){ field } count:1 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_groupConcatDistinctWithSquiDBField_(SquiDBField *field) {
  SquiDBFunction_initialize();
  return new_SquiDBDistinctArgumentFunction_initPackagePrivateWithNSString_withId_(@"GROUP_CONCAT", field);
}

SquiDBFunction *SquiDBFunction_groupConcatWithSquiDBField_withNSString_(SquiDBField *field, NSString *separator) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"GROUP_CONCAT", [IOSObjectArray newArrayWithObjects:(id[]){ field, separator } count:2 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_caseWhenWithSquiDBCriterion_(SquiDBCriterion *when) {
  SquiDBFunction_initialize();
  return SquiDBFunction_caseWhenWithSquiDBCriterion_withId_withId_(when, SquiDBFunction_TRUE, SquiDBFunction_FALSE);
}

SquiDBFunction *SquiDBFunction_caseWhenWithSquiDBCriterion_withId_withId_(SquiDBCriterion *when, id ifTrue, id ifFalse) {
  SquiDBFunction_initialize();
  return [((SquiDBCaseBuilder *) nil_chk([((SquiDBCaseBuilder *) nil_chk(SquiDBFunction_caseWhenWithSquiDBCriterion_withId_(when, ifTrue))) elseExprWithId:ifFalse])) end];
}

SquiDBCaseBuilder *SquiDBFunction_caseWhenWithSquiDBCriterion_withId_(SquiDBCriterion *when, id then) {
  SquiDBFunction_initialize();
  if (when == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't construct a CASE WHEN statement with a null criterion");
  }
  return [new_SquiDBCaseBuilder_initWithId_(nil) whenWithId:when withId:then];
}

SquiDBCaseBuilder *SquiDBFunction_caseExprWithId_(id baseExpression) {
  SquiDBFunction_initialize();
  return new_SquiDBCaseBuilder_initWithId_(baseExpression);
}

SquiDBFunction *SquiDBFunction_castWithSquiDBField_withNSString_(SquiDBField *field, NSString *newType) {
  SquiDBFunction_initialize();
  return new_SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(field, newType, @"CAST", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_coalesceWithNSObjectArray_(IOSObjectArray *values) {
  SquiDBFunction_initialize();
  return new_SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(@"COALESCE", values);
}

SquiDBFunction *SquiDBFunction_addWithNSObjectArray_(IOSObjectArray *args) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, PLUS), args);
}

SquiDBFunction *SquiDBFunction_subtractWithNSObjectArray_(IOSObjectArray *args) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, MINUS), args);
}

SquiDBFunction *SquiDBFunction_multiplyWithNSObjectArray_(IOSObjectArray *args) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, MULT), args);
}

SquiDBFunction *SquiDBFunction_divideWithNSObjectArray_(IOSObjectArray *args) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, DIVIDE), args);
}

SquiDBFunction *SquiDBFunction_moduloWithId_withId_(id lhs, id rhs) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, MODULO), [IOSObjectArray newArrayWithObjects:(id[]){ lhs, rhs } count:2 type:NSObject_class_()]);
}

SquiDBFunction *SquiDBFunction_bitwiseAndWithNSObjectArray_(IOSObjectArray *args) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, BITWISE_AND), args);
}

SquiDBFunction *SquiDBFunction_bitwiseOrWithNSObjectArray_(IOSObjectArray *args) {
  SquiDBFunction_initialize();
  return new_SquiDBMathFunction_initPackagePrivateWithSquiDBMathOperator_withNSObjectArray_(JreLoadEnum(SquiDBMathOperator, BITWISE_OR), args);
}

IOSObjectArray *SquiDBFunction__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBFunction)

J2OBJC_NAME_MAPPING(SquiDBFunction, "com.yahoo.squidb.sql", "SquiDB")

@implementation SquiDBFunction_1

- (instancetype)initWithNSString:(NSString *)functionName
               withNSObjectArray:(IOSObjectArray *)arguments {
  SquiDBFunction_1_initWithNSString_withNSObjectArray_(self, functionName, arguments);
  return self;
}

- (NSString *)separator {
  return @" || ";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSObjectArray:);
  methods[1].selector = @selector(separator);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LSquiDBFunction;", "strConcatWithNSObjectArray:", "Lcom/yahoo/squidb/sql/ArgumentFunction<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _SquiDBFunction_1 = { "", "com.yahoo.squidb.sql", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, 2, 3, -1 };
  return &_SquiDBFunction_1;
}

@end

void SquiDBFunction_1_initWithNSString_withNSObjectArray_(SquiDBFunction_1 *self, NSString *functionName, IOSObjectArray *arguments) {
  SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(self, functionName, arguments);
}

SquiDBFunction_1 *new_SquiDBFunction_1_initWithNSString_withNSObjectArray_(NSString *functionName, IOSObjectArray *arguments) {
  J2OBJC_NEW_IMPL(SquiDBFunction_1, initWithNSString_withNSObjectArray_, functionName, arguments)
}

SquiDBFunction_1 *create_SquiDBFunction_1_initWithNSString_withNSObjectArray_(NSString *functionName, IOSObjectArray *arguments) {
  J2OBJC_CREATE_IMPL(SquiDBFunction_1, initWithNSString_withNSObjectArray_, functionName, arguments)
}

@implementation SquiDBFunction_2

- (instancetype)initWithSquiDBField:(SquiDBField *)capture$0
                       withNSString:(NSString *)capture$1
                       withNSString:(NSString *)functionName
                  withNSObjectArray:(IOSObjectArray *)arguments {
  SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(self, capture$0, capture$1, functionName, arguments);
  return self;
}

- (void)appendArgumentListWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                             withNSObjectArray:(IOSObjectArray *)arguments
                                   withBoolean:(jboolean)forSqlValidation {
  [((SquiDBSqlBuilder *) nil_chk(builder)) addValueToSqlWithId:val$field_ withBoolean:forSqlValidation];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder->sql_)) appendWithNSString:@" AS "])) appendWithNSString:val$newType_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBField:withNSString:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(appendArgumentListWithSquiDBSqlBuilder:withNSObjectArray:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$field_", "LSquiDBField;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$newType_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBField;LNSString;LNSString;[LNSObject;", "appendArgumentList", "LSquiDBSqlBuilder;[LNSObject;Z", "Lcom/yahoo/squidb/sql/Field<TT;>;", "LSquiDBFunction;", "castWithSquiDBField:withNSString:", "Lcom/yahoo/squidb/sql/ArgumentFunction<TR;>;" };
  static const J2ObjcClassInfo _SquiDBFunction_2 = { "", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, 6, -1 };
  return &_SquiDBFunction_2;
}

@end

void SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(SquiDBFunction_2 *self, SquiDBField *capture$0, NSString *capture$1, NSString *functionName, IOSObjectArray *arguments) {
  self->val$field_ = capture$0;
  self->val$newType_ = capture$1;
  SquiDBArgumentFunction_initPackagePrivateWithNSString_withNSObjectArray_(self, functionName, arguments);
}

SquiDBFunction_2 *new_SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(SquiDBField *capture$0, NSString *capture$1, NSString *functionName, IOSObjectArray *arguments) {
  J2OBJC_NEW_IMPL(SquiDBFunction_2, initWithSquiDBField_withNSString_withNSString_withNSObjectArray_, capture$0, capture$1, functionName, arguments)
}

SquiDBFunction_2 *create_SquiDBFunction_2_initWithSquiDBField_withNSString_withNSString_withNSObjectArray_(SquiDBField *capture$0, NSString *capture$1, NSString *functionName, IOSObjectArray *arguments) {
  J2OBJC_CREATE_IMPL(SquiDBFunction_2, initWithSquiDBField_withNSString_withNSString_withNSObjectArray_, capture$0, capture$1, functionName, arguments)
}
