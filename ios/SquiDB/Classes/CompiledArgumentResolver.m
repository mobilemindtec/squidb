//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/CompiledArgumentResolver.java
//

#include "ArgumentResolver.h"
#include "CompileContext.h"
#include "CompiledArgumentResolver.h"
#include "CompiledStatement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "SqlBuilder.h"
#include "SqlStatement.h"
#include "SqlUtils.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComYahooSquidbSqlCompiledArgumentResolver () {
 @public
  NSString *compiledSql_;
  id<JavaUtilList> sqlArgs_;
  ComYahooSquidbSqlCompileContext *compileContext_;
  jboolean needsValidation_;
  id<JavaUtilList> collectionArgs_;
  ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *compiledSqlCache_;
  ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *argArrayCache_;
  IOSObjectArray *compiledArgs_;
}

- (jboolean)hasCollectionArgs;

- (void)findCollectionArgs;

- (NSString *)getCacheKey;

- (NSString *)resolveSqlStringWithNSString:(NSString *)cacheKey
                               withBoolean:(jboolean)largeArgMode;

- (void)appendCollectionVariableStringForSizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                               withInt:(jint)size;

- (IOSObjectArray *)resolveSqlArgumentsWithNSString:(NSString *)cacheKey
                                            withInt:(jint)totalArgSize
                                        withBoolean:(jboolean)largeArgMode;

- (IOSObjectArray *)applyArgumentResolverWithNSObjectArray:(IOSObjectArray *)args;

- (jint)calculateArgsSizeWithCollectionArgs;

- (jint)calculateArgsSizeWithoutCollectionArgs;

- (void)populateCompiledArgsWithBoolean:(jboolean)largeArgMode;

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, compiledSql_, NSString *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, sqlArgs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, compileContext_, ComYahooSquidbSqlCompileContext *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, collectionArgs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, compiledSqlCache_, ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, argArrayCache_, ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *)
J2OBJC_FIELD_SETTER(ComYahooSquidbSqlCompiledArgumentResolver, compiledArgs_, IOSObjectArray *)

inline JavaUtilRegexPattern *ComYahooSquidbSqlCompiledArgumentResolver_get_REPLACEABLE_ARRAY_PARAM_PATTERN(void);
static JavaUtilRegexPattern *ComYahooSquidbSqlCompiledArgumentResolver_REPLACEABLE_ARRAY_PARAM_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYahooSquidbSqlCompiledArgumentResolver, REPLACEABLE_ARRAY_PARAM_PATTERN, JavaUtilRegexPattern *)

inline jint ComYahooSquidbSqlCompiledArgumentResolver_get_CACHE_SIZE(void);
#define ComYahooSquidbSqlCompiledArgumentResolver_CACHE_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooSquidbSqlCompiledArgumentResolver, CACHE_SIZE, jint)

__attribute__((unused)) static jboolean ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self);

__attribute__((unused)) static void ComYahooSquidbSqlCompiledArgumentResolver_findCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self);

__attribute__((unused)) static NSString *ComYahooSquidbSqlCompiledArgumentResolver_getCacheKey(ComYahooSquidbSqlCompiledArgumentResolver *self);

__attribute__((unused)) static NSString *ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlStringWithNSString_withBoolean_(ComYahooSquidbSqlCompiledArgumentResolver *self, NSString *cacheKey, jboolean largeArgMode);

__attribute__((unused)) static void ComYahooSquidbSqlCompiledArgumentResolver_appendCollectionVariableStringForSizeWithJavaLangStringBuilder_withInt_(ComYahooSquidbSqlCompiledArgumentResolver *self, JavaLangStringBuilder *builder, jint size);

__attribute__((unused)) static IOSObjectArray *ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlArgumentsWithNSString_withInt_withBoolean_(ComYahooSquidbSqlCompiledArgumentResolver *self, NSString *cacheKey, jint totalArgSize, jboolean largeArgMode);

__attribute__((unused)) static IOSObjectArray *ComYahooSquidbSqlCompiledArgumentResolver_applyArgumentResolverWithNSObjectArray_(ComYahooSquidbSqlCompiledArgumentResolver *self, IOSObjectArray *args);

__attribute__((unused)) static jint ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self);

__attribute__((unused)) static jint ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithoutCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self);

__attribute__((unused)) static void ComYahooSquidbSqlCompiledArgumentResolver_populateCompiledArgsWithBoolean_(ComYahooSquidbSqlCompiledArgumentResolver *self, jboolean largeArgMode);

@interface ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache () {
 @public
  jint maxCapacity_;
}

@end

J2OBJC_INITIALIZED_DEFN(ComYahooSquidbSqlCompiledArgumentResolver)

@implementation ComYahooSquidbSqlCompiledArgumentResolver

- (instancetype)initWithComYahooSquidbSqlSqlBuilder:(ComYahooSquidbSqlSqlBuilder *)builder {
  ComYahooSquidbSqlCompiledArgumentResolver_initWithComYahooSquidbSqlSqlBuilder_(self, builder);
  return self;
}

- (jboolean)hasCollectionArgs {
  return ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self);
}

- (void)findCollectionArgs {
  ComYahooSquidbSqlCompiledArgumentResolver_findCollectionArgs(self);
}

- (ComYahooSquidbSqlCompiledStatement *)resolveToCompiledStatement {
  NSString *cacheKey = ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self) ? ComYahooSquidbSqlCompiledArgumentResolver_getCacheKey(self) : nil;
  jint totalArgSize = ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithCollectionArgs(self);
  jboolean largeArgMode = totalArgSize > ComYahooSquidbSqlSqlStatement_MAX_VARIABLE_NUMBER;
  return new_ComYahooSquidbSqlCompiledStatement_initWithNSString_withNSObjectArray_withBoolean_(ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlStringWithNSString_withBoolean_(self, cacheKey, largeArgMode), ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlArgumentsWithNSString_withInt_withBoolean_(self, cacheKey, totalArgSize, largeArgMode), needsValidation_);
}

- (NSString *)getCacheKey {
  return ComYahooSquidbSqlCompiledArgumentResolver_getCacheKey(self);
}

- (NSString *)resolveSqlStringWithNSString:(NSString *)cacheKey
                               withBoolean:(jboolean)largeArgMode {
  return ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlStringWithNSString_withBoolean_(self, cacheKey, largeArgMode);
}

- (void)appendCollectionVariableStringForSizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                                               withInt:(jint)size {
  ComYahooSquidbSqlCompiledArgumentResolver_appendCollectionVariableStringForSizeWithJavaLangStringBuilder_withInt_(self, builder, size);
}

- (IOSObjectArray *)resolveSqlArgumentsWithNSString:(NSString *)cacheKey
                                            withInt:(jint)totalArgSize
                                        withBoolean:(jboolean)largeArgMode {
  return ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlArgumentsWithNSString_withInt_withBoolean_(self, cacheKey, totalArgSize, largeArgMode);
}

- (IOSObjectArray *)applyArgumentResolverWithNSObjectArray:(IOSObjectArray *)args {
  return ComYahooSquidbSqlCompiledArgumentResolver_applyArgumentResolverWithNSObjectArray_(self, args);
}

- (jint)calculateArgsSizeWithCollectionArgs {
  return ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithCollectionArgs(self);
}

- (jint)calculateArgsSizeWithoutCollectionArgs {
  return ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithoutCollectionArgs(self);
}

- (void)populateCompiledArgsWithBoolean:(jboolean)largeArgMode {
  ComYahooSquidbSqlCompiledArgumentResolver_populateCompiledArgsWithBoolean_(self, largeArgMode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlCompiledStatement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComYahooSquidbSqlSqlBuilder:);
  methods[1].selector = @selector(hasCollectionArgs);
  methods[2].selector = @selector(findCollectionArgs);
  methods[3].selector = @selector(resolveToCompiledStatement);
  methods[4].selector = @selector(getCacheKey);
  methods[5].selector = @selector(resolveSqlStringWithNSString:withBoolean:);
  methods[6].selector = @selector(appendCollectionVariableStringForSizeWithJavaLangStringBuilder:withInt:);
  methods[7].selector = @selector(resolveSqlArgumentsWithNSString:withInt:withBoolean:);
  methods[8].selector = @selector(applyArgumentResolverWithNSObjectArray:);
  methods[9].selector = @selector(calculateArgsSizeWithCollectionArgs);
  methods[10].selector = @selector(calculateArgsSizeWithoutCollectionArgs);
  methods[11].selector = @selector(populateCompiledArgsWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REPLACEABLE_ARRAY_PARAM_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "compiledSql_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sqlArgs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "compileContext_", "LComYahooSquidbSqlCompileContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "needsValidation_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "collectionArgs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "CACHE_SIZE", "I", .constantValue.asInt = ComYahooSquidbSqlCompiledArgumentResolver_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "compiledSqlCache_", "LComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "argArrayCache_", "LComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
    { "compiledArgs_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComYahooSquidbSqlSqlBuilder;", "resolveSqlString", "LNSString;Z", "appendCollectionVariableStringForSize", "LJavaLangStringBuilder;I", "resolveSqlArguments", "LNSString;IZ", "applyArgumentResolver", "[LNSObject;", "populateCompiledArgs", "Z", &ComYahooSquidbSqlCompiledArgumentResolver_REPLACEABLE_ARRAY_PARAM_PATTERN, "Ljava/util/List<Ljava/lang/Object;>;", "Ljava/util/List<Ljava/util/Collection<*>;>;", "Lcom/yahoo/squidb/sql/CompiledArgumentResolver$SimpleLruCache<Ljava/lang/String;Ljava/lang/String;>;", "Lcom/yahoo/squidb/sql/CompiledArgumentResolver$SimpleLruCache<Ljava/lang/String;[Ljava/lang/Object;>;", "LComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache;" };
  static const J2ObjcClassInfo _ComYahooSquidbSqlCompiledArgumentResolver = { "CompiledArgumentResolver", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x0, 12, 10, -1, 16, -1, -1, -1 };
  return &_ComYahooSquidbSqlCompiledArgumentResolver;
}

+ (void)initialize {
  if (self == [ComYahooSquidbSqlCompiledArgumentResolver class]) {
    ComYahooSquidbSqlCompiledArgumentResolver_REPLACEABLE_ARRAY_PARAM_PATTERN = JavaUtilRegexPattern_compileWithNSString_(ComYahooSquidbSqlSqlStatement_REPLACEABLE_ARRAY_PARAMETER_REGEX);
    J2OBJC_SET_INITIALIZED(ComYahooSquidbSqlCompiledArgumentResolver)
  }
}

@end

void ComYahooSquidbSqlCompiledArgumentResolver_initWithComYahooSquidbSqlSqlBuilder_(ComYahooSquidbSqlCompiledArgumentResolver *self, ComYahooSquidbSqlSqlBuilder *builder) {
  NSObject_init(self);
  self->compiledArgs_ = nil;
  self->compiledSql_ = [((ComYahooSquidbSqlSqlBuilder *) nil_chk(builder)) getSqlString];
  self->sqlArgs_ = [builder getBoundArguments];
  self->compileContext_ = builder->compileContext_;
  self->needsValidation_ = [builder needsValidation];
  if ([((NSString *) nil_chk(self->compiledSql_)) java_contains:ComYahooSquidbSqlSqlStatement_REPLACEABLE_ARRAY_PARAMETER]) {
    self->collectionArgs_ = new_JavaUtilArrayList_init();
    ComYahooSquidbSqlCompiledArgumentResolver_findCollectionArgs(self);
    self->compiledSqlCache_ = new_ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache_initWithInt_(ComYahooSquidbSqlCompiledArgumentResolver_CACHE_SIZE);
    self->argArrayCache_ = new_ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache_initWithInt_(ComYahooSquidbSqlCompiledArgumentResolver_CACHE_SIZE);
  }
}

ComYahooSquidbSqlCompiledArgumentResolver *new_ComYahooSquidbSqlCompiledArgumentResolver_initWithComYahooSquidbSqlSqlBuilder_(ComYahooSquidbSqlSqlBuilder *builder) {
  J2OBJC_NEW_IMPL(ComYahooSquidbSqlCompiledArgumentResolver, initWithComYahooSquidbSqlSqlBuilder_, builder)
}

ComYahooSquidbSqlCompiledArgumentResolver *create_ComYahooSquidbSqlCompiledArgumentResolver_initWithComYahooSquidbSqlSqlBuilder_(ComYahooSquidbSqlSqlBuilder *builder) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbSqlCompiledArgumentResolver, initWithComYahooSquidbSqlSqlBuilder_, builder)
}

jboolean ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self) {
  return self->collectionArgs_ != nil;
}

void ComYahooSquidbSqlCompiledArgumentResolver_findCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self) {
  for (id __strong arg in nil_chk(self->sqlArgs_)) {
    if ([JavaUtilCollection_class_() isInstance:arg]) {
      [((id<JavaUtilList>) nil_chk(self->collectionArgs_)) addWithId:(id<JavaUtilCollection>) cast_check(arg, JavaUtilCollection_class_())];
    }
  }
}

NSString *ComYahooSquidbSqlCompiledArgumentResolver_getCacheKey(ComYahooSquidbSqlCompiledArgumentResolver *self) {
  JavaLangStringBuilder *cacheKey = new_JavaLangStringBuilder_init();
  if (ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self)) {
    for (id<JavaUtilCollection> __strong collection in nil_chk(self->collectionArgs_)) {
      (void) [((JavaLangStringBuilder *) nil_chk([cacheKey appendWithInt:[((id<JavaUtilCollection>) nil_chk(collection)) size]])) appendWithNSString:@":"];
    }
  }
  return [cacheKey description];
}

NSString *ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlStringWithNSString_withBoolean_(ComYahooSquidbSqlCompiledArgumentResolver *self, NSString *cacheKey, jboolean largeArgMode) {
  if (ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self)) {
    if (!largeArgMode) {
      NSString *cachedResult = [((ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *) nil_chk(self->compiledSqlCache_)) getWithId:cacheKey];
      if (cachedResult != nil) {
        return cachedResult;
      }
    }
    JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(self->compiledSql_)) java_length]);
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(ComYahooSquidbSqlCompiledArgumentResolver_REPLACEABLE_ARRAY_PARAM_PATTERN)) matcherWithJavaLangCharSequence:self->compiledSql_];
    jint index = 0;
    jint lastStringIndex = 0;
    while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
      (void) [result appendWithNSString:[self->compiledSql_ java_substring:lastStringIndex endIndex:[m start]]];
      id<JavaUtilCollection> values = [((id<JavaUtilList>) nil_chk(self->collectionArgs_)) getWithInt:index];
      if (largeArgMode) {
        ComYahooSquidbSqlSqlUtils_addInlineCollectionToSqlStringWithJavaLangStringBuilder_withComYahooSquidbSqlArgumentResolver_withJavaUtilCollection_(result, [((ComYahooSquidbSqlCompileContext *) nil_chk(self->compileContext_)) getArgumentResolver], values);
      }
      else {
        ComYahooSquidbSqlCompiledArgumentResolver_appendCollectionVariableStringForSizeWithJavaLangStringBuilder_withInt_(self, result, [((id<JavaUtilCollection>) nil_chk(values)) size]);
      }
      lastStringIndex = [m end];
      index++;
    }
    (void) [result appendWithNSString:[self->compiledSql_ java_substring:lastStringIndex endIndex:[self->compiledSql_ java_length]]];
    NSString *resultSql = [result description];
    if (!largeArgMode) {
      (void) [((ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *) nil_chk(self->compiledSqlCache_)) putWithId:cacheKey withId:resultSql];
    }
    else {
      ComYahooSquidbUtilityLogger_wWithNSString_withNSString_(ComYahooSquidbUtilityLogger_LOG_TAG, JreStrcat("$$$", @"The SQL statement \"", [((NSString *) nil_chk(resultSql)) java_substring:0 endIndex:JavaLangMath_minWithInt_withInt_(200, [resultSql java_length])], @" ...\" had too many arguments to bind, so arguments were inlined into the SQL instead. Consider revising your statement to have fewer arguments."));
    }
    return resultSql;
  }
  else {
    return self->compiledSql_;
  }
}

void ComYahooSquidbSqlCompiledArgumentResolver_appendCollectionVariableStringForSizeWithJavaLangStringBuilder_withInt_(ComYahooSquidbSqlCompiledArgumentResolver *self, JavaLangStringBuilder *builder, jint size) {
  for (jint i = 0; i < size; i++) {
    if (i > 0) {
      (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@", "];
    }
    (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:ComYahooSquidbSqlSqlStatement_REPLACEABLE_PARAMETER];
  }
}

IOSObjectArray *ComYahooSquidbSqlCompiledArgumentResolver_resolveSqlArgumentsWithNSString_withInt_withBoolean_(ComYahooSquidbSqlCompiledArgumentResolver *self, NSString *cacheKey, jint totalArgSize, jboolean largeArgMode) {
  if (ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self)) {
    IOSObjectArray *cachedResult = [((ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *) nil_chk(self->argArrayCache_)) getWithId:cacheKey];
    if (cachedResult == nil) {
      jint size = largeArgMode ? ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithoutCollectionArgs(self) : totalArgSize;
      if (self->compiledArgs_ == nil || self->compiledArgs_->size_ != size) {
        cachedResult = [IOSObjectArray newArrayWithLength:size type:NSObject_class_()];
      }
      else {
        cachedResult = self->compiledArgs_;
      }
      (void) [((ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *) nil_chk(self->argArrayCache_)) putWithId:cacheKey withId:cachedResult];
    }
    self->compiledArgs_ = cachedResult;
    ComYahooSquidbSqlCompiledArgumentResolver_populateCompiledArgsWithBoolean_(self, largeArgMode);
  }
  else {
    if (self->compiledArgs_ == nil) {
      self->compiledArgs_ = [((id<JavaUtilList>) nil_chk(self->sqlArgs_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[self->sqlArgs_ size] type:NSObject_class_()]];
    }
  }
  return ComYahooSquidbSqlCompiledArgumentResolver_applyArgumentResolverWithNSObjectArray_(self, self->compiledArgs_);
}

IOSObjectArray *ComYahooSquidbSqlCompiledArgumentResolver_applyArgumentResolverWithNSObjectArray_(ComYahooSquidbSqlCompiledArgumentResolver *self, IOSObjectArray *args) {
  id<ComYahooSquidbSqlArgumentResolver> resolver = [((ComYahooSquidbSqlCompileContext *) nil_chk(self->compileContext_)) getArgumentResolver];
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(args))->size_ type:NSObject_class_()];
  for (jint i = 0; i < args->size_; i++) {
    (void) IOSObjectArray_Set(result, i, [((id<ComYahooSquidbSqlArgumentResolver>) nil_chk(resolver)) resolveArgumentWithId:IOSObjectArray_Get(args, i)]);
  }
  return result;
}

jint ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self) {
  jint startSize = [((id<JavaUtilList>) nil_chk(self->sqlArgs_)) size];
  if (ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self)) {
    for (id<JavaUtilCollection> __strong collection in nil_chk(self->collectionArgs_)) {
      startSize += ([((id<JavaUtilCollection>) nil_chk(collection)) size] - 1);
    }
  }
  return startSize;
}

jint ComYahooSquidbSqlCompiledArgumentResolver_calculateArgsSizeWithoutCollectionArgs(ComYahooSquidbSqlCompiledArgumentResolver *self) {
  return [((id<JavaUtilList>) nil_chk(self->sqlArgs_)) size] - (ComYahooSquidbSqlCompiledArgumentResolver_hasCollectionArgs(self) ? [((id<JavaUtilList>) nil_chk(self->collectionArgs_)) size] : 0);
}

void ComYahooSquidbSqlCompiledArgumentResolver_populateCompiledArgsWithBoolean_(ComYahooSquidbSqlCompiledArgumentResolver *self, jboolean largeArgMode) {
  jint i = 0;
  for (id __strong arg in nil_chk(self->sqlArgs_)) {
    if ([JavaUtilCollection_class_() isInstance:arg]) {
      if (!largeArgMode) {
        id<JavaUtilCollection> values = (id<JavaUtilCollection>) cast_check(arg, JavaUtilCollection_class_());
        for (id __strong obj in nil_chk(values)) {
          (void) IOSObjectArray_Set(nil_chk(self->compiledArgs_), i++, obj);
        }
      }
    }
    else {
      (void) IOSObjectArray_Set(nil_chk(self->compiledArgs_), i++, arg);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlCompiledArgumentResolver)

@implementation ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache

- (instancetype)initWithInt:(jint)maxCapacity {
  ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache_initWithInt_(self, maxCapacity);
  return self;
}

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest {
  return [self size] > maxCapacity_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(removeEldestEntryWithJavaUtilMap_Entry:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxCapacity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "removeEldestEntry", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "LComYahooSquidbSqlCompiledArgumentResolver;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/LinkedHashMap<TK;TV;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache = { "SimpleLruCache", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x8, 2, 1, 4, -1, -1, 5, -1 };
  return &_ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache;
}

@end

void ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache_initWithInt_(ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *self, jint maxCapacity) {
  JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(self, 0, 0.75f, true);
  self->maxCapacity_ = maxCapacity;
}

ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *new_ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache_initWithInt_(jint maxCapacity) {
  J2OBJC_NEW_IMPL(ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache, initWithInt_, maxCapacity)
}

ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache *create_ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache_initWithInt_(jint maxCapacity) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache, initWithInt_, maxCapacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlCompiledArgumentResolver_SimpleLruCache)
