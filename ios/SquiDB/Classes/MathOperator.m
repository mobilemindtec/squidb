//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/MathOperator.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MathOperator.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

@interface ComYahooSquidbSqlMathOperator () {
 @public
  NSString *value_;
}

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbSqlMathOperator, value_, NSString *)

__attribute__((unused)) static void ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(ComYahooSquidbSqlMathOperator *self, NSString *value, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComYahooSquidbSqlMathOperator *new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(NSString *value, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(ComYahooSquidbSqlMathOperator)

ComYahooSquidbSqlMathOperator *ComYahooSquidbSqlMathOperator_values_[7];

@implementation ComYahooSquidbSqlMathOperator

+ (ComYahooSquidbSqlMathOperator *)PLUS {
  return JreEnum(ComYahooSquidbSqlMathOperator, PLUS);
}

+ (ComYahooSquidbSqlMathOperator *)MINUS {
  return JreEnum(ComYahooSquidbSqlMathOperator, MINUS);
}

+ (ComYahooSquidbSqlMathOperator *)MULT {
  return JreEnum(ComYahooSquidbSqlMathOperator, MULT);
}

+ (ComYahooSquidbSqlMathOperator *)DIVIDE {
  return JreEnum(ComYahooSquidbSqlMathOperator, DIVIDE);
}

+ (ComYahooSquidbSqlMathOperator *)MODULO {
  return JreEnum(ComYahooSquidbSqlMathOperator, MODULO);
}

+ (ComYahooSquidbSqlMathOperator *)BITWISE_AND {
  return JreEnum(ComYahooSquidbSqlMathOperator, BITWISE_AND);
}

+ (ComYahooSquidbSqlMathOperator *)BITWISE_OR {
  return JreEnum(ComYahooSquidbSqlMathOperator, BITWISE_OR);
}

- (NSString *)description {
  return value_;
}

+ (IOSObjectArray *)values {
  return ComYahooSquidbSqlMathOperator_values();
}

+ (ComYahooSquidbSqlMathOperator *)valueOfWithNSString:(NSString *)name {
  return ComYahooSquidbSqlMathOperator_valueOfWithNSString_(name);
}

- (ComYahooSquidbSqlMathOperator_Enum)toNSEnum {
  return (ComYahooSquidbSqlMathOperator_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "[LComYahooSquidbSqlMathOperator;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlMathOperator;", 0x9, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(description);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PLUS", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MINUS", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "MULT", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "DIVIDE", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "MODULO", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "BITWISE_AND", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "BITWISE_OR", "LComYahooSquidbSqlMathOperator;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "valueOf", "LNSString;", &JreEnum(ComYahooSquidbSqlMathOperator, PLUS), &JreEnum(ComYahooSquidbSqlMathOperator, MINUS), &JreEnum(ComYahooSquidbSqlMathOperator, MULT), &JreEnum(ComYahooSquidbSqlMathOperator, DIVIDE), &JreEnum(ComYahooSquidbSqlMathOperator, MODULO), &JreEnum(ComYahooSquidbSqlMathOperator, BITWISE_AND), &JreEnum(ComYahooSquidbSqlMathOperator, BITWISE_OR), "Ljava/lang/Enum<Lcom/yahoo/squidb/sql/MathOperator;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbSqlMathOperator = { "MathOperator", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x4010, 3, 8, -1, -1, -1, 10, -1 };
  return &_ComYahooSquidbSqlMathOperator;
}

+ (void)initialize {
  if (self == [ComYahooSquidbSqlMathOperator class]) {
    JreEnum(ComYahooSquidbSqlMathOperator, PLUS) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" + ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 0), 0);
    JreEnum(ComYahooSquidbSqlMathOperator, MINUS) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" - ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 1), 1);
    JreEnum(ComYahooSquidbSqlMathOperator, MULT) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" * ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 2), 2);
    JreEnum(ComYahooSquidbSqlMathOperator, DIVIDE) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" / ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 3), 3);
    JreEnum(ComYahooSquidbSqlMathOperator, MODULO) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" % ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 4), 4);
    JreEnum(ComYahooSquidbSqlMathOperator, BITWISE_AND) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" & ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 5), 5);
    JreEnum(ComYahooSquidbSqlMathOperator, BITWISE_OR) = new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(@" | ", JreEnumConstantName(ComYahooSquidbSqlMathOperator_class_(), 6), 6);
    J2OBJC_SET_INITIALIZED(ComYahooSquidbSqlMathOperator)
  }
}

@end

void ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(ComYahooSquidbSqlMathOperator *self, NSString *value, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->value_ = value;
}

ComYahooSquidbSqlMathOperator *new_ComYahooSquidbSqlMathOperator_initWithNSString_withNSString_withInt_(NSString *value, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComYahooSquidbSqlMathOperator, initWithNSString_withNSString_withInt_, value, __name, __ordinal)
}

IOSObjectArray *ComYahooSquidbSqlMathOperator_values() {
  ComYahooSquidbSqlMathOperator_initialize();
  return [IOSObjectArray arrayWithObjects:ComYahooSquidbSqlMathOperator_values_ count:7 type:ComYahooSquidbSqlMathOperator_class_()];
}

ComYahooSquidbSqlMathOperator *ComYahooSquidbSqlMathOperator_valueOfWithNSString_(NSString *name) {
  ComYahooSquidbSqlMathOperator_initialize();
  for (int i = 0; i < 7; i++) {
    ComYahooSquidbSqlMathOperator *e = ComYahooSquidbSqlMathOperator_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComYahooSquidbSqlMathOperator *ComYahooSquidbSqlMathOperator_fromOrdinal(NSUInteger ordinal) {
  ComYahooSquidbSqlMathOperator_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return ComYahooSquidbSqlMathOperator_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbSqlMathOperator)
