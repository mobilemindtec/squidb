//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Order.java
//

#include "CaseBuilder.h"
#include "CompilableWithArguments.h"
#include "Field.h"
#include "Function.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Order.h"
#include "SqlBuilder.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"

@class SquiDBOrder_OrderType;

@interface SquiDBOrder () {
 @public
  id expression_;
  SquiDBOrder_OrderType *orderType_;
}

- (instancetype)initWithId:(id)expression;

- (instancetype)initWithId:(id)expression
 withSquiDBOrder_OrderType:(SquiDBOrder_OrderType *)orderType;

@end

J2OBJC_FIELD_SETTER(SquiDBOrder, expression_, id)
J2OBJC_FIELD_SETTER(SquiDBOrder, orderType_, SquiDBOrder_OrderType *)

__attribute__((unused)) static void SquiDBOrder_initWithId_(SquiDBOrder *self, id expression);

__attribute__((unused)) static SquiDBOrder *new_SquiDBOrder_initWithId_(id expression) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBOrder *create_SquiDBOrder_initWithId_(id expression);

__attribute__((unused)) static void SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(SquiDBOrder *self, id expression, SquiDBOrder_OrderType *orderType);

__attribute__((unused)) static SquiDBOrder *new_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(id expression, SquiDBOrder_OrderType *orderType) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBOrder *create_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(id expression, SquiDBOrder_OrderType *orderType);

typedef NS_ENUM(NSUInteger, SquiDBOrder_OrderType_Enum) {
  SquiDBOrder_OrderType_Enum_DESC = 0,
  SquiDBOrder_OrderType_Enum_ASC = 1,
  SquiDBOrder_OrderType_Enum_RAW = 2,
};

@interface SquiDBOrder_OrderType : JavaLangEnum

@property (readonly, class, nonnull) SquiDBOrder_OrderType *DESC NS_SWIFT_NAME(DESC);
@property (readonly, class, nonnull) SquiDBOrder_OrderType *ASC NS_SWIFT_NAME(ASC);
@property (readonly, class, nonnull) SquiDBOrder_OrderType *RAW NS_SWIFT_NAME(RAW);
+ (IOSObjectArray *)values;

+ (SquiDBOrder_OrderType *)valueOfWithNSString:(NSString *)name;

- (SquiDBOrder_OrderType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBOrder_OrderType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBOrder_OrderType *SquiDBOrder_OrderType_values_[];

inline SquiDBOrder_OrderType *SquiDBOrder_OrderType_get_DESC(void);
J2OBJC_ENUM_CONSTANT(SquiDBOrder_OrderType, DESC)

inline SquiDBOrder_OrderType *SquiDBOrder_OrderType_get_ASC(void);
J2OBJC_ENUM_CONSTANT(SquiDBOrder_OrderType, ASC)

inline SquiDBOrder_OrderType *SquiDBOrder_OrderType_get_RAW(void);
J2OBJC_ENUM_CONSTANT(SquiDBOrder_OrderType, RAW)

__attribute__((unused)) static void SquiDBOrder_OrderType_initWithNSString_withInt_(SquiDBOrder_OrderType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static SquiDBOrder_OrderType *new_SquiDBOrder_OrderType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *SquiDBOrder_OrderType_values(void);

__attribute__((unused)) static SquiDBOrder_OrderType *SquiDBOrder_OrderType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBOrder_OrderType *SquiDBOrder_OrderType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBOrder_OrderType)

@implementation SquiDBOrder

- (instancetype)initWithId:(id)expression {
  SquiDBOrder_initWithId_(self, expression);
  return self;
}

- (instancetype)initWithId:(id)expression
 withSquiDBOrder_OrderType:(SquiDBOrder_OrderType *)orderType {
  SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(self, expression, orderType);
  return self;
}

+ (SquiDBOrder *)ascWithId:(id)expression {
  return SquiDBOrder_ascWithId_(expression);
}

+ (SquiDBOrder *)descWithId:(id)expression {
  return SquiDBOrder_descWithId_(expression);
}

+ (SquiDBOrder *)byArrayWithSquiDBField:(SquiDBField *)field
                      withNSObjectArray:(IOSObjectArray *)order {
  return SquiDBOrder_byArrayWithSquiDBField_withNSObjectArray_(field, order);
}

+ (SquiDBOrder *)fromExpressionWithNSString:(NSString *)expression {
  return SquiDBOrder_fromExpressionWithNSString_(expression);
}

- (void)appendToSqlBuilderWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                   withBoolean:(jboolean)forSqlValidation {
  if (orderType_ == JreLoadEnum(SquiDBOrder_OrderType, RAW)) {
    (void) [((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithId:expression_];
  }
  else {
    [((SquiDBSqlBuilder *) nil_chk(builder)) addValueToSqlWithId:expression_ withBoolean:forSqlValidation];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder->sql_)) appendWithNSString:@" "])) appendWithNSString:[((SquiDBOrder_OrderType *) nil_chk(orderType_)) description]];
  }
}

- (SquiDBOrder *)reverse {
  if (orderType_ == JreLoadEnum(SquiDBOrder_OrderType, ASC)) {
    return new_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(expression_, JreLoadEnum(SquiDBOrder_OrderType, DESC));
  }
  else if (orderType_ == JreLoadEnum(SquiDBOrder_OrderType, DESC)) {
    return new_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(expression_, JreLoadEnum(SquiDBOrder_OrderType, ASC));
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", @"reverse() is not currently supported for order type ", [((SquiDBOrder_OrderType *) nil_chk(orderType_)) description]));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LSquiDBOrder;", 0x9, 2, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBOrder;", 0x9, 3, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBOrder;", 0x9, 4, 5, -1, 6, -1, -1 },
    { NULL, "LSquiDBOrder;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "LSquiDBOrder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(initWithId:withSquiDBOrder_OrderType:);
  methods[2].selector = @selector(ascWithId:);
  methods[3].selector = @selector(descWithId:);
  methods[4].selector = @selector(byArrayWithSquiDBField:withNSObjectArray:);
  methods[5].selector = @selector(fromExpressionWithNSString:);
  methods[6].selector = @selector(appendToSqlBuilderWithSquiDBSqlBuilder:withBoolean:);
  methods[7].selector = @selector(reverse);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "orderType_", "LSquiDBOrder_OrderType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "LNSObject;LSquiDBOrder_OrderType;", "asc", "desc", "byArray", "LSquiDBField;[LNSObject;", "<T:Ljava/lang/Object;>(Lcom/yahoo/squidb/sql/Field<TT;>;[TT;)Lcom/yahoo/squidb/sql/Order;", "fromExpression", "LNSString;", "appendToSqlBuilder", "LSquiDBSqlBuilder;Z", "LSquiDBOrder_OrderType;" };
  static const J2ObjcClassInfo _SquiDBOrder = { "Order", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, 11, -1, -1, -1 };
  return &_SquiDBOrder;
}

@end

void SquiDBOrder_initWithId_(SquiDBOrder *self, id expression) {
  SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(self, expression, JreLoadEnum(SquiDBOrder_OrderType, ASC));
}

SquiDBOrder *new_SquiDBOrder_initWithId_(id expression) {
  J2OBJC_NEW_IMPL(SquiDBOrder, initWithId_, expression)
}

SquiDBOrder *create_SquiDBOrder_initWithId_(id expression) {
  J2OBJC_CREATE_IMPL(SquiDBOrder, initWithId_, expression)
}

void SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(SquiDBOrder *self, id expression, SquiDBOrder_OrderType *orderType) {
  SquiDBCompilableWithArguments_initPackagePrivate(self);
  self->expression_ = expression;
  self->orderType_ = orderType;
}

SquiDBOrder *new_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(id expression, SquiDBOrder_OrderType *orderType) {
  J2OBJC_NEW_IMPL(SquiDBOrder, initWithId_withSquiDBOrder_OrderType_, expression, orderType)
}

SquiDBOrder *create_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(id expression, SquiDBOrder_OrderType *orderType) {
  J2OBJC_CREATE_IMPL(SquiDBOrder, initWithId_withSquiDBOrder_OrderType_, expression, orderType)
}

SquiDBOrder *SquiDBOrder_ascWithId_(id expression) {
  SquiDBOrder_initialize();
  return new_SquiDBOrder_initWithId_(expression);
}

SquiDBOrder *SquiDBOrder_descWithId_(id expression) {
  SquiDBOrder_initialize();
  return new_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(expression, JreLoadEnum(SquiDBOrder_OrderType, DESC));
}

SquiDBOrder *SquiDBOrder_byArrayWithSquiDBField_withNSObjectArray_(SquiDBField *field, IOSObjectArray *order) {
  SquiDBOrder_initialize();
  if (order == nil || order->size_ == 0) {
    return SquiDBOrder_ascWithId_(@"0");
  }
  SquiDBCaseBuilder *caseBuilder = SquiDBFunction_caseExprWithId_(field);
  for (jint i = 0; i < order->size_; i++) {
    (void) [((SquiDBCaseBuilder *) nil_chk(caseBuilder)) whenWithId:IOSObjectArray_Get(order, i) withId:JavaLangInteger_valueOfWithInt_(i)];
  }
  (void) [((SquiDBCaseBuilder *) nil_chk(caseBuilder)) elseExprWithId:JavaLangInteger_valueOfWithInt_(order->size_)];
  return SquiDBOrder_ascWithId_([caseBuilder end]);
}

SquiDBOrder *SquiDBOrder_fromExpressionWithNSString_(NSString *expression) {
  SquiDBOrder_initialize();
  return new_SquiDBOrder_initWithId_withSquiDBOrder_OrderType_(expression, JreLoadEnum(SquiDBOrder_OrderType, RAW));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBOrder)

J2OBJC_NAME_MAPPING(SquiDBOrder, "com.yahoo.squidb.sql", "SquiDB")

J2OBJC_INITIALIZED_DEFN(SquiDBOrder_OrderType)

SquiDBOrder_OrderType *SquiDBOrder_OrderType_values_[3];

@implementation SquiDBOrder_OrderType

+ (SquiDBOrder_OrderType *)DESC {
  return JreEnum(SquiDBOrder_OrderType, DESC);
}

+ (SquiDBOrder_OrderType *)ASC {
  return JreEnum(SquiDBOrder_OrderType, ASC);
}

+ (SquiDBOrder_OrderType *)RAW {
  return JreEnum(SquiDBOrder_OrderType, RAW);
}

+ (IOSObjectArray *)values {
  return SquiDBOrder_OrderType_values();
}

+ (SquiDBOrder_OrderType *)valueOfWithNSString:(NSString *)name {
  return SquiDBOrder_OrderType_valueOfWithNSString_(name);
}

- (SquiDBOrder_OrderType_Enum)toNSEnum {
  return (SquiDBOrder_OrderType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LSquiDBOrder_OrderType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBOrder_OrderType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DESC", "LSquiDBOrder_OrderType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ASC", "LSquiDBOrder_OrderType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "RAW", "LSquiDBOrder_OrderType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(SquiDBOrder_OrderType, DESC), &JreEnum(SquiDBOrder_OrderType, ASC), &JreEnum(SquiDBOrder_OrderType, RAW), "LSquiDBOrder;", "Ljava/lang/Enum<Lcom/yahoo/squidb/sql/Order$OrderType;>;" };
  static const J2ObjcClassInfo _SquiDBOrder_OrderType = { "OrderType", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_SquiDBOrder_OrderType;
}

+ (void)initialize {
  if (self == [SquiDBOrder_OrderType class]) {
    JreEnum(SquiDBOrder_OrderType, DESC) = new_SquiDBOrder_OrderType_initWithNSString_withInt_(JreEnumConstantName(SquiDBOrder_OrderType_class_(), 0), 0);
    JreEnum(SquiDBOrder_OrderType, ASC) = new_SquiDBOrder_OrderType_initWithNSString_withInt_(JreEnumConstantName(SquiDBOrder_OrderType_class_(), 1), 1);
    JreEnum(SquiDBOrder_OrderType, RAW) = new_SquiDBOrder_OrderType_initWithNSString_withInt_(JreEnumConstantName(SquiDBOrder_OrderType_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(SquiDBOrder_OrderType)
  }
}

@end

void SquiDBOrder_OrderType_initWithNSString_withInt_(SquiDBOrder_OrderType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

SquiDBOrder_OrderType *new_SquiDBOrder_OrderType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SquiDBOrder_OrderType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *SquiDBOrder_OrderType_values() {
  SquiDBOrder_OrderType_initialize();
  return [IOSObjectArray arrayWithObjects:SquiDBOrder_OrderType_values_ count:3 type:SquiDBOrder_OrderType_class_()];
}

SquiDBOrder_OrderType *SquiDBOrder_OrderType_valueOfWithNSString_(NSString *name) {
  SquiDBOrder_OrderType_initialize();
  for (int i = 0; i < 3; i++) {
    SquiDBOrder_OrderType *e = SquiDBOrder_OrderType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SquiDBOrder_OrderType *SquiDBOrder_OrderType_fromOrdinal(NSUInteger ordinal) {
  SquiDBOrder_OrderType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return SquiDBOrder_OrderType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBOrder_OrderType)
