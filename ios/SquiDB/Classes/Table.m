//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Table.java
//

#include "CompileContext.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "Index.h"
#include "J2ObjC_source.h"
#include "Property.h"
#include "SqlTable.h"
#include "SqlUtils.h"
#include "Table.h"
#include "TableModel.h"
#include "java/lang/Deprecated.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"

@interface SquiDBTable () {
 @public
  NSString *tableConstraint_;
}

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName
                    withNSString:(NSString *)tableConstraint
                    withNSString:(NSString *)alias;

@end

J2OBJC_FIELD_SETTER(SquiDBTable, tableConstraint_, NSString *)

__attribute__((unused)) static void SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(SquiDBTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint, NSString *alias);

__attribute__((unused)) static SquiDBTable *new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint, NSString *alias) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBTable *create_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint, NSString *alias);

__attribute__((unused)) static IOSObjectArray *SquiDBTable__Annotations$0(void);

@implementation SquiDBTable

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_(self, modelClass, properties, name);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(self, modelClass, properties, name, databaseName);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName
                    withNSString:(NSString *)tableConstraint {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, tableConstraint);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName
                    withNSString:(NSString *)tableConstraint
                    withNSString:(NSString *)alias {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, tableConstraint, alias);
  return self;
}

- (SquiDBTable *)qualifiedFromDatabaseWithNSString:(NSString *)databaseName {
  SquiDBTable *result = new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(modelClass_, properties_, [self getExpression], databaseName, tableConstraint_, alias_);
  result->rowidProperty_ = rowidProperty_;
  return result;
}

- (SquiDBTable *)asWithNSString:(NSString *)newAlias {
  SquiDBTable *result = (SquiDBTable *) cast_chk([super asWithNSString:newAlias], [SquiDBTable class]);
  ((SquiDBTable *) nil_chk(result))->rowidProperty_ = rowidProperty_ == nil ? nil : ((SquiDBProperty_LongProperty *) [result qualifyFieldWithSquiDBField:rowidProperty_]);
  return result;
}

- (SquiDBTable *)asNewAliasWithPropertiesArrayWithNSString:(NSString *)newAlias
                                   withSquiDBPropertyArray:(IOSObjectArray *)newProperties {
  return new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(modelClass_, newProperties, [self getExpression], qualifier_, tableConstraint_, newAlias);
}

- (SquiDBIndex *)indexWithNSString:(NSString *)name
           withSquiDBPropertyArray:(IOSObjectArray *)columns {
  return new_SquiDBIndex_initWithNSString_withSquiDBTable_withBoolean_withSquiDBPropertyArray_(name, self, false, columns);
}

- (SquiDBIndex *)uniqueIndexWithNSString:(NSString *)name
                 withSquiDBPropertyArray:(IOSObjectArray *)columns {
  return new_SquiDBIndex_initWithNSString_withSquiDBTable_withBoolean_withSquiDBPropertyArray_(name, self, true, columns);
}

- (NSString *)getTableConstraint {
  return tableConstraint_;
}

- (NSString *)description {
  return JreStrcat("$$$$$", [super description], @" ModelClass=", [((IOSClass *) nil_chk(modelClass_)) getSimpleName], @" TableConstraint=", tableConstraint_);
}

- (void)appendCreateTableSqlWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                  withSquiDBProperty_PropertyVisitor:(id<SquiDBProperty_PropertyVisitor>)propertyVisitor {
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"CREATE TABLE IF NOT EXISTS "])) appendWithNSString:[self getExpression]])) appendWithChar:'('];
  jboolean needsComma = false;
  {
    IOSObjectArray *a__ = properties_;
    SquiDBProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    SquiDBProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      SquiDBProperty *property = *b__++;
      if ([((NSString *) nil_chk(SquiDBTableModel_ROWID)) isEqual:[((SquiDBProperty *) nil_chk(property)) getExpression]]) {
        continue;
      }
      if (needsComma) {
        (void) [sql appendWithNSString:@", "];
      }
      (void) [property acceptWithSquiDBProperty_PropertyVisitor:propertyVisitor withId:sql];
      needsComma = true;
    }
  }
  if (!SquiDBSqlUtils_isEmptyWithNSString_([self getTableConstraint])) {
    (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@", "])) appendWithNSString:[self getTableConstraint]];
  }
  (void) [sql appendWithChar:')'];
}

- (void)setRowIdPropertyWithSquiDBProperty_LongProperty:(SquiDBProperty_LongProperty *)rowidProperty {
  if (self->rowidProperty_ != nil) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Can't call setRowIdProperty on a Table more than once");
  }
  self->rowidProperty_ = rowidProperty;
}

- (SquiDBProperty_LongProperty *)getRowIdProperty {
  if (rowidProperty_ == nil) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$", @"Table ", [self getExpression], @" has no id property defined"));
  }
  return rowidProperty_;
}

- (SquiDBProperty_LongProperty *)getIdProperty {
  return [self getRowIdProperty];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, -1, 7, -1, -1 },
    { NULL, "LSquiDBTable;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LSquiDBTable;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LSquiDBTable;", 0x4, 11, 12, -1, 13, -1, -1 },
    { NULL, "LSquiDBIndex;", 0x81, 14, 12, -1, 15, -1, -1 },
    { NULL, "LSquiDBIndex;", 0x81, 16, 12, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LSquiDBProperty_LongProperty;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBProperty_LongProperty;", 0x1, -1, -1, -1, -1, 23, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withSquiDBPropertyArray:withNSString:);
  methods[1].selector = @selector(initWithIOSClass:withSquiDBPropertyArray:withNSString:withNSString:);
  methods[2].selector = @selector(initWithIOSClass:withSquiDBPropertyArray:withNSString:withNSString:withNSString:);
  methods[3].selector = @selector(initWithIOSClass:withSquiDBPropertyArray:withNSString:withNSString:withNSString:withNSString:);
  methods[4].selector = @selector(qualifiedFromDatabaseWithNSString:);
  methods[5].selector = @selector(asWithNSString:);
  methods[6].selector = @selector(asNewAliasWithPropertiesArrayWithNSString:withSquiDBPropertyArray:);
  methods[7].selector = @selector(indexWithNSString:withSquiDBPropertyArray:);
  methods[8].selector = @selector(uniqueIndexWithNSString:withSquiDBPropertyArray:);
  methods[9].selector = @selector(getTableConstraint);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(appendCreateTableSqlWithSquiDBCompileContext:withJavaLangStringBuilder:withSquiDBProperty_PropertyVisitor:);
  methods[12].selector = @selector(setRowIdPropertyWithSquiDBProperty_LongProperty:);
  methods[13].selector = @selector(getRowIdProperty);
  methods[14].selector = @selector(getIdProperty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tableConstraint_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rowidProperty_", "LSquiDBProperty_LongProperty;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;[LSquiDBProperty;LNSString;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;[Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/String;)V", "LIOSClass;[LSquiDBProperty;LNSString;LNSString;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;[Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/String;Ljava/lang/String;)V", "LIOSClass;[LSquiDBProperty;LNSString;LNSString;LNSString;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;[Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "LIOSClass;[LSquiDBProperty;LNSString;LNSString;LNSString;LNSString;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;[Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "qualifiedFromDatabase", "LNSString;", "as", "asNewAliasWithPropertiesArray", "LNSString;[LSquiDBProperty;", "(Ljava/lang/String;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/sql/Table;", "index", "(Ljava/lang/String;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/sql/Index;", "uniqueIndex", "toString", "appendCreateTableSql", "LSquiDBCompileContext;LJavaLangStringBuilder;LSquiDBProperty_PropertyVisitor;", "(Lcom/yahoo/squidb/sql/CompileContext;Ljava/lang/StringBuilder;Lcom/yahoo/squidb/sql/Property$PropertyVisitor<Ljava/lang/Void;Ljava/lang/StringBuilder;>;)V", "setRowIdProperty", "LSquiDBProperty_LongProperty;", (void *)&SquiDBTable__Annotations$0, "Lcom/yahoo/squidb/sql/SqlTable<Lcom/yahoo/squidb/data/TableModel;>;" };
  static const J2ObjcClassInfo _SquiDBTable = { "Table", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, -1, -1, 24, -1 };
  return &_SquiDBTable;
}

@end

void SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_(SquiDBTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name) {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(self, modelClass, properties, name, nil);
}

SquiDBTable *new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name) {
  J2OBJC_NEW_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_, modelClass, properties, name)
}

SquiDBTable *create_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name) {
  J2OBJC_CREATE_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_, modelClass, properties, name)
}

void SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(SquiDBTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName) {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, nil, nil);
}

SquiDBTable *new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName) {
  J2OBJC_NEW_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_, modelClass, properties, name, databaseName)
}

SquiDBTable *create_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName) {
  J2OBJC_CREATE_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_, modelClass, properties, name, databaseName)
}

void SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(SquiDBTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint) {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, tableConstraint, nil);
}

SquiDBTable *new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint) {
  J2OBJC_NEW_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, tableConstraint)
}

SquiDBTable *create_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint) {
  J2OBJC_CREATE_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, tableConstraint)
}

void SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(SquiDBTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint, NSString *alias) {
  SquiDBSqlTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(self, modelClass, properties, name, databaseName);
  self->tableConstraint_ = tableConstraint;
  self->alias_ = alias;
}

SquiDBTable *new_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint, NSString *alias) {
  J2OBJC_NEW_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, tableConstraint, alias)
}

SquiDBTable *create_SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *tableConstraint, NSString *alias) {
  J2OBJC_CREATE_IMPL(SquiDBTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, tableConstraint, alias)
}

IOSObjectArray *SquiDBTable__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTable)

J2OBJC_NAME_MAPPING(SquiDBTable, "com.yahoo.squidb.sql", "SquiDB")
