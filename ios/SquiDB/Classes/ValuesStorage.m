//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/ValuesStorage.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ValuesStorage.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Set.h"

@implementation ComYahooSquidbDataValuesStorage

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataValuesStorage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)containsKeyWithNSString:(NSString *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getWithNSString:(NSString *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)removeWithNSString:(NSString *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)putNullWithNSString:(NSString *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangBoolean:(JavaLangBoolean *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangByte:(JavaLangByte *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
     withJavaLangDouble:(JavaLangDouble *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangFloat:(JavaLangFloat *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
    withJavaLangInteger:(JavaLangInteger *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
       withJavaLangLong:(JavaLangLong *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
      withJavaLangShort:(JavaLangShort *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putWithNSString:(NSString *)key
          withByteArray:(IOSByteArray *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putAllWithComYahooSquidbDataValuesStorage:(ComYahooSquidbDataValuesStorage *)other {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaUtilSet>)valueSet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilSet>)keySet {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)putWithNSString:(NSString *)key
                 withId:(id)value
            withBoolean:(jboolean)errorOnFail {
  if (value == nil) {
    [self putNullWithNSString:key];
  }
  else if ([value isKindOfClass:[JavaLangBoolean class]]) {
    [self putWithNSString:key withJavaLangBoolean:(JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class])];
  }
  else if ([value isKindOfClass:[JavaLangByte class]]) {
    [self putWithNSString:key withJavaLangByte:(JavaLangByte *) cast_chk(value, [JavaLangByte class])];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]]) {
    [self putWithNSString:key withJavaLangDouble:(JavaLangDouble *) cast_chk(value, [JavaLangDouble class])];
  }
  else if ([value isKindOfClass:[JavaLangFloat class]]) {
    [self putWithNSString:key withJavaLangFloat:(JavaLangFloat *) cast_chk(value, [JavaLangFloat class])];
  }
  else if ([value isKindOfClass:[JavaLangInteger class]]) {
    [self putWithNSString:key withJavaLangInteger:(JavaLangInteger *) cast_chk(value, [JavaLangInteger class])];
  }
  else if ([value isKindOfClass:[JavaLangLong class]]) {
    [self putWithNSString:key withJavaLangLong:(JavaLangLong *) cast_chk(value, [JavaLangLong class])];
  }
  else if ([value isKindOfClass:[JavaLangShort class]]) {
    [self putWithNSString:key withJavaLangShort:(JavaLangShort *) cast_chk(value, [JavaLangShort class])];
  }
  else if ([value isKindOfClass:[NSString class]]) {
    [self putWithNSString:key withNSString:(NSString *) cast_chk(value, [NSString class])];
  }
  else if ([value isKindOfClass:[IOSByteArray class]]) {
    [self putWithNSString:key withByteArray:(IOSByteArray *) cast_chk(value, [IOSByteArray class])];
  }
  else if (errorOnFail) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Could not handle type ", [value java_getClass]));
  }
}

- (jboolean)isEqual:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x401, -1, -1, -1, 17, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x401, -1, -1, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 5, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 22, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(containsKeyWithNSString:);
  methods[2].selector = @selector(getWithNSString:);
  methods[3].selector = @selector(removeWithNSString:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(putNullWithNSString:);
  methods[6].selector = @selector(putWithNSString:withJavaLangBoolean:);
  methods[7].selector = @selector(putWithNSString:withJavaLangByte:);
  methods[8].selector = @selector(putWithNSString:withJavaLangDouble:);
  methods[9].selector = @selector(putWithNSString:withJavaLangFloat:);
  methods[10].selector = @selector(putWithNSString:withJavaLangInteger:);
  methods[11].selector = @selector(putWithNSString:withJavaLangLong:);
  methods[12].selector = @selector(putWithNSString:withJavaLangShort:);
  methods[13].selector = @selector(putWithNSString:withNSString:);
  methods[14].selector = @selector(putWithNSString:withByteArray:);
  methods[15].selector = @selector(putAllWithComYahooSquidbDataValuesStorage:);
  methods[16].selector = @selector(valueSet);
  methods[17].selector = @selector(keySet);
  methods[18].selector = @selector(putWithNSString:withId:withBoolean:);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "containsKey", "LNSString;", "get", "remove", "putNull", "put", "LNSString;LJavaLangBoolean;", "LNSString;LJavaLangByte;", "LNSString;LJavaLangDouble;", "LNSString;LJavaLangFloat;", "LNSString;LJavaLangInteger;", "LNSString;LJavaLangLong;", "LNSString;LJavaLangShort;", "LNSString;LNSString;", "LNSString;[B", "putAll", "LComYahooSquidbDataValuesStorage;", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "LNSString;LNSObject;Z", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _ComYahooSquidbDataValuesStorage = { "ValuesStorage", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0x401, 21, 0, -1, -1, -1, -1, -1 };
  return &_ComYahooSquidbDataValuesStorage;
}

@end

void ComYahooSquidbDataValuesStorage_init(ComYahooSquidbDataValuesStorage *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataValuesStorage)
