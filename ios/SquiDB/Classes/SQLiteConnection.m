//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SQLiteConnection.java
//

#include "CloseGuard.h"
#include "CursorWindow.h"
#include "DatabaseUtils.h"
#include "ICursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "LruCache.h"
#include "Printer.h"
#include "SQLiteBindOrColumnIndexOutOfRangeException.h"
#include "SQLiteConnection.h"
#include "SQLiteConnectionPool.h"
#include "SQLiteCustomFunction.h"
#include "SQLiteDatabase.h"
#include "SQLiteDatabaseConfiguration.h"
#include "SQLiteDatabaseLockedException.h"
#include "SQLiteDebug.h"
#include "SQLiteException.h"
#include "SQLiteGlobal.h"
#include "SQLiteStatementInfo.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#import "SQLiteConnectionNative.h"
#import "java/lang/UnsupportedOperationException.h"

@class SquiDBSQLiteConnection_Operation;
@class SquiDBSQLiteConnection_OperationLog;
@class SquiDBSQLiteConnection_PreparedStatement;
@class SquiDBSQLiteConnection_PreparedStatementCache;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface SquiDBSQLiteConnection () {
 @public
  SquiDBCloseGuard *mCloseGuard_;
  SquiDBSQLiteConnectionPool *mPool_;
  SquiDBSQLiteDatabaseConfiguration *mConfiguration_;
  jint mConnectionId_;
  jboolean mIsPrimaryConnection_;
  jboolean mIsReadOnlyConnection_;
  SquiDBSQLiteConnection_PreparedStatementCache *mPreparedStatementCache_;
  SquiDBSQLiteConnection_PreparedStatement *mPreparedStatementPool_;
  SquiDBSQLiteConnection_OperationLog *mRecentOperations_;
  id mConnectionPtr_;
  jboolean mOnlyAllowReadOnlyOperations_;
  jint mCancellationSignalAttachCount_;
}

+ (id)nativeOpenWithNSString:(NSString *)path
                     withInt:(jint)openFlags
                withNSString:(NSString *)label
                 withBoolean:(jboolean)enableTrace
                 withBoolean:(jboolean)enableProfile;

+ (void)nativeCloseWithId:(id)connectionPtr;

+ (void)nativeRegisterCustomFunctionWithId:(id)connectionPtr
            withSquiDBSQLiteCustomFunction:(SquiDBSQLiteCustomFunction *)function;

+ (id)nativePrepareStatementWithId:(id)connectionPtr
                      withNSString:(NSString *)sql;

+ (void)nativeFinalizeStatementWithId:(id)connectionPtr
                               withId:(id)statementPtr;

+ (jint)nativeGetParameterCountWithId:(id)connectionPtr
                               withId:(id)statementPtr;

+ (jboolean)nativeIsReadOnlyWithId:(id)connectionPtr
                            withId:(id)statementPtr;

+ (jint)nativeGetColumnCountWithId:(id)connectionPtr
                            withId:(id)statementPtr;

+ (NSString *)nativeGetColumnNameWithId:(id)connectionPtr
                                 withId:(id)statementPtr
                                withInt:(jint)index;

+ (void)nativeBindNullWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index;

+ (void)nativeBindLongWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
                    withLong:(jlong)value;

+ (void)nativeBindDoubleWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                    withDouble:(jdouble)value;

+ (void)nativeBindStringWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                  withNSString:(NSString *)value;

+ (void)nativeBindBlobWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
               withByteArray:(IOSByteArray *)value;

+ (void)nativeResetStatementAndClearBindingsWithId:(id)connectionPtr
                                            withId:(id)statementPtr;

+ (void)nativeExecuteWithId:(id)connectionPtr
                     withId:(id)statementPtr;

+ (jlong)nativeExecuteForLongWithId:(id)connectionPtr
                             withId:(id)statementPtr;

+ (NSString *)nativeExecuteForStringWithId:(id)connectionPtr
                                    withId:(id)statementPtr;

+ (jint)nativeExecuteForChangedRowCountWithId:(id)connectionPtr
                                       withId:(id)statementPtr;

+ (jlong)nativeExecuteForLastInsertedRowIdWithId:(id)connectionPtr
                                          withId:(id)statementPtr;

+ (jlong)nativeExecuteForCursorWindowWithId:(id)connectionPtr
                                     withId:(id)statementPtr
                                     withId:(id)windowPtr
                                    withInt:(jint)startPos
                                    withInt:(jint)requiredPos
                                withBoolean:(jboolean)countAllRows;

+ (jint)nativeGetDbLookasideWithId:(id)connectionPtr;

- (instancetype)initWithSquiDBSQLiteConnectionPool:(SquiDBSQLiteConnectionPool *)pool
             withSquiDBSQLiteDatabaseConfiguration:(SquiDBSQLiteDatabaseConfiguration *)configuration
                                           withInt:(jint)connectionId
                                       withBoolean:(jboolean)primaryConnection;

- (void)open;

- (void)disposeWithBoolean:(jboolean)finalized;

- (void)setPageSize;

- (void)setAutoCheckpointInterval;

- (void)setJournalSizeLimit;

- (void)setForeignKeyModeFromConfiguration;

- (void)setWalModeFromConfiguration;

- (void)setSyncModeWithNSString:(NSString *)newValue;

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value;

- (void)setJournalModeWithNSString:(NSString *)newValue;

- (void)setLocaleFromConfiguration;

- (SquiDBSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql;

- (void)releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement;

- (void)finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement;

- (void)bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement
                                                withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement;

+ (jboolean)isCacheableWithInt:(jint)statementType;

- (SquiDBSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                  withLong:(jlong)pageCount
                                                  withLong:(jlong)pageSize;

- (SquiDBSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                           withId:(id)statementPtr
                                                                          withInt:(jint)numParameters
                                                                          withInt:(jint)type
                                                                      withBoolean:(jboolean)readOnly;

- (void)recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement;

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql;

@end

J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mCloseGuard_, SquiDBCloseGuard *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mPool_, SquiDBSQLiteConnectionPool *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mConfiguration_, SquiDBSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mPreparedStatementCache_, SquiDBSQLiteConnection_PreparedStatementCache *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mPreparedStatementPool_, SquiDBSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mRecentOperations_, SquiDBSQLiteConnection_OperationLog *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection, mConnectionPtr_, id)

inline NSString *SquiDBSQLiteConnection_get_TAG(void);
static NSString *SquiDBSQLiteConnection_TAG = @"SQLiteConnection";
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteConnection, TAG, NSString *)

inline jboolean SquiDBSQLiteConnection_get_DEBUG(void);
#define SquiDBSQLiteConnection_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteConnection, DEBUG, jboolean)

inline IOSObjectArray *SquiDBSQLiteConnection_get_EMPTY_STRING_ARRAY(void);
static IOSObjectArray *SquiDBSQLiteConnection_EMPTY_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteConnection, EMPTY_STRING_ARRAY, IOSObjectArray *)

inline IOSByteArray *SquiDBSQLiteConnection_get_EMPTY_BYTE_ARRAY(void);
static IOSByteArray *SquiDBSQLiteConnection_EMPTY_BYTE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteConnection, EMPTY_BYTE_ARRAY, IOSByteArray *)

inline JavaUtilRegexPattern *SquiDBSQLiteConnection_get_TRIM_SQL_PATTERN(void);
static JavaUtilRegexPattern *SquiDBSQLiteConnection_TRIM_SQL_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteConnection, TRIM_SQL_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static id SquiDBSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeCloseWithId_(id connectionPtr);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeRegisterCustomFunctionWithId_withSquiDBSQLiteCustomFunction_(id connectionPtr, SquiDBSQLiteCustomFunction *function);

__attribute__((unused)) static id SquiDBSQLiteConnection_nativePrepareStatementWithId_withNSString_(id connectionPtr, NSString *sql);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeFinalizeStatementWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jint SquiDBSQLiteConnection_nativeGetParameterCountWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jboolean SquiDBSQLiteConnection_nativeIsReadOnlyWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jint SquiDBSQLiteConnection_nativeGetColumnCountWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static NSString *SquiDBSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeBindNullWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(id connectionPtr, id statementPtr, jint index, jlong value);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(id connectionPtr, id statementPtr, jint index, jdouble value);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(id connectionPtr, id statementPtr, jint index, NSString *value);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(id connectionPtr, id statementPtr, jint index, IOSByteArray *value);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static void SquiDBSQLiteConnection_nativeExecuteWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jlong SquiDBSQLiteConnection_nativeExecuteForLongWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static NSString *SquiDBSQLiteConnection_nativeExecuteForStringWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jint SquiDBSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jlong SquiDBSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(id connectionPtr, id statementPtr);

__attribute__((unused)) static jlong SquiDBSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(id connectionPtr, id statementPtr, id windowPtr, jint startPos, jint requiredPos, jboolean countAllRows);

__attribute__((unused)) static jint SquiDBSQLiteConnection_nativeGetDbLookasideWithId_(id connectionPtr);

__attribute__((unused)) static void SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static SquiDBSQLiteConnection *new_SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteConnection *create_SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection);

__attribute__((unused)) static void SquiDBSQLiteConnection_open(SquiDBSQLiteConnection *self);

__attribute__((unused)) static void SquiDBSQLiteConnection_disposeWithBoolean_(SquiDBSQLiteConnection *self, jboolean finalized);

__attribute__((unused)) static void SquiDBSQLiteConnection_setPageSize(SquiDBSQLiteConnection *self);

__attribute__((unused)) static void SquiDBSQLiteConnection_setAutoCheckpointInterval(SquiDBSQLiteConnection *self);

__attribute__((unused)) static void SquiDBSQLiteConnection_setJournalSizeLimit(SquiDBSQLiteConnection *self);

__attribute__((unused)) static void SquiDBSQLiteConnection_setForeignKeyModeFromConfiguration(SquiDBSQLiteConnection *self);

__attribute__((unused)) static void SquiDBSQLiteConnection_setWalModeFromConfiguration(SquiDBSQLiteConnection *self);

__attribute__((unused)) static void SquiDBSQLiteConnection_setSyncModeWithNSString_(SquiDBSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static NSString *SquiDBSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value);

__attribute__((unused)) static void SquiDBSQLiteConnection_setJournalModeWithNSString_(SquiDBSQLiteConnection *self, NSString *newValue);

__attribute__((unused)) static void SquiDBSQLiteConnection_setLocaleFromConfiguration(SquiDBSQLiteConnection *self);

__attribute__((unused)) static SquiDBSQLiteConnection_PreparedStatement *SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(SquiDBSQLiteConnection *self, NSString *sql);

__attribute__((unused)) static void SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void SquiDBSQLiteConnection_finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static void SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs);

__attribute__((unused)) static void SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static jboolean SquiDBSQLiteConnection_isCacheableWithInt_(jint statementType);

__attribute__((unused)) static SquiDBSQLiteDebug_DbStats *SquiDBSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(SquiDBSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize);

__attribute__((unused)) static SquiDBSQLiteConnection_PreparedStatement *SquiDBSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(SquiDBSQLiteConnection *self, NSString *sql, id statementPtr, jint numParameters, jint type, jboolean readOnly);

__attribute__((unused)) static void SquiDBSQLiteConnection_recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement);

__attribute__((unused)) static NSString *SquiDBSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql);

@interface SquiDBSQLiteConnection_PreparedStatement : NSObject {
 @public
  SquiDBSQLiteConnection_PreparedStatement *mPoolNext_;
  NSString *mSql_;
  id mStatementPtr_;
  jint mNumParameters_;
  jint mType_;
  jboolean mReadOnly_;
  jboolean mInCache_;
  jboolean mInUse_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSQLiteConnection_PreparedStatement)

J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_PreparedStatement, mPoolNext_, SquiDBSQLiteConnection_PreparedStatement *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_PreparedStatement, mSql_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_PreparedStatement, mStatementPtr_, id)

__attribute__((unused)) static void SquiDBSQLiteConnection_PreparedStatement_init(SquiDBSQLiteConnection_PreparedStatement *self);

__attribute__((unused)) static SquiDBSQLiteConnection_PreparedStatement *new_SquiDBSQLiteConnection_PreparedStatement_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteConnection_PreparedStatement *create_SquiDBSQLiteConnection_PreparedStatement_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSQLiteConnection_PreparedStatement)

@interface SquiDBSQLiteConnection_PreparedStatementCache : SquiDBLruCache {
 @public
  SquiDBSQLiteConnection *this$0_;
}

- (instancetype)initWithSquiDBSQLiteConnection:(SquiDBSQLiteConnection *)outer$
                                       withInt:(jint)size;

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(SquiDBSQLiteConnection_PreparedStatement *)oldValue
                         withId:(SquiDBSQLiteConnection_PreparedStatement *)newValue;

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer;

- (SquiDBSQLiteConnection_PreparedStatement *)getWithId:(NSString *)arg0;

- (SquiDBSQLiteConnection_PreparedStatement *)createWithId:(NSString *)arg0;

- (SquiDBSQLiteConnection_PreparedStatement *)removeWithId:(NSString *)arg0;

- (SquiDBSQLiteConnection_PreparedStatement *)putWithId:(NSString *)arg0
                                                 withId:(SquiDBSQLiteConnection_PreparedStatement *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSQLiteConnection_PreparedStatementCache)

__attribute__((unused)) static void SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(SquiDBSQLiteConnection_PreparedStatementCache *self, SquiDBSQLiteConnection *outer$, jint size);

__attribute__((unused)) static SquiDBSQLiteConnection_PreparedStatementCache *new_SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(SquiDBSQLiteConnection *outer$, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteConnection_PreparedStatementCache *create_SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(SquiDBSQLiteConnection *outer$, jint size);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSQLiteConnection_PreparedStatementCache)

@interface SquiDBSQLiteConnection_OperationLog : NSObject {
 @public
  IOSObjectArray *mOperations_;
  jint mIndex_;
  jint mGeneration_;
}

- (instancetype)init;

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex;

- (void)endOperationWithInt:(jint)cookie;

- (jboolean)endOperationDeferLogWithInt:(jint)cookie;

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail;

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie;

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail;

- (jint)newOperationCookieLockedWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

- (SquiDBSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie;

- (NSString *)describeCurrentOperation;

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                  withBoolean:(jboolean)verbose;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSQLiteConnection_OperationLog)

J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_OperationLog, mOperations_, IOSObjectArray *)

inline jint SquiDBSQLiteConnection_OperationLog_get_MAX_RECENT_OPERATIONS(void);
#define SquiDBSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS 20
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteConnection_OperationLog, MAX_RECENT_OPERATIONS, jint)

inline jint SquiDBSQLiteConnection_OperationLog_get_COOKIE_GENERATION_SHIFT(void);
#define SquiDBSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT 8
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteConnection_OperationLog, COOKIE_GENERATION_SHIFT, jint)

inline jint SquiDBSQLiteConnection_OperationLog_get_COOKIE_INDEX_MASK(void);
#define SquiDBSQLiteConnection_OperationLog_COOKIE_INDEX_MASK 255
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteConnection_OperationLog, COOKIE_INDEX_MASK, jint)

__attribute__((unused)) static void SquiDBSQLiteConnection_OperationLog_init(SquiDBSQLiteConnection_OperationLog *self);

__attribute__((unused)) static SquiDBSQLiteConnection_OperationLog *new_SquiDBSQLiteConnection_OperationLog_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteConnection_OperationLog *create_SquiDBSQLiteConnection_OperationLog_init(void);

__attribute__((unused)) static jboolean SquiDBSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(SquiDBSQLiteConnection_OperationLog *self, jint cookie);

__attribute__((unused)) static void SquiDBSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(SquiDBSQLiteConnection_OperationLog *self, jint cookie, NSString *detail);

__attribute__((unused)) static jint SquiDBSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(SquiDBSQLiteConnection_OperationLog *self, jint index);

__attribute__((unused)) static SquiDBSQLiteConnection_Operation *SquiDBSQLiteConnection_OperationLog_getOperationLockedWithInt_(SquiDBSQLiteConnection_OperationLog *self, jint cookie);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSQLiteConnection_OperationLog)

@interface SquiDBSQLiteConnection_Operation : NSObject {
 @public
  jlong mStartTime_;
  jlong mEndTime_;
  NSString *mKind_;
  NSString *mSql_;
  JavaUtilArrayList *mBindArgs_;
  jboolean mFinished_;
  JavaLangException *mException_;
  jint mCookie_;
}

- (instancetype)init;

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose;

- (NSString *)getStatus;

- (NSString *)getFormattedStartTime;

@end

J2OBJC_STATIC_INIT(SquiDBSQLiteConnection_Operation)

J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_Operation, mKind_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_Operation, mSql_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_Operation, mBindArgs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteConnection_Operation, mException_, JavaLangException *)

inline JavaTextSimpleDateFormat *SquiDBSQLiteConnection_Operation_get_sDateFormat(void);
static JavaTextSimpleDateFormat *SquiDBSQLiteConnection_Operation_sDateFormat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteConnection_Operation, sDateFormat, JavaTextSimpleDateFormat *)

__attribute__((unused)) static void SquiDBSQLiteConnection_Operation_init(SquiDBSQLiteConnection_Operation *self);

__attribute__((unused)) static SquiDBSQLiteConnection_Operation *new_SquiDBSQLiteConnection_Operation_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteConnection_Operation *create_SquiDBSQLiteConnection_Operation_init(void);

__attribute__((unused)) static NSString *SquiDBSQLiteConnection_Operation_getStatus(SquiDBSQLiteConnection_Operation *self);

__attribute__((unused)) static NSString *SquiDBSQLiteConnection_Operation_getFormattedStartTime(SquiDBSQLiteConnection_Operation *self);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSQLiteConnection_Operation)

J2OBJC_INITIALIZED_DEFN(SquiDBSQLiteConnection)

@implementation SquiDBSQLiteConnection

+ (id)nativeOpenWithNSString:(NSString *)path
                     withInt:(jint)openFlags
                withNSString:(NSString *)label
                 withBoolean:(jboolean)enableTrace
                 withBoolean:(jboolean)enableProfile {
  return SquiDBSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(path, openFlags, label, enableTrace, enableProfile);
}

+ (void)nativeCloseWithId:(id)connectionPtr {
  SquiDBSQLiteConnection_nativeCloseWithId_(connectionPtr);
}

+ (void)nativeRegisterCustomFunctionWithId:(id)connectionPtr
            withSquiDBSQLiteCustomFunction:(SquiDBSQLiteCustomFunction *)function {
  SquiDBSQLiteConnection_nativeRegisterCustomFunctionWithId_withSquiDBSQLiteCustomFunction_(connectionPtr, function);
}

+ (id)nativePrepareStatementWithId:(id)connectionPtr
                      withNSString:(NSString *)sql {
  return SquiDBSQLiteConnection_nativePrepareStatementWithId_withNSString_(connectionPtr, sql);
}

+ (void)nativeFinalizeStatementWithId:(id)connectionPtr
                               withId:(id)statementPtr {
  SquiDBSQLiteConnection_nativeFinalizeStatementWithId_withId_(connectionPtr, statementPtr);
}

+ (jint)nativeGetParameterCountWithId:(id)connectionPtr
                               withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeGetParameterCountWithId_withId_(connectionPtr, statementPtr);
}

+ (jboolean)nativeIsReadOnlyWithId:(id)connectionPtr
                            withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeIsReadOnlyWithId_withId_(connectionPtr, statementPtr);
}

+ (jint)nativeGetColumnCountWithId:(id)connectionPtr
                            withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeGetColumnCountWithId_withId_(connectionPtr, statementPtr);
}

+ (NSString *)nativeGetColumnNameWithId:(id)connectionPtr
                                 withId:(id)statementPtr
                                withInt:(jint)index {
  return SquiDBSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindNullWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index {
  SquiDBSQLiteConnection_nativeBindNullWithId_withId_withInt_(connectionPtr, statementPtr, index);
}

+ (void)nativeBindLongWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
                    withLong:(jlong)value {
  SquiDBSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindDoubleWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                    withDouble:(jdouble)value {
  SquiDBSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindStringWithId:(id)connectionPtr
                        withId:(id)statementPtr
                       withInt:(jint)index
                  withNSString:(NSString *)value {
  SquiDBSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeBindBlobWithId:(id)connectionPtr
                      withId:(id)statementPtr
                     withInt:(jint)index
               withByteArray:(IOSByteArray *)value {
  SquiDBSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(connectionPtr, statementPtr, index, value);
}

+ (void)nativeResetStatementAndClearBindingsWithId:(id)connectionPtr
                                            withId:(id)statementPtr {
  SquiDBSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(connectionPtr, statementPtr);
}

+ (void)nativeExecuteWithId:(id)connectionPtr
                     withId:(id)statementPtr {
  SquiDBSQLiteConnection_nativeExecuteWithId_withId_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLongWithId:(id)connectionPtr
                             withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeExecuteForLongWithId_withId_(connectionPtr, statementPtr);
}

+ (NSString *)nativeExecuteForStringWithId:(id)connectionPtr
                                    withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeExecuteForStringWithId_withId_(connectionPtr, statementPtr);
}

+ (jint)nativeExecuteForChangedRowCountWithId:(id)connectionPtr
                                       withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForLastInsertedRowIdWithId:(id)connectionPtr
                                          withId:(id)statementPtr {
  return SquiDBSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(connectionPtr, statementPtr);
}

+ (jlong)nativeExecuteForCursorWindowWithId:(id)connectionPtr
                                     withId:(id)statementPtr
                                     withId:(id)windowPtr
                                    withInt:(jint)startPos
                                    withInt:(jint)requiredPos
                                withBoolean:(jboolean)countAllRows {
  return SquiDBSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(connectionPtr, statementPtr, windowPtr, startPos, requiredPos, countAllRows);
}

+ (jint)nativeGetDbLookasideWithId:(id)connectionPtr {
  return SquiDBSQLiteConnection_nativeGetDbLookasideWithId_(connectionPtr);
}

- (instancetype)initWithSquiDBSQLiteConnectionPool:(SquiDBSQLiteConnectionPool *)pool
             withSquiDBSQLiteDatabaseConfiguration:(SquiDBSQLiteDatabaseConfiguration *)configuration
                                           withInt:(jint)connectionId
                                       withBoolean:(jboolean)primaryConnection {
  SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(self, pool, configuration, connectionId, primaryConnection);
  return self;
}

- (void)java_finalize {
  @try {
    if (mPool_ != nil && mConnectionPtr_ != nil) {
      [mPool_ onConnectionLeaked];
    }
    SquiDBSQLiteConnection_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

+ (SquiDBSQLiteConnection *)openWithSquiDBSQLiteConnectionPool:(SquiDBSQLiteConnectionPool *)pool
                         withSquiDBSQLiteDatabaseConfiguration:(SquiDBSQLiteDatabaseConfiguration *)configuration
                                                       withInt:(jint)connectionId
                                                   withBoolean:(jboolean)primaryConnection {
  return SquiDBSQLiteConnection_openWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
}

- (void)close {
  SquiDBSQLiteConnection_disposeWithBoolean_(self, false);
}

- (void)open {
  SquiDBSQLiteConnection_open(self);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  SquiDBSQLiteConnection_disposeWithBoolean_(self, finalized);
}

- (void)setPageSize {
  SquiDBSQLiteConnection_setPageSize(self);
}

- (void)setAutoCheckpointInterval {
  SquiDBSQLiteConnection_setAutoCheckpointInterval(self);
}

- (void)setJournalSizeLimit {
  SquiDBSQLiteConnection_setJournalSizeLimit(self);
}

- (void)setForeignKeyModeFromConfiguration {
  SquiDBSQLiteConnection_setForeignKeyModeFromConfiguration(self);
}

- (void)setWalModeFromConfiguration {
  SquiDBSQLiteConnection_setWalModeFromConfiguration(self);
}

- (void)setSyncModeWithNSString:(NSString *)newValue {
  SquiDBSQLiteConnection_setSyncModeWithNSString_(self, newValue);
}

+ (NSString *)canonicalizeSyncModeWithNSString:(NSString *)value {
  return SquiDBSQLiteConnection_canonicalizeSyncModeWithNSString_(value);
}

- (void)setJournalModeWithNSString:(NSString *)newValue {
  SquiDBSQLiteConnection_setJournalModeWithNSString_(self, newValue);
}

- (void)setLocaleFromConfiguration {
  SquiDBSQLiteConnection_setLocaleFromConfiguration(self);
}

- (void)reconfigureWithSquiDBSQLiteDatabaseConfiguration:(SquiDBSQLiteDatabaseConfiguration *)configuration {
  mOnlyAllowReadOnlyOperations_ = false;
  jint functionCount = [((JavaUtilArrayList *) nil_chk(((SquiDBSQLiteDatabaseConfiguration *) nil_chk(configuration))->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    SquiDBSQLiteCustomFunction *function = [configuration->customFunctions_ getWithInt:i];
    if (![((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->customFunctions_ containsWithId:function]) {
      SquiDBSQLiteConnection_nativeRegisterCustomFunctionWithId_withSquiDBSQLiteCustomFunction_(mConnectionPtr_, function);
    }
  }
  jboolean foreignKeyModeChanged = configuration->foreignKeyConstraintsEnabled_ != ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->foreignKeyConstraintsEnabled_;
  jboolean walModeChanged = ((configuration->openFlags_ ^ mConfiguration_->openFlags_) & SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  jboolean localeChanged = ![((JavaUtilLocale *) nil_chk(configuration->locale_)) isEqual:mConfiguration_->locale_];
  [mConfiguration_ updateParametersFromWithSquiDBSQLiteDatabaseConfiguration:configuration];
  [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) resizeWithInt:configuration->maxSqlCacheSize_];
  if (foreignKeyModeChanged) {
    SquiDBSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  }
  if (walModeChanged) {
    SquiDBSQLiteConnection_setWalModeFromConfiguration(self);
  }
  if (localeChanged) {
    SquiDBSQLiteConnection_setLocaleFromConfiguration(self);
  }
}

- (void)setOnlyAllowReadOnlyOperationsWithBoolean:(jboolean)readOnly {
  mOnlyAllowReadOnlyOperations_ = readOnly;
}

- (jboolean)isPreparedStatementInCacheWithNSString:(NSString *)sql {
  return [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) getWithId:sql] != nil;
}

- (jint)getConnectionId {
  return mConnectionId_;
}

- (jboolean)isPrimaryConnection {
  return mIsPrimaryConnection_;
}

- (void)prepareWithNSString:(NSString *)sql
withSquiDBSQLiteStatementInfo:(SquiDBSQLiteStatementInfo *)outStatementInfo {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"prepare" withNSString:sql withNSObjectArray:nil];
  @try {
    SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      if (outStatementInfo != nil) {
        outStatementInfo->numParameters_ = ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_;
        outStatementInfo->readOnly_ = statement->mReadOnly_;
        jint columnCount = SquiDBSQLiteConnection_nativeGetColumnCountWithId_withId_(mConnectionPtr_, statement->mStatementPtr_);
        if (columnCount == 0) {
          outStatementInfo->columnNames_ = SquiDBSQLiteConnection_EMPTY_STRING_ARRAY;
        }
        else {
          outStatementInfo->columnNames_ = [IOSObjectArray newArrayWithLength:columnCount type:NSString_class_()];
          for (jint i = 0; i < columnCount; i++) {
            (void) IOSObjectArray_Set(nil_chk(outStatementInfo->columnNames_), i, SquiDBSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(mConnectionPtr_, statement->mStatementPtr_, i));
          }
        }
      }
    }
    @finally {
      SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"execute" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
      SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        SquiDBSQLiteConnection_nativeExecuteWithId_withId_(mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLong" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
      SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        return SquiDBSQLiteConnection_nativeExecuteForLongWithId_withId_(mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForString" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
      SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        return SquiDBSQLiteConnection_nativeExecuteForStringWithId_withId_(mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint changedRows = 0;
  jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForChangedRowCount" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
      SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        changedRows = SquiDBSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
        return changedRows;
      }
      @finally {
      }
    }
    @finally {
      SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
      [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$I", @"changedRows=", changedRows)];
    }
  }
}

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForLastInsertedRowId" withNSString:sql withNSObjectArray:bindArgs];
  @try {
    SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
    @try {
      SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
      SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
      @try {
        return SquiDBSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
      }
      @finally {
      }
    }
    @finally {
      SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
    @throw ex;
  }
  @finally {
    [mRecentOperations_ endOperationWithInt:cookie];
  }
}

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
                    withSquiDBCursorWindow:(SquiDBCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows {
  if (sql == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sql must not be null.");
  }
  if (window == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"window must not be null.");
  }
  [window acquireReference];
  @try {
    jint actualPos = -1;
    jint countedRows = -1;
    jint filledRows = -1;
    jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) beginOperationWithNSString:@"executeForCursorWindow" withNSString:sql withNSObjectArray:bindArgs];
    @try {
      SquiDBSQLiteConnection_PreparedStatement *statement = SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
      @try {
        SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
        SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
        @try {
          jlong result = SquiDBSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_, window->mWindowPtr_, startPos, requiredPos, countAllRows);
          actualPos = (jint) (JreRShift64(result, 32));
          countedRows = (jint) result;
          filledRows = [window getNumRows];
          [window setStartPositionWithInt:actualPos];
          return countedRows;
        }
        @finally {
        }
      }
      @finally {
        SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
      }
    }
    @catch (JavaLangRuntimeException *ex) {
      [mRecentOperations_ failOperationWithInt:cookie withJavaLangException:ex];
      @throw ex;
    }
    @finally {
      if ([mRecentOperations_ endOperationDeferLogWithInt:cookie]) {
        [mRecentOperations_ logOperationWithInt:cookie withNSString:JreStrcat("$@$I$I$I$I", @"window='", window, @"', startPos=", startPos, @", actualPos=", actualPos, @", filledRows=", filledRows, @", countedRows=", countedRows)];
      }
    }
  }
  @finally {
    [window releaseReference];
  }
}

- (SquiDBSQLiteConnection_PreparedStatement *)acquirePreparedStatementWithNSString:(NSString *)sql {
  return SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(self, sql);
}

- (void)releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement {
  SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement {
  SquiDBSQLiteConnection_finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
}

- (void)bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement
                                                withNSObjectArray:(IOSObjectArray *)bindArgs {
  SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(self, statement, bindArgs);
}

- (void)throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement {
  SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
}

+ (jboolean)isCacheableWithInt:(jint)statementType {
  return SquiDBSQLiteConnection_isCacheableWithInt_(statementType);
}

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                  withBoolean:(jboolean)verbose {
  [self dumpUnsafeWithSquiDBPrinter:printer withBoolean:verbose];
}

- (void)dumpUnsafeWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                        withBoolean:(jboolean)verbose {
  [((id<SquiDBPrinter>) nil_chk(printer)) printlnWithNSString:JreStrcat("$IC", @"Connection #", mConnectionId_, ':')];
  if (verbose) {
    [printer printlnWithNSString:JreStrcat("$$", @"  connectionPtr: 0x", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(mConnectionPtr_)))];
  }
  [printer printlnWithNSString:JreStrcat("$Z", @"  isPrimaryConnection: ", mIsPrimaryConnection_)];
  [printer printlnWithNSString:JreStrcat("$Z", @"  onlyAllowReadOnlyOperations: ", mOnlyAllowReadOnlyOperations_)];
  [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) dumpWithSquiDBPrinter:printer withBoolean:verbose];
  if (verbose) {
    [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(mPreparedStatementCache_)) dumpWithSquiDBPrinter:printer];
  }
}

- (NSString *)describeCurrentOperationUnsafe {
  return [((SquiDBSQLiteConnection_OperationLog *) nil_chk(mRecentOperations_)) describeCurrentOperation];
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  jint lookaside = SquiDBSQLiteConnection_nativeGetDbLookasideWithId_(mConnectionPtr_);
  jlong pageCount = 0;
  jlong pageSize = 0;
  @try {
    pageCount = [self executeForLongWithNSString:@"PRAGMA page_count;" withNSObjectArray:nil];
    pageSize = [self executeForLongWithNSString:@"PRAGMA page_size;" withNSObjectArray:nil];
  }
  @catch (SquiDBSQLiteException *ex) {
  }
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:SquiDBSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize)];
  SquiDBCursorWindow *window = new_SquiDBCursorWindow_initWithNSString_(@"collectDbStats");
  @try {
    [self executeForCursorWindowWithNSString:@"PRAGMA database_list;" withNSObjectArray:nil withSquiDBCursorWindow:window withInt:0 withInt:0 withBoolean:false];
    for (jint i = 1; i < [window getNumRows]; i++) {
      NSString *name = [window getStringWithInt:i withInt:1];
      NSString *path = [window getStringWithInt:i withInt:2];
      pageCount = 0;
      pageSize = 0;
      @try {
        pageCount = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_count;") withNSObjectArray:nil];
        pageSize = [self executeForLongWithNSString:JreStrcat("$$$", @"PRAGMA ", name, @".page_size;") withNSObjectArray:nil];
      }
      @catch (SquiDBSQLiteException *ex) {
      }
      NSString *label = JreStrcat("$$", @"  (attached) ", name);
      if (![((NSString *) nil_chk(path)) java_isEmpty]) {
        (void) JreStrAppendStrong(&label, "$$", @": ", path);
      }
      [dbStatsList addWithId:new_SquiDBSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, 0, 0, 0, 0)];
    }
  }
  @catch (SquiDBSQLiteException *ex) {
  }
  @finally {
    [window close];
  }
}

- (void)collectDbStatsUnsafeWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  [((JavaUtilArrayList *) nil_chk(dbStatsList)) addWithId:SquiDBSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, 0, 0, 0)];
}

- (SquiDBSQLiteDebug_DbStats *)getMainDbStatsUnsafeWithInt:(jint)lookaside
                                                  withLong:(jlong)pageCount
                                                  withLong:(jlong)pageSize {
  return SquiDBSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(self, lookaside, pageCount, pageSize);
}

- (NSString *)description {
  return JreStrcat("$$$IC", @"SQLiteConnection: ", ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfiguration_))->path_, @" (", mConnectionId_, ')');
}

- (SquiDBSQLiteConnection_PreparedStatement *)obtainPreparedStatementWithNSString:(NSString *)sql
                                                                           withId:(id)statementPtr
                                                                          withInt:(jint)numParameters
                                                                          withInt:(jint)type
                                                                      withBoolean:(jboolean)readOnly {
  return SquiDBSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
}

- (void)recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:(SquiDBSQLiteConnection_PreparedStatement *)statement {
  SquiDBSQLiteConnection_recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
}

+ (NSString *)trimSqlForDisplayWithNSString:(NSString *)sql {
  return SquiDBSQLiteConnection_trimSqlForDisplayWithNSString_(sql);
}

- (void)dealloc {
  JreCheckFinalize(self, [SquiDBSQLiteConnection class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x10a, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 11, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 12, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 24, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 25, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 26, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10a, 27, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 28, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 29, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x10a, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x10a, 32, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 34, -1, 35, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteConnection;", 0x8, 36, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 45, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 46, 40, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 51, 50, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 52, 50, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 53, 50, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 54, 50, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteConnection_PreparedStatement;", 0x2, 57, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 59, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 64, 65, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 68, 67, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 69, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x0, 72, 70, -1, 71, -1, -1 },
    { NULL, "LSquiDBSQLiteDebug_DbStats;", 0x2, 73, 74, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 75, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteConnection_PreparedStatement;", 0x2, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 59, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 79, 40, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nativeOpenWithNSString:withInt:withNSString:withBoolean:withBoolean:);
  methods[1].selector = @selector(nativeCloseWithId:);
  methods[2].selector = @selector(nativeRegisterCustomFunctionWithId:withSquiDBSQLiteCustomFunction:);
  methods[3].selector = @selector(nativePrepareStatementWithId:withNSString:);
  methods[4].selector = @selector(nativeFinalizeStatementWithId:withId:);
  methods[5].selector = @selector(nativeGetParameterCountWithId:withId:);
  methods[6].selector = @selector(nativeIsReadOnlyWithId:withId:);
  methods[7].selector = @selector(nativeGetColumnCountWithId:withId:);
  methods[8].selector = @selector(nativeGetColumnNameWithId:withId:withInt:);
  methods[9].selector = @selector(nativeBindNullWithId:withId:withInt:);
  methods[10].selector = @selector(nativeBindLongWithId:withId:withInt:withLong:);
  methods[11].selector = @selector(nativeBindDoubleWithId:withId:withInt:withDouble:);
  methods[12].selector = @selector(nativeBindStringWithId:withId:withInt:withNSString:);
  methods[13].selector = @selector(nativeBindBlobWithId:withId:withInt:withByteArray:);
  methods[14].selector = @selector(nativeResetStatementAndClearBindingsWithId:withId:);
  methods[15].selector = @selector(nativeExecuteWithId:withId:);
  methods[16].selector = @selector(nativeExecuteForLongWithId:withId:);
  methods[17].selector = @selector(nativeExecuteForStringWithId:withId:);
  methods[18].selector = @selector(nativeExecuteForChangedRowCountWithId:withId:);
  methods[19].selector = @selector(nativeExecuteForLastInsertedRowIdWithId:withId:);
  methods[20].selector = @selector(nativeExecuteForCursorWindowWithId:withId:withId:withInt:withInt:withBoolean:);
  methods[21].selector = @selector(nativeGetDbLookasideWithId:);
  methods[22].selector = @selector(initWithSquiDBSQLiteConnectionPool:withSquiDBSQLiteDatabaseConfiguration:withInt:withBoolean:);
  methods[23].selector = @selector(java_finalize);
  methods[24].selector = @selector(openWithSquiDBSQLiteConnectionPool:withSquiDBSQLiteDatabaseConfiguration:withInt:withBoolean:);
  methods[25].selector = @selector(close);
  methods[26].selector = @selector(open);
  methods[27].selector = @selector(disposeWithBoolean:);
  methods[28].selector = @selector(setPageSize);
  methods[29].selector = @selector(setAutoCheckpointInterval);
  methods[30].selector = @selector(setJournalSizeLimit);
  methods[31].selector = @selector(setForeignKeyModeFromConfiguration);
  methods[32].selector = @selector(setWalModeFromConfiguration);
  methods[33].selector = @selector(setSyncModeWithNSString:);
  methods[34].selector = @selector(canonicalizeSyncModeWithNSString:);
  methods[35].selector = @selector(setJournalModeWithNSString:);
  methods[36].selector = @selector(setLocaleFromConfiguration);
  methods[37].selector = @selector(reconfigureWithSquiDBSQLiteDatabaseConfiguration:);
  methods[38].selector = @selector(setOnlyAllowReadOnlyOperationsWithBoolean:);
  methods[39].selector = @selector(isPreparedStatementInCacheWithNSString:);
  methods[40].selector = @selector(getConnectionId);
  methods[41].selector = @selector(isPrimaryConnection);
  methods[42].selector = @selector(prepareWithNSString:withSquiDBSQLiteStatementInfo:);
  methods[43].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[44].selector = @selector(executeForLongWithNSString:withNSObjectArray:);
  methods[45].selector = @selector(executeForStringWithNSString:withNSObjectArray:);
  methods[46].selector = @selector(executeForChangedRowCountWithNSString:withNSObjectArray:);
  methods[47].selector = @selector(executeForLastInsertedRowIdWithNSString:withNSObjectArray:);
  methods[48].selector = @selector(executeForCursorWindowWithNSString:withNSObjectArray:withSquiDBCursorWindow:withInt:withInt:withBoolean:);
  methods[49].selector = @selector(acquirePreparedStatementWithNSString:);
  methods[50].selector = @selector(releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:);
  methods[51].selector = @selector(finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:);
  methods[52].selector = @selector(bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement:withNSObjectArray:);
  methods[53].selector = @selector(throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement:);
  methods[54].selector = @selector(isCacheableWithInt:);
  methods[55].selector = @selector(dumpWithSquiDBPrinter:withBoolean:);
  methods[56].selector = @selector(dumpUnsafeWithSquiDBPrinter:withBoolean:);
  methods[57].selector = @selector(describeCurrentOperationUnsafe);
  methods[58].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[59].selector = @selector(collectDbStatsUnsafeWithJavaUtilArrayList:);
  methods[60].selector = @selector(getMainDbStatsUnsafeWithInt:withLong:withLong:);
  methods[61].selector = @selector(description);
  methods[62].selector = @selector(obtainPreparedStatementWithNSString:withId:withInt:withInt:withBoolean:);
  methods[63].selector = @selector(recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement:);
  methods[64].selector = @selector(trimSqlForDisplayWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 80, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = SquiDBSQLiteConnection_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 81, -1, -1 },
    { "EMPTY_BYTE_ARRAY", "[B", .constantValue.asLong = 0, 0x1a, -1, 82, -1, -1 },
    { "TRIM_SQL_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 83, -1, -1 },
    { "mCloseGuard_", "LSquiDBCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPool_", "LSquiDBSQLiteConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfiguration_", "LSquiDBSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsPrimaryConnection_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsReadOnlyConnection_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreparedStatementCache_", "LSquiDBSQLiteConnection_PreparedStatementCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreparedStatementPool_", "LSquiDBSQLiteConnection_PreparedStatement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRecentOperations_", "LSquiDBSQLiteConnection_OperationLog;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionPtr_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnlyAllowReadOnlyOperations_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCancellationSignalAttachCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nativeOpen", "LNSString;ILNSString;ZZ", "nativeClose", "LNSObject;", "nativeRegisterCustomFunction", "LNSObject;LSquiDBSQLiteCustomFunction;", "nativePrepareStatement", "LNSObject;LNSString;", "nativeFinalizeStatement", "LNSObject;LNSObject;", "nativeGetParameterCount", "nativeIsReadOnly", "nativeGetColumnCount", "nativeGetColumnName", "LNSObject;LNSObject;I", "nativeBindNull", "nativeBindLong", "LNSObject;LNSObject;IJ", "nativeBindDouble", "LNSObject;LNSObject;ID", "nativeBindString", "LNSObject;LNSObject;ILNSString;", "nativeBindBlob", "LNSObject;LNSObject;I[B", "nativeResetStatementAndClearBindings", "nativeExecute", "nativeExecuteForLong", "nativeExecuteForString", "nativeExecuteForChangedRowCount", "nativeExecuteForLastInsertedRowId", "nativeExecuteForCursorWindow", "LNSObject;LNSObject;LNSObject;IIZ", "nativeGetDbLookaside", "LSquiDBSQLiteConnectionPool;LSquiDBSQLiteDatabaseConfiguration;IZ", "finalize", "LJavaLangThrowable;", "open", "dispose", "Z", "setSyncMode", "LNSString;", "canonicalizeSyncMode", "setJournalMode", "reconfigure", "LSquiDBSQLiteDatabaseConfiguration;", "setOnlyAllowReadOnlyOperations", "isPreparedStatementInCache", "prepare", "LNSString;LSquiDBSQLiteStatementInfo;", "execute", "LNSString;[LNSObject;", "executeForLong", "executeForString", "executeForChangedRowCount", "executeForLastInsertedRowId", "executeForCursorWindow", "LNSString;[LNSObject;LSquiDBCursorWindow;IIZ", "acquirePreparedStatement", "releasePreparedStatement", "LSquiDBSQLiteConnection_PreparedStatement;", "finalizePreparedStatement", "bindArguments", "LSquiDBSQLiteConnection_PreparedStatement;[LNSObject;", "throwIfStatementForbidden", "isCacheable", "I", "dump", "LSquiDBPrinter;Z", "dumpUnsafe", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Lcom/yahoo/android/sqlite/SQLiteDebug$DbStats;>;)V", "collectDbStatsUnsafe", "getMainDbStatsUnsafe", "IJJ", "toString", "obtainPreparedStatement", "LNSString;LNSObject;IIZ", "recyclePreparedStatement", "trimSqlForDisplay", &SquiDBSQLiteConnection_TAG, &SquiDBSQLiteConnection_EMPTY_STRING_ARRAY, &SquiDBSQLiteConnection_EMPTY_BYTE_ARRAY, &SquiDBSQLiteConnection_TRIM_SQL_PATTERN, "LSquiDBSQLiteConnection_PreparedStatement;LSquiDBSQLiteConnection_PreparedStatementCache;LSquiDBSQLiteConnection_OperationLog;LSquiDBSQLiteConnection_Operation;" };
  static const J2ObjcClassInfo _SquiDBSQLiteConnection = { "SQLiteConnection", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x11, 65, 17, -1, 84, -1, -1, -1 };
  return &_SquiDBSQLiteConnection;
}

+ (void)initialize {
  if (self == [SquiDBSQLiteConnection class]) {
    SquiDBSQLiteConnection_EMPTY_STRING_ARRAY = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    SquiDBSQLiteConnection_EMPTY_BYTE_ARRAY = [IOSByteArray newArrayWithLength:0];
    SquiDBSQLiteConnection_TRIM_SQL_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"[\\s]*\\n+[\\s]*");
    J2OBJC_SET_INITIALIZED(SquiDBSQLiteConnection)
  }
}

@end

id SquiDBSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(NSString *path, jint openFlags, NSString *label, jboolean enableTrace, jboolean enableProfile) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeOpen:path openFlags:openFlags labelStr:label
  enableTrace:enableTrace enableProfile:enableProfile];
}

void SquiDBSQLiteConnection_nativeCloseWithId_(id connectionPtr) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeClose:connectionPtr];
}

void SquiDBSQLiteConnection_nativeRegisterCustomFunctionWithId_withSquiDBSQLiteCustomFunction_(id connectionPtr, SquiDBSQLiteCustomFunction *function) {
  SquiDBSQLiteConnection_initialize();
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Registering native custom functions is not yet supported."];
}

id SquiDBSQLiteConnection_nativePrepareStatementWithId_withNSString_(id connectionPtr, NSString *sql) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativePrepareStatement:connectionPtr withSql:sql];
}

void SquiDBSQLiteConnection_nativeFinalizeStatementWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeFinalizeStatement:connectionPtr statement:statementPtr];
}

jint SquiDBSQLiteConnection_nativeGetParameterCountWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetParameterCount:connectionPtr statement:statementPtr];
}

jboolean SquiDBSQLiteConnection_nativeIsReadOnlyWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeIsReadOnly:connectionPtr statement:statementPtr];
}

jint SquiDBSQLiteConnection_nativeGetColumnCountWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetColumnCount:connectionPtr statement:statementPtr];
}

NSString *SquiDBSQLiteConnection_nativeGetColumnNameWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetColumnName:connectionPtr statement:statementPtr index:index];
}

void SquiDBSQLiteConnection_nativeBindNullWithId_withId_withInt_(id connectionPtr, id statementPtr, jint index) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindNull:connectionPtr statement:statementPtr index:index];
}

void SquiDBSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(id connectionPtr, id statementPtr, jint index, jlong value) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindLong:connectionPtr statement:statementPtr index:index value:value];
}

void SquiDBSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(id connectionPtr, id statementPtr, jint index, jdouble value) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindDouble:connectionPtr statement:statementPtr index:index value:value];
}

void SquiDBSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(id connectionPtr, id statementPtr, jint index, NSString *value) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindString:connectionPtr statement:statementPtr index:index value:value];
}

void SquiDBSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(id connectionPtr, id statementPtr, jint index, IOSByteArray *value) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeBindBlob:connectionPtr statement:statementPtr index:index value:value];
}

void SquiDBSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeResetStatementAndClearBindings:connectionPtr statement:statementPtr];
}

void SquiDBSQLiteConnection_nativeExecuteWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  [SQLiteConnectionNative nativeExecute:connectionPtr statement:statementPtr];
}

jlong SquiDBSQLiteConnection_nativeExecuteForLongWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForLong:connectionPtr statement:statementPtr];
}

NSString *SquiDBSQLiteConnection_nativeExecuteForStringWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForString:connectionPtr statement:statementPtr];
}

jint SquiDBSQLiteConnection_nativeExecuteForChangedRowCountWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForChangedRowCount:connectionPtr statement:statementPtr];
}

jlong SquiDBSQLiteConnection_nativeExecuteForLastInsertedRowIdWithId_withId_(id connectionPtr, id statementPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForLastInsertedRowId:connectionPtr statement:statementPtr];
}

jlong SquiDBSQLiteConnection_nativeExecuteForCursorWindowWithId_withId_withId_withInt_withInt_withBoolean_(id connectionPtr, id statementPtr, id windowPtr, jint startPos, jint requiredPos, jboolean countAllRows) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeExecuteForCursorWindow:connectionPtr statement:statementPtr window:windowPtr
  startPos:startPos requiredPos:requiredPos countAllRows:countAllRows];
}

jint SquiDBSQLiteConnection_nativeGetDbLookasideWithId_(id connectionPtr) {
  SquiDBSQLiteConnection_initialize();
  return [SQLiteConnectionNative nativeGetDbLookaside:connectionPtr];
}

void SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  NSObject_init(self);
  self->mCloseGuard_ = SquiDBCloseGuard_get();
  self->mRecentOperations_ = new_SquiDBSQLiteConnection_OperationLog_init();
  self->mPool_ = pool;
  self->mConfiguration_ = new_SquiDBSQLiteDatabaseConfiguration_initWithSquiDBSQLiteDatabaseConfiguration_(configuration);
  self->mConnectionId_ = connectionId;
  self->mIsPrimaryConnection_ = primaryConnection;
  self->mIsReadOnlyConnection_ = ((((SquiDBSQLiteDatabaseConfiguration *) nil_chk(configuration))->openFlags_ & SquiDBSQLiteDatabase_OPEN_READONLY) != 0);
  self->mPreparedStatementCache_ = new_SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(self, self->mConfiguration_->maxSqlCacheSize_);
  [((SquiDBCloseGuard *) nil_chk(self->mCloseGuard_)) openWithNSString:@"close"];
}

SquiDBSQLiteConnection *new_SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteConnection, initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_, pool, configuration, connectionId, primaryConnection)
}

SquiDBSQLiteConnection *create_SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteConnection, initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_, pool, configuration, connectionId, primaryConnection)
}

SquiDBSQLiteConnection *SquiDBSQLiteConnection_openWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(SquiDBSQLiteConnectionPool *pool, SquiDBSQLiteDatabaseConfiguration *configuration, jint connectionId, jboolean primaryConnection) {
  SquiDBSQLiteConnection_initialize();
  SquiDBSQLiteConnection *connection = new_SquiDBSQLiteConnection_initWithSquiDBSQLiteConnectionPool_withSquiDBSQLiteDatabaseConfiguration_withInt_withBoolean_(pool, configuration, connectionId, primaryConnection);
  @try {
    SquiDBSQLiteConnection_open(connection);
    return connection;
  }
  @catch (SquiDBSQLiteException *ex) {
    SquiDBSQLiteConnection_disposeWithBoolean_(connection, false);
    @throw ex;
  }
}

void SquiDBSQLiteConnection_open(SquiDBSQLiteConnection *self) {
  self->mConnectionPtr_ = SquiDBSQLiteConnection_nativeOpenWithNSString_withInt_withNSString_withBoolean_withBoolean_(((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_, self->mConfiguration_->openFlags_, self->mConfiguration_->label_, SquiDBSQLiteDebug_DEBUG_SQL_STATEMENTS, SquiDBSQLiteDebug_DEBUG_SQL_TIME);
  SquiDBSQLiteConnection_setPageSize(self);
  SquiDBSQLiteConnection_setForeignKeyModeFromConfiguration(self);
  SquiDBSQLiteConnection_setWalModeFromConfiguration(self);
  SquiDBSQLiteConnection_setJournalSizeLimit(self);
  SquiDBSQLiteConnection_setAutoCheckpointInterval(self);
  SquiDBSQLiteConnection_setLocaleFromConfiguration(self);
  jint functionCount = [((JavaUtilArrayList *) nil_chk(self->mConfiguration_->customFunctions_)) size];
  for (jint i = 0; i < functionCount; i++) {
    SquiDBSQLiteCustomFunction *function = [self->mConfiguration_->customFunctions_ getWithInt:i];
    SquiDBSQLiteConnection_nativeRegisterCustomFunctionWithId_withSquiDBSQLiteCustomFunction_(self->mConnectionPtr_, function);
  }
}

void SquiDBSQLiteConnection_disposeWithBoolean_(SquiDBSQLiteConnection *self, jboolean finalized) {
  if (self->mCloseGuard_ != nil) {
    if (finalized) {
      [self->mCloseGuard_ warnIfOpen];
    }
    [self->mCloseGuard_ close];
  }
  if (self->mConnectionPtr_ != nil) {
    jint cookie = [((SquiDBSQLiteConnection_OperationLog *) nil_chk(self->mRecentOperations_)) beginOperationWithNSString:@"close" withNSString:nil withNSObjectArray:nil];
    @try {
      [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) evictAll];
      SquiDBSQLiteConnection_nativeCloseWithId_(self->mConnectionPtr_);
      self->mConnectionPtr_ = nil;
    }
    @finally {
      [self->mRecentOperations_ endOperationWithInt:cookie];
    }
  }
}

void SquiDBSQLiteConnection_setPageSize(SquiDBSQLiteConnection *self) {
  if (![((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = SquiDBSQLiteGlobal_getDefaultPageSize();
    jlong value = [self executeForLongWithNSString:@"PRAGMA page_size" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA page_size=", newValue) withNSObjectArray:nil];
    }
  }
}

void SquiDBSQLiteConnection_setAutoCheckpointInterval(SquiDBSQLiteConnection *self) {
  if (![((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = SquiDBSQLiteGlobal_getWALAutoCheckpoint();
    jlong value = [self executeForLongWithNSString:@"PRAGMA wal_autocheckpoint" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA wal_autocheckpoint=", newValue) withNSObjectArray:nil];
    }
  }
}

void SquiDBSQLiteConnection_setJournalSizeLimit(SquiDBSQLiteConnection *self) {
  if (![((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    jlong newValue = SquiDBSQLiteGlobal_getJournalSizeLimit();
    jlong value = [self executeForLongWithNSString:@"PRAGMA journal_size_limit" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeForLongWithNSString:JreStrcat("$J", @"PRAGMA journal_size_limit=", newValue) withNSObjectArray:nil];
    }
  }
}

void SquiDBSQLiteConnection_setForeignKeyModeFromConfiguration(SquiDBSQLiteConnection *self) {
  if (!self->mIsReadOnlyConnection_) {
    jlong newValue = ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->foreignKeyConstraintsEnabled_ ? 1 : 0;
    jlong value = [self executeForLongWithNSString:@"PRAGMA foreign_keys" withNSObjectArray:nil];
    if (value != newValue) {
      [self executeWithNSString:JreStrcat("$J", @"PRAGMA foreign_keys=", newValue) withNSObjectArray:nil];
    }
  }
}

void SquiDBSQLiteConnection_setWalModeFromConfiguration(SquiDBSQLiteConnection *self) {
  if (![((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_)) isInMemoryDb] && !self->mIsReadOnlyConnection_) {
    if ((self->mConfiguration_->openFlags_ & SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      SquiDBSQLiteConnection_setJournalModeWithNSString_(self, @"WAL");
      SquiDBSQLiteConnection_setSyncModeWithNSString_(self, SquiDBSQLiteGlobal_getWALSyncMode());
    }
    else {
      SquiDBSQLiteConnection_setJournalModeWithNSString_(self, SquiDBSQLiteGlobal_getDefaultJournalMode());
      SquiDBSQLiteConnection_setSyncModeWithNSString_(self, SquiDBSQLiteGlobal_getDefaultSyncMode());
    }
  }
}

void SquiDBSQLiteConnection_setSyncModeWithNSString_(SquiDBSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA synchronous" withNSObjectArray:nil];
  if (![((NSString *) nil_chk(SquiDBSQLiteConnection_canonicalizeSyncModeWithNSString_(value))) java_equalsIgnoreCase:SquiDBSQLiteConnection_canonicalizeSyncModeWithNSString_(newValue)]) {
    [self executeWithNSString:JreStrcat("$$", @"PRAGMA synchronous=", newValue) withNSObjectArray:nil];
  }
}

NSString *SquiDBSQLiteConnection_canonicalizeSyncModeWithNSString_(NSString *value) {
  SquiDBSQLiteConnection_initialize();
  if ([((NSString *) nil_chk(value)) isEqual:@"0"]) {
    return @"OFF";
  }
  else if ([value isEqual:@"1"]) {
    return @"NORMAL";
  }
  else if ([value isEqual:@"2"]) {
    return @"FULL";
  }
  return value;
}

void SquiDBSQLiteConnection_setJournalModeWithNSString_(SquiDBSQLiteConnection *self, NSString *newValue) {
  NSString *value = [self executeForStringWithNSString:@"PRAGMA journal_mode" withNSObjectArray:nil];
  if (![((NSString *) nil_chk(value)) java_equalsIgnoreCase:newValue]) {
    @try {
      NSString *result = [self executeForStringWithNSString:JreStrcat("$$", @"PRAGMA journal_mode=", newValue) withNSObjectArray:nil];
      if ([((NSString *) nil_chk(result)) java_equalsIgnoreCase:newValue]) {
        return;
      }
    }
    @catch (SquiDBSQLiteDatabaseLockedException *ex) {
    }
    SquiDBLogger_wWithNSString_withNSString_(SquiDBSQLiteConnection_TAG, JreStrcat("$$$$$$$", @"Could not change the database journal mode of '", ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->label_, @"' from '", value, @"' to '", newValue, @"' because the database is locked.  This usually means that there are other open connections to the database which prevents the database from enabling or disabling write-ahead logging mode.  Proceeding without changing the journal mode."));
  }
}

void SquiDBSQLiteConnection_setLocaleFromConfiguration(SquiDBSQLiteConnection *self) {
  if ((((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->openFlags_ & SquiDBSQLiteDatabase_NO_LOCALIZED_COLLATORS) != 0) {
    return;
  }
  NSString *newLocale = [((JavaUtilLocale *) nil_chk(self->mConfiguration_->locale_)) description];
  if (self->mIsReadOnlyConnection_) {
    return;
  }
  @try {
    [self executeWithNSString:@"CREATE TABLE IF NOT EXISTS android_metadata (locale TEXT)" withNSObjectArray:nil];
    NSString *oldLocale = [self executeForStringWithNSString:@"SELECT locale FROM android_metadata UNION SELECT NULL ORDER BY locale DESC LIMIT 1" withNSObjectArray:nil];
    if (oldLocale != nil && [oldLocale isEqual:newLocale]) {
      return;
    }
    [self executeWithNSString:@"BEGIN" withNSObjectArray:nil];
    jboolean success = false;
    @try {
      [self executeWithNSString:@"DELETE FROM android_metadata" withNSObjectArray:nil];
      [self executeWithNSString:@"INSERT INTO android_metadata (locale) VALUES(?)" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ newLocale } count:1 type:NSObject_class_()]];
      [self executeWithNSString:@"REINDEX LOCALIZED" withNSObjectArray:nil];
      success = true;
    }
    @finally {
      [self executeWithNSString:success ? @"COMMIT" : @"ROLLBACK" withNSObjectArray:nil];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    @throw new_SquiDBSQLiteException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$", @"Failed to change locale for db '", self->mConfiguration_->label_, @"' to '", newLocale, @"'."), ex);
  }
}

SquiDBSQLiteConnection_PreparedStatement *SquiDBSQLiteConnection_acquirePreparedStatementWithNSString_(SquiDBSQLiteConnection *self, NSString *sql) {
  SquiDBSQLiteConnection_PreparedStatement *statement = [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) getWithId:sql];
  jboolean skipCache = false;
  if (statement != nil) {
    if (!statement->mInUse_) {
      return statement;
    }
    skipCache = true;
  }
  id statementPtr = SquiDBSQLiteConnection_nativePrepareStatementWithId_withNSString_(self->mConnectionPtr_, sql);
  @try {
    jint numParameters = SquiDBSQLiteConnection_nativeGetParameterCountWithId_withId_(self->mConnectionPtr_, statementPtr);
    jint type = SquiDBDatabaseUtils_getSqlStatementTypeWithNSString_(sql);
    jboolean readOnly = SquiDBSQLiteConnection_nativeIsReadOnlyWithId_withId_(self->mConnectionPtr_, statementPtr);
    statement = SquiDBSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(self, sql, statementPtr, numParameters, type, readOnly);
    if (!skipCache && SquiDBSQLiteConnection_isCacheableWithInt_(type)) {
      (void) [self->mPreparedStatementCache_ putWithId:sql withId:statement];
      ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_ = true;
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    if (statement == nil || !statement->mInCache_) {
      SquiDBSQLiteConnection_nativeFinalizeStatementWithId_withId_(self->mConnectionPtr_, statementPtr);
    }
    @throw ex;
  }
  ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = true;
  return statement;
}

void SquiDBSQLiteConnection_releasePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement) {
  ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInUse_ = false;
  if (statement->mInCache_) {
    @try {
      SquiDBSQLiteConnection_nativeResetStatementAndClearBindingsWithId_withId_(self->mConnectionPtr_, statement->mStatementPtr_);
    }
    @catch (SquiDBSQLiteException *ex) {
      (void) [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) removeWithId:statement->mSql_];
    }
  }
  else {
    SquiDBSQLiteConnection_finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
  }
}

void SquiDBSQLiteConnection_finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement) {
  SquiDBSQLiteConnection_nativeFinalizeStatementWithId_withId_(self->mConnectionPtr_, ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mStatementPtr_);
  SquiDBSQLiteConnection_recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(self, statement);
}

void SquiDBSQLiteConnection_bindArgumentsWithSquiDBSQLiteConnection_PreparedStatement_withNSObjectArray_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement, IOSObjectArray *bindArgs) {
  jint count = bindArgs != nil ? bindArgs->size_ : 0;
  if (count != ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mNumParameters_) {
    @throw new_SquiDBSQLiteBindOrColumnIndexOutOfRangeException_initWithNSString_(JreStrcat("$I$I$", @"Expected ", statement->mNumParameters_, @" bind arguments but ", count, @" were provided."));
  }
  if (count == 0) {
    return;
  }
  id statementPtr = statement->mStatementPtr_;
  for (jint i = 0; i < count; i++) {
    id arg = IOSObjectArray_Get(nil_chk(bindArgs), i);
    switch (SquiDBDatabaseUtils_getTypeOfObjectWithId_(arg)) {
      case SquiDBICursor_FIELD_TYPE_NULL:
      SquiDBSQLiteConnection_nativeBindNullWithId_withId_withInt_(self->mConnectionPtr_, statementPtr, i + 1);
      break;
      case SquiDBICursor_FIELD_TYPE_INTEGER:
      SquiDBSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) longLongValue]);
      break;
      case SquiDBICursor_FIELD_TYPE_FLOAT:
      SquiDBSQLiteConnection_nativeBindDoubleWithId_withId_withInt_withDouble_(self->mConnectionPtr_, statementPtr, i + 1, [((NSNumber *) nil_chk(((NSNumber *) cast_chk(arg, [NSNumber class])))) doubleValue]);
      break;
      case SquiDBICursor_FIELD_TYPE_BLOB:
      SquiDBSQLiteConnection_nativeBindBlobWithId_withId_withInt_withByteArray_(self->mConnectionPtr_, statementPtr, i + 1, (IOSByteArray *) cast_chk(arg, [IOSByteArray class]));
      break;
      case SquiDBICursor_FIELD_TYPE_STRING:
      default:
      if ([arg isKindOfClass:[JavaLangBoolean class]]) {
        SquiDBSQLiteConnection_nativeBindLongWithId_withId_withInt_withLong_(self->mConnectionPtr_, statementPtr, i + 1, [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) arg))) booleanValue] ? 1 : 0);
      }
      else {
        SquiDBSQLiteConnection_nativeBindStringWithId_withId_withInt_withNSString_(self->mConnectionPtr_, statementPtr, i + 1, [nil_chk(arg) description]);
      }
      break;
    }
  }
}

void SquiDBSQLiteConnection_throwIfStatementForbiddenWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement) {
  if (self->mOnlyAllowReadOnlyOperations_ && !((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mReadOnly_) {
    @throw new_SquiDBSQLiteException_initWithNSString_(@"Cannot execute this statement because it might modify the database but the connection is read-only.");
  }
}

jboolean SquiDBSQLiteConnection_isCacheableWithInt_(jint statementType) {
  SquiDBSQLiteConnection_initialize();
  if (statementType == SquiDBDatabaseUtils_STATEMENT_UPDATE || statementType == SquiDBDatabaseUtils_STATEMENT_SELECT) {
    return true;
  }
  return false;
}

SquiDBSQLiteDebug_DbStats *SquiDBSQLiteConnection_getMainDbStatsUnsafeWithInt_withLong_withLong_(SquiDBSQLiteConnection *self, jint lookaside, jlong pageCount, jlong pageSize) {
  NSString *label = ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfiguration_))->path_;
  if (!self->mIsPrimaryConnection_) {
    (void) JreStrAppendStrong(&label, "$IC", @" (", self->mConnectionId_, ')');
  }
  return new_SquiDBSQLiteDebug_DbStats_initWithNSString_withLong_withLong_withInt_withInt_withInt_withInt_(label, pageCount, pageSize, lookaside, [((SquiDBSQLiteConnection_PreparedStatementCache *) nil_chk(self->mPreparedStatementCache_)) hitCount], [self->mPreparedStatementCache_ missCount], [self->mPreparedStatementCache_ size]);
}

SquiDBSQLiteConnection_PreparedStatement *SquiDBSQLiteConnection_obtainPreparedStatementWithNSString_withId_withInt_withInt_withBoolean_(SquiDBSQLiteConnection *self, NSString *sql, id statementPtr, jint numParameters, jint type, jboolean readOnly) {
  SquiDBSQLiteConnection_PreparedStatement *statement = self->mPreparedStatementPool_;
  if (statement != nil) {
    self->mPreparedStatementPool_ = statement->mPoolNext_;
    statement->mPoolNext_ = nil;
    statement->mInCache_ = false;
  }
  else {
    statement = new_SquiDBSQLiteConnection_PreparedStatement_init();
  }
  statement->mSql_ = sql;
  statement->mStatementPtr_ = statementPtr;
  statement->mNumParameters_ = numParameters;
  statement->mType_ = type;
  statement->mReadOnly_ = readOnly;
  return statement;
}

void SquiDBSQLiteConnection_recyclePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(SquiDBSQLiteConnection *self, SquiDBSQLiteConnection_PreparedStatement *statement) {
  ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mSql_ = nil;
  statement->mPoolNext_ = self->mPreparedStatementPool_;
  statement->mStatementPtr_ = nil;
  self->mPreparedStatementPool_ = statement;
}

NSString *SquiDBSQLiteConnection_trimSqlForDisplayWithNSString_(NSString *sql) {
  SquiDBSQLiteConnection_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(SquiDBSQLiteConnection_TRIM_SQL_PATTERN)) matcherWithJavaLangCharSequence:sql])) replaceAllWithNSString:@" "];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteConnection)

J2OBJC_NAME_MAPPING(SquiDBSQLiteConnection, "com.yahoo.android.sqlite", "SquiDB")

@implementation SquiDBSQLiteConnection_PreparedStatement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSQLiteConnection_PreparedStatement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPoolNext_", "LSquiDBSQLiteConnection_PreparedStatement;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStatementPtr_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mNumParameters_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mReadOnly_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInCache_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mInUse_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSQLiteConnection;" };
  static const J2ObjcClassInfo _SquiDBSQLiteConnection_PreparedStatement = { "PreparedStatement", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x1a, 1, 8, 0, -1, -1, -1, -1 };
  return &_SquiDBSQLiteConnection_PreparedStatement;
}

@end

void SquiDBSQLiteConnection_PreparedStatement_init(SquiDBSQLiteConnection_PreparedStatement *self) {
  NSObject_init(self);
}

SquiDBSQLiteConnection_PreparedStatement *new_SquiDBSQLiteConnection_PreparedStatement_init() {
  J2OBJC_NEW_IMPL(SquiDBSQLiteConnection_PreparedStatement, init)
}

SquiDBSQLiteConnection_PreparedStatement *create_SquiDBSQLiteConnection_PreparedStatement_init() {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteConnection_PreparedStatement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteConnection_PreparedStatement)

@implementation SquiDBSQLiteConnection_PreparedStatementCache

- (instancetype)initWithSquiDBSQLiteConnection:(SquiDBSQLiteConnection *)outer$
                                       withInt:(jint)size {
  SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(self, outer$, size);
  return self;
}

- (void)entryRemovedWithBoolean:(jboolean)evicted
                         withId:(NSString *)key
                         withId:(SquiDBSQLiteConnection_PreparedStatement *)oldValue
                         withId:(SquiDBSQLiteConnection_PreparedStatement *)newValue {
  ((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(oldValue))->mInCache_ = false;
  if (!oldValue->mInUse_) {
    SquiDBSQLiteConnection_finalizePreparedStatementWithSquiDBSQLiteConnection_PreparedStatement_(this$0_, oldValue);
  }
}

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer {
  [((id<SquiDBPrinter>) nil_chk(printer)) printlnWithNSString:@"  Prepared statement cache:"];
  id<JavaUtilMap> cache = [self snapshot];
  if (![((id<JavaUtilMap>) nil_chk(cache)) isEmpty]) {
    jint i = 0;
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([cache entrySet])) {
      SquiDBSQLiteConnection_PreparedStatement *statement = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (((SquiDBSQLiteConnection_PreparedStatement *) nil_chk(statement))->mInCache_) {
        NSString *sql = [entry_ getKey];
        [printer printlnWithNSString:JreStrcat("$I$$$I$I$Z$$C", @"    ", i, @": statementPtr=0x", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(statement->mStatementPtr_)), @", numParameters=", statement->mNumParameters_, @", type=", statement->mType_, @", readOnly=", statement->mReadOnly_, @", sql=\"", SquiDBSQLiteConnection_trimSqlForDisplayWithNSString_(sql), '"')];
      }
      i += 1;
    }
  }
  else {
    [printer printlnWithNSString:@"    <none>"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBSQLiteConnection:withInt:);
  methods[1].selector = @selector(entryRemovedWithBoolean:withId:withId:withId:);
  methods[2].selector = @selector(dumpWithSquiDBPrinter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LSquiDBSQLiteConnection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSQLiteConnection;I", "entryRemoved", "ZLNSString;LSquiDBSQLiteConnection_PreparedStatement;LSquiDBSQLiteConnection_PreparedStatement;", "dump", "LSquiDBPrinter;", "LSquiDBSQLiteConnection;", "Lcom/yahoo/android/sqlite/LruCache<Ljava/lang/String;Lcom/yahoo/android/sqlite/SQLiteConnection$PreparedStatement;>;" };
  static const J2ObjcClassInfo _SquiDBSQLiteConnection_PreparedStatementCache = { "PreparedStatementCache", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x12, 3, 1, 5, -1, -1, 6, -1 };
  return &_SquiDBSQLiteConnection_PreparedStatementCache;
}

@end

void SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(SquiDBSQLiteConnection_PreparedStatementCache *self, SquiDBSQLiteConnection *outer$, jint size) {
  self->this$0_ = outer$;
  SquiDBLruCache_initWithInt_(self, size);
}

SquiDBSQLiteConnection_PreparedStatementCache *new_SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(SquiDBSQLiteConnection *outer$, jint size) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteConnection_PreparedStatementCache, initWithSquiDBSQLiteConnection_withInt_, outer$, size)
}

SquiDBSQLiteConnection_PreparedStatementCache *create_SquiDBSQLiteConnection_PreparedStatementCache_initWithSquiDBSQLiteConnection_withInt_(SquiDBSQLiteConnection *outer$, jint size) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteConnection_PreparedStatementCache, initWithSquiDBSQLiteConnection_withInt_, outer$, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteConnection_PreparedStatementCache)

@implementation SquiDBSQLiteConnection_OperationLog

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSQLiteConnection_OperationLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)beginOperationWithNSString:(NSString *)kind
                      withNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  @synchronized(mOperations_) {
    jint index = JreIntMod((mIndex_ + 1), SquiDBSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS);
    SquiDBSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation == nil) {
      operation = new_SquiDBSQLiteConnection_Operation_init();
      (void) IOSObjectArray_Set(mOperations_, index, operation);
    }
    else {
      operation->mFinished_ = false;
      operation->mException_ = nil;
      if (operation->mBindArgs_ != nil) {
        [operation->mBindArgs_ clear];
      }
    }
    operation->mStartTime_ = JavaLangSystem_currentTimeMillis();
    operation->mKind_ = kind;
    operation->mSql_ = sql;
    if (bindArgs != nil) {
      if (operation->mBindArgs_ == nil) {
        operation->mBindArgs_ = new_JavaUtilArrayList_init();
      }
      else {
        [operation->mBindArgs_ clear];
      }
      for (jint i = 0; i < bindArgs->size_; i++) {
        id arg = IOSObjectArray_Get(bindArgs, i);
        if (arg != nil && [arg isKindOfClass:[IOSByteArray class]]) {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:JreLoadStatic(SquiDBSQLiteConnection, EMPTY_BYTE_ARRAY)];
        }
        else {
          [((JavaUtilArrayList *) nil_chk(operation->mBindArgs_)) addWithId:arg];
        }
      }
    }
    operation->mCookie_ = SquiDBSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
    mIndex_ = index;
    return operation->mCookie_;
  }
}

- (void)failOperationWithInt:(jint)cookie
       withJavaLangException:(JavaLangException *)ex {
  @synchronized(mOperations_) {
    SquiDBSQLiteConnection_Operation *operation = SquiDBSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
    if (operation != nil) {
      operation->mException_ = ex;
    }
  }
}

- (void)endOperationWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    if (SquiDBSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie)) {
      SquiDBSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, nil);
    }
  }
}

- (jboolean)endOperationDeferLogWithInt:(jint)cookie {
  @synchronized(mOperations_) {
    return SquiDBSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
  }
}

- (void)logOperationWithInt:(jint)cookie
               withNSString:(NSString *)detail {
  @synchronized(mOperations_) {
    SquiDBSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
  }
}

- (jboolean)endOperationDeferLogLockedWithInt:(jint)cookie {
  return SquiDBSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(self, cookie);
}

- (void)logOperationLockedWithInt:(jint)cookie
                     withNSString:(NSString *)detail {
  SquiDBSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(self, cookie, detail);
}

- (jint)newOperationCookieLockedWithInt:(jint)index {
  return SquiDBSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(self, index);
}

- (SquiDBSQLiteConnection_Operation *)getOperationLockedWithInt:(jint)cookie {
  return SquiDBSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
}

- (NSString *)describeCurrentOperation {
  @synchronized(mOperations_) {
    SquiDBSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), mIndex_);
    if (operation != nil && !operation->mFinished_) {
      JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
      [operation describeWithJavaLangStringBuilder:msg withBoolean:false];
      return [msg description];
    }
    return nil;
  }
}

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                  withBoolean:(jboolean)verbose {
  @synchronized(mOperations_) {
    [((id<SquiDBPrinter>) nil_chk(printer)) printlnWithNSString:@"  Most recently executed operations:"];
    jint index = mIndex_;
    SquiDBSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(mOperations_), index);
    if (operation != nil) {
      jint n = 0;
      do {
        JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"    "])) appendWithInt:n])) appendWithNSString:@": ["];
        (void) [msg appendWithNSString:SquiDBSQLiteConnection_Operation_getFormattedStartTime(operation)];
        (void) [msg appendWithNSString:@"] "];
        [operation describeWithJavaLangStringBuilder:msg withBoolean:verbose];
        [printer printlnWithNSString:[msg description]];
        if (index > 0) {
          index -= 1;
        }
        else {
          index = SquiDBSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS - 1;
        }
        n += 1;
        operation = IOSObjectArray_Get(mOperations_, index);
      }
      while (operation != nil && n < SquiDBSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS);
    }
    else {
      [printer printlnWithNSString:@"    <none>"];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 5, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteConnection_Operation;", 0x2, 12, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(beginOperationWithNSString:withNSString:withNSObjectArray:);
  methods[2].selector = @selector(failOperationWithInt:withJavaLangException:);
  methods[3].selector = @selector(endOperationWithInt:);
  methods[4].selector = @selector(endOperationDeferLogWithInt:);
  methods[5].selector = @selector(logOperationWithInt:withNSString:);
  methods[6].selector = @selector(endOperationDeferLogLockedWithInt:);
  methods[7].selector = @selector(logOperationLockedWithInt:withNSString:);
  methods[8].selector = @selector(newOperationCookieLockedWithInt:);
  methods[9].selector = @selector(getOperationLockedWithInt:);
  methods[10].selector = @selector(describeCurrentOperation);
  methods[11].selector = @selector(dumpWithSquiDBPrinter:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_RECENT_OPERATIONS", "I", .constantValue.asInt = SquiDBSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS, 0x1a, -1, -1, -1, -1 },
    { "COOKIE_GENERATION_SHIFT", "I", .constantValue.asInt = SquiDBSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "COOKIE_INDEX_MASK", "I", .constantValue.asInt = SquiDBSQLiteConnection_OperationLog_COOKIE_INDEX_MASK, 0x1a, -1, -1, -1, -1 },
    { "mOperations_", "[LSquiDBSQLiteConnection_Operation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGeneration_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "beginOperation", "LNSString;LNSString;[LNSObject;", "failOperation", "ILJavaLangException;", "endOperation", "I", "endOperationDeferLog", "logOperation", "ILNSString;", "endOperationDeferLogLocked", "logOperationLocked", "newOperationCookieLocked", "getOperationLocked", "dump", "LSquiDBPrinter;Z", "LSquiDBSQLiteConnection;" };
  static const J2ObjcClassInfo _SquiDBSQLiteConnection_OperationLog = { "OperationLog", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x1a, 12, 6, 15, -1, -1, -1, -1 };
  return &_SquiDBSQLiteConnection_OperationLog;
}

@end

void SquiDBSQLiteConnection_OperationLog_init(SquiDBSQLiteConnection_OperationLog *self) {
  NSObject_init(self);
  self->mOperations_ = [IOSObjectArray newArrayWithLength:SquiDBSQLiteConnection_OperationLog_MAX_RECENT_OPERATIONS type:SquiDBSQLiteConnection_Operation_class_()];
}

SquiDBSQLiteConnection_OperationLog *new_SquiDBSQLiteConnection_OperationLog_init() {
  J2OBJC_NEW_IMPL(SquiDBSQLiteConnection_OperationLog, init)
}

SquiDBSQLiteConnection_OperationLog *create_SquiDBSQLiteConnection_OperationLog_init() {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteConnection_OperationLog, init)
}

jboolean SquiDBSQLiteConnection_OperationLog_endOperationDeferLogLockedWithInt_(SquiDBSQLiteConnection_OperationLog *self, jint cookie) {
  SquiDBSQLiteConnection_Operation *operation = SquiDBSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  if (operation != nil) {
    operation->mEndTime_ = JavaLangSystem_currentTimeMillis();
    operation->mFinished_ = true;
    return false;
  }
  return false;
}

void SquiDBSQLiteConnection_OperationLog_logOperationLockedWithInt_withNSString_(SquiDBSQLiteConnection_OperationLog *self, jint cookie, NSString *detail) {
  SquiDBSQLiteConnection_Operation *operation = SquiDBSQLiteConnection_OperationLog_getOperationLockedWithInt_(self, cookie);
  JavaLangStringBuilder *msg = new_JavaLangStringBuilder_init();
  [((SquiDBSQLiteConnection_Operation *) nil_chk(operation)) describeWithJavaLangStringBuilder:msg withBoolean:false];
  if (detail != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", "])) appendWithNSString:detail];
  }
  SquiDBLogger_dWithNSString_withNSString_(SquiDBSQLiteConnection_TAG, [msg description]);
}

jint SquiDBSQLiteConnection_OperationLog_newOperationCookieLockedWithInt_(SquiDBSQLiteConnection_OperationLog *self, jint index) {
  jint generation = self->mGeneration_++;
  return (JreLShift32(generation, SquiDBSQLiteConnection_OperationLog_COOKIE_GENERATION_SHIFT)) | index;
}

SquiDBSQLiteConnection_Operation *SquiDBSQLiteConnection_OperationLog_getOperationLockedWithInt_(SquiDBSQLiteConnection_OperationLog *self, jint cookie) {
  jint index = cookie & SquiDBSQLiteConnection_OperationLog_COOKIE_INDEX_MASK;
  SquiDBSQLiteConnection_Operation *operation = IOSObjectArray_Get(nil_chk(self->mOperations_), index);
  return ((SquiDBSQLiteConnection_Operation *) nil_chk(operation))->mCookie_ == cookie ? operation : nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteConnection_OperationLog)

J2OBJC_INITIALIZED_DEFN(SquiDBSQLiteConnection_Operation)

@implementation SquiDBSQLiteConnection_Operation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSQLiteConnection_Operation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)describeWithJavaLangStringBuilder:(JavaLangStringBuilder *)msg
                              withBoolean:(jboolean)verbose {
  (void) [((JavaLangStringBuilder *) nil_chk(msg)) appendWithNSString:mKind_];
  if (mFinished_) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" took "])) appendWithLong:mEndTime_ - mStartTime_])) appendWithNSString:@"ms"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" started "])) appendWithLong:JavaLangSystem_currentTimeMillis() - mStartTime_])) appendWithNSString:@"ms ago"];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@" - "])) appendWithNSString:SquiDBSQLiteConnection_Operation_getStatus(self)];
  if (mSql_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", sql=\""])) appendWithNSString:SquiDBSQLiteConnection_trimSqlForDisplayWithNSString_(mSql_)])) appendWithNSString:@"\""];
  }
  if (verbose && mBindArgs_ != nil && [mBindArgs_ size] != 0) {
    (void) [msg appendWithNSString:@", bindArgs=["];
    jint count = [((JavaUtilArrayList *) nil_chk(mBindArgs_)) size];
    for (jint i = 0; i < count; i++) {
      id arg = [((JavaUtilArrayList *) nil_chk(mBindArgs_)) getWithInt:i];
      if (i != 0) {
        (void) [msg appendWithNSString:@", "];
      }
      if (arg == nil) {
        (void) [msg appendWithNSString:@"null"];
      }
      else if ([arg isKindOfClass:[IOSByteArray class]]) {
        (void) [msg appendWithNSString:@"<byte[]>"];
      }
      else if ([arg isKindOfClass:[NSString class]]) {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@"\""])) appendWithNSString:(NSString *) arg])) appendWithNSString:@"\""];
      }
      else {
        (void) [msg appendWithId:arg];
      }
    }
    (void) [msg appendWithNSString:@"]"];
  }
  if (mException_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithNSString:@", exception=\""])) appendWithNSString:[((JavaLangException *) nil_chk(mException_)) getMessage]])) appendWithNSString:@"\""];
  }
}

- (NSString *)getStatus {
  return SquiDBSQLiteConnection_Operation_getStatus(self);
}

- (NSString *)getFormattedStartTime {
  return SquiDBSQLiteConnection_Operation_getFormattedStartTime(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(describeWithJavaLangStringBuilder:withBoolean:);
  methods[2].selector = @selector(getStatus);
  methods[3].selector = @selector(getFormattedStartTime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sDateFormat", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "mStartTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mEndTime_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mKind_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBindArgs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1, -1, -1, 3, -1 },
    { "mFinished_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mException_", "LJavaLangException;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCookie_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "describe", "LJavaLangStringBuilder;Z", &SquiDBSQLiteConnection_Operation_sDateFormat, "Ljava/util/ArrayList<Ljava/lang/Object;>;", "LSquiDBSQLiteConnection;" };
  static const J2ObjcClassInfo _SquiDBSQLiteConnection_Operation = { "Operation", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x1a, 4, 9, 4, -1, -1, -1, -1 };
  return &_SquiDBSQLiteConnection_Operation;
}

+ (void)initialize {
  if (self == [SquiDBSQLiteConnection_Operation class]) {
    SquiDBSQLiteConnection_Operation_sDateFormat = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd HH:mm:ss.SSS");
    J2OBJC_SET_INITIALIZED(SquiDBSQLiteConnection_Operation)
  }
}

@end

void SquiDBSQLiteConnection_Operation_init(SquiDBSQLiteConnection_Operation *self) {
  NSObject_init(self);
}

SquiDBSQLiteConnection_Operation *new_SquiDBSQLiteConnection_Operation_init() {
  J2OBJC_NEW_IMPL(SquiDBSQLiteConnection_Operation, init)
}

SquiDBSQLiteConnection_Operation *create_SquiDBSQLiteConnection_Operation_init() {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteConnection_Operation, init)
}

NSString *SquiDBSQLiteConnection_Operation_getStatus(SquiDBSQLiteConnection_Operation *self) {
  if (!self->mFinished_) {
    return @"running";
  }
  return self->mException_ != nil ? @"failed" : @"succeeded";
}

NSString *SquiDBSQLiteConnection_Operation_getFormattedStartTime(SquiDBSQLiteConnection_Operation *self) {
  return [((JavaTextSimpleDateFormat *) nil_chk(SquiDBSQLiteConnection_Operation_sDateFormat)) formatWithJavaUtilDate:new_JavaUtilDate_initWithLong_(self->mStartTime_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteConnection_Operation)
