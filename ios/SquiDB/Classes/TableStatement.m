//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TableStatement.java
//

#include "CompilableWithArguments.h"
#include "CompileContext.h"
#include "CompiledArgumentResolver.h"
#include "CompiledStatement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SqlBuilder.h"
#include "SqlTable.h"
#include "TableStatement.h"
#include "VersionCode.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"

@interface SquiDBTableStatement () {
 @public
  SquiDBCompiledArgumentResolver *compiledArgumentResolver_;
}

@end

J2OBJC_FIELD_SETTER(SquiDBTableStatement, compiledArgumentResolver_, SquiDBCompiledArgumentResolver *)

__attribute__((unused)) static SquiDBCompiledStatement *SquiDBTableStatement_compileWithSquiDBCompileContext_(SquiDBTableStatement *self, SquiDBCompileContext *compileContext);

__attribute__((unused)) static NSString *SquiDBTableStatement_sqlForValidationWithSquiDBCompileContext_(SquiDBTableStatement *self, SquiDBCompileContext *compileContext);

__attribute__((unused)) static IOSObjectArray *SquiDBTableStatement__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *SquiDBTableStatement__Annotations$1(void);

__attribute__((unused)) static void SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(SquiDBTableStatement_ConflictAlgorithm *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static SquiDBTableStatement_ConflictAlgorithm *new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation SquiDBTableStatement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBTableStatement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (SquiDBCompiledStatement *)compileWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion {
  @synchronized(self) {
    return SquiDBTableStatement_compileWithSquiDBCompileContext_(self, SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(sqliteVersion));
  }
}

- (SquiDBCompiledStatement *)compileWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext {
  return SquiDBTableStatement_compileWithSquiDBCompileContext_(self, compileContext);
}

- (NSString *)sqlForValidationWithSquiDBVersionCode:(SquiDBVersionCode *)sqliteVersion {
  return SquiDBTableStatement_sqlForValidationWithSquiDBCompileContext_(self, SquiDBCompileContext_defaultContextForVersionCodeWithSquiDBVersionCode_(sqliteVersion));
}

- (NSString *)sqlForValidationWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext {
  return SquiDBTableStatement_sqlForValidationWithSquiDBCompileContext_(self, compileContext);
}

- (SquiDBSqlTable *)getTable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)invalidateCompileCache {
  @synchronized(self) {
    compiledArgumentResolver_ = nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompiledStatement;", 0x31, 0, 1, -1, -1, 2, -1 },
    { NULL, "LSquiDBCompiledStatement;", 0x31, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 4, 1, -1, -1, 5, -1 },
    { NULL, "LNSString;", 0x11, 4, 3, -1, -1, -1, -1 },
    { NULL, "LSquiDBSqlTable;", 0x401, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x34, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compileWithSquiDBVersionCode:);
  methods[2].selector = @selector(compileWithSquiDBCompileContext:);
  methods[3].selector = @selector(sqlForValidationWithSquiDBVersionCode:);
  methods[4].selector = @selector(sqlForValidationWithSquiDBCompileContext:);
  methods[5].selector = @selector(getTable);
  methods[6].selector = @selector(invalidateCompileCache);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "compiledArgumentResolver_", "LSquiDBCompiledArgumentResolver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compile", "LSquiDBVersionCode;", (void *)&SquiDBTableStatement__Annotations$0, "LSquiDBCompileContext;", "sqlForValidation", (void *)&SquiDBTableStatement__Annotations$1, "()Lcom/yahoo/squidb/sql/SqlTable<*>;", "LSquiDBTableStatement_ConflictAlgorithm;" };
  static const J2ObjcClassInfo _SquiDBTableStatement = { "TableStatement", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, 7, -1, -1, -1 };
  return &_SquiDBTableStatement;
}

@end

void SquiDBTableStatement_init(SquiDBTableStatement *self) {
  SquiDBCompilableWithArguments_initPackagePrivate(self);
  self->compiledArgumentResolver_ = nil;
}

SquiDBCompiledStatement *SquiDBTableStatement_compileWithSquiDBCompileContext_(SquiDBTableStatement *self, SquiDBCompileContext *compileContext) {
  @synchronized(self) {
    if (self->compiledArgumentResolver_ == nil) {
      SquiDBSqlBuilder *builder = [self buildSqlWithSquiDBCompileContext:compileContext withBoolean:true withBoolean:false];
      self->compiledArgumentResolver_ = new_SquiDBCompiledArgumentResolver_initPackagePrivateWithSquiDBSqlBuilder_(builder);
    }
    return [self->compiledArgumentResolver_ resolveToCompiledStatement];
  }
}

NSString *SquiDBTableStatement_sqlForValidationWithSquiDBCompileContext_(SquiDBTableStatement *self, SquiDBCompileContext *compileContext) {
  SquiDBSqlBuilder *builder = [self buildSqlWithSquiDBCompileContext:compileContext withBoolean:true withBoolean:true];
  return ((SquiDBCompiledStatement *) nil_chk([new_SquiDBCompiledArgumentResolver_initPackagePrivateWithSquiDBSqlBuilder_(builder) resolveToCompiledStatement]))->sql_;
}

IOSObjectArray *SquiDBTableStatement__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBTableStatement__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTableStatement)

J2OBJC_NAME_MAPPING(SquiDBTableStatement, "com.yahoo.squidb.sql", "SquiDB")

J2OBJC_INITIALIZED_DEFN(SquiDBTableStatement_ConflictAlgorithm)

SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_values_[6];

@implementation SquiDBTableStatement_ConflictAlgorithm

+ (SquiDBTableStatement_ConflictAlgorithm *)NONE {
  return JreEnum(SquiDBTableStatement_ConflictAlgorithm, NONE);
}

+ (SquiDBTableStatement_ConflictAlgorithm *)ROLLBACK {
  return JreEnum(SquiDBTableStatement_ConflictAlgorithm, ROLLBACK);
}

+ (SquiDBTableStatement_ConflictAlgorithm *)ABORT {
  return JreEnum(SquiDBTableStatement_ConflictAlgorithm, ABORT);
}

+ (SquiDBTableStatement_ConflictAlgorithm *)FAIL {
  return JreEnum(SquiDBTableStatement_ConflictAlgorithm, FAIL);
}

+ (SquiDBTableStatement_ConflictAlgorithm *)IGNORE {
  return JreEnum(SquiDBTableStatement_ConflictAlgorithm, IGNORE);
}

+ (SquiDBTableStatement_ConflictAlgorithm *)REPLACE {
  return JreEnum(SquiDBTableStatement_ConflictAlgorithm, REPLACE);
}

+ (IOSObjectArray *)values {
  return SquiDBTableStatement_ConflictAlgorithm_values();
}

+ (SquiDBTableStatement_ConflictAlgorithm *)valueOfWithNSString:(NSString *)name {
  return SquiDBTableStatement_ConflictAlgorithm_valueOfWithNSString_(name);
}

- (SquiDBTableStatement_ConflictAlgorithm_Enum)toNSEnum {
  return (SquiDBTableStatement_ConflictAlgorithm_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LSquiDBTableStatement_ConflictAlgorithm;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBTableStatement_ConflictAlgorithm;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LSquiDBTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ROLLBACK", "LSquiDBTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "ABORT", "LSquiDBTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "FAIL", "LSquiDBTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "IGNORE", "LSquiDBTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "REPLACE", "LSquiDBTableStatement_ConflictAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(SquiDBTableStatement_ConflictAlgorithm, NONE), &JreEnum(SquiDBTableStatement_ConflictAlgorithm, ROLLBACK), &JreEnum(SquiDBTableStatement_ConflictAlgorithm, ABORT), &JreEnum(SquiDBTableStatement_ConflictAlgorithm, FAIL), &JreEnum(SquiDBTableStatement_ConflictAlgorithm, IGNORE), &JreEnum(SquiDBTableStatement_ConflictAlgorithm, REPLACE), "LSquiDBTableStatement;", "Ljava/lang/Enum<Lcom/yahoo/squidb/sql/TableStatement$ConflictAlgorithm;>;" };
  static const J2ObjcClassInfo _SquiDBTableStatement_ConflictAlgorithm = { "ConflictAlgorithm", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x4019, 2, 6, 8, -1, -1, 9, -1 };
  return &_SquiDBTableStatement_ConflictAlgorithm;
}

+ (void)initialize {
  if (self == [SquiDBTableStatement_ConflictAlgorithm class]) {
    JreEnum(SquiDBTableStatement_ConflictAlgorithm, NONE) = new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(JreEnumConstantName(SquiDBTableStatement_ConflictAlgorithm_class_(), 0), 0);
    JreEnum(SquiDBTableStatement_ConflictAlgorithm, ROLLBACK) = new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(JreEnumConstantName(SquiDBTableStatement_ConflictAlgorithm_class_(), 1), 1);
    JreEnum(SquiDBTableStatement_ConflictAlgorithm, ABORT) = new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(JreEnumConstantName(SquiDBTableStatement_ConflictAlgorithm_class_(), 2), 2);
    JreEnum(SquiDBTableStatement_ConflictAlgorithm, FAIL) = new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(JreEnumConstantName(SquiDBTableStatement_ConflictAlgorithm_class_(), 3), 3);
    JreEnum(SquiDBTableStatement_ConflictAlgorithm, IGNORE) = new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(JreEnumConstantName(SquiDBTableStatement_ConflictAlgorithm_class_(), 4), 4);
    JreEnum(SquiDBTableStatement_ConflictAlgorithm, REPLACE) = new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(JreEnumConstantName(SquiDBTableStatement_ConflictAlgorithm_class_(), 5), 5);
    J2OBJC_SET_INITIALIZED(SquiDBTableStatement_ConflictAlgorithm)
  }
}

@end

void SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(SquiDBTableStatement_ConflictAlgorithm *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

SquiDBTableStatement_ConflictAlgorithm *new_SquiDBTableStatement_ConflictAlgorithm_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(SquiDBTableStatement_ConflictAlgorithm, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *SquiDBTableStatement_ConflictAlgorithm_values() {
  SquiDBTableStatement_ConflictAlgorithm_initialize();
  return [IOSObjectArray arrayWithObjects:SquiDBTableStatement_ConflictAlgorithm_values_ count:6 type:SquiDBTableStatement_ConflictAlgorithm_class_()];
}

SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_valueOfWithNSString_(NSString *name) {
  SquiDBTableStatement_ConflictAlgorithm_initialize();
  for (int i = 0; i < 6; i++) {
    SquiDBTableStatement_ConflictAlgorithm *e = SquiDBTableStatement_ConflictAlgorithm_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

SquiDBTableStatement_ConflictAlgorithm *SquiDBTableStatement_ConflictAlgorithm_fromOrdinal(NSUInteger ordinal) {
  SquiDBTableStatement_ConflictAlgorithm_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return SquiDBTableStatement_ConflictAlgorithm_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTableStatement_ConflictAlgorithm)
