//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Criterion.java
//

#include "CompilableWithArguments.h"
#include "ConjunctionCriterion.h"
#include "Criterion.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "NegationCriterion.h"
#include "Operator.h"
#include "Query.h"
#include "SqlBuilder.h"
#include "SqlUtils.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface SquiDBCriterion_1 : SquiDBCriterion {
 @public
  SquiDBQuery *val$query_;
}

- (instancetype)initWithSquiDBQuery:(SquiDBQuery *)capture$0
                 withSquiDBOperator:(SquiDBOperator *)operator_;

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBCriterion_1)

__attribute__((unused)) static void SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(SquiDBCriterion_1 *self, SquiDBQuery *capture$0, SquiDBOperator *operator_);

__attribute__((unused)) static SquiDBCriterion_1 *new_SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(SquiDBQuery *capture$0, SquiDBOperator *operator_) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBCriterion_1 *create_SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(SquiDBQuery *capture$0, SquiDBOperator *operator_);

@interface SquiDBCriterion_2 : SquiDBCriterion {
 @public
  NSString *val$selection_;
  IOSObjectArray *val$selectionArgs_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
               withNSStringArray:(IOSObjectArray *)capture$1
              withSquiDBOperator:(SquiDBOperator *)operator_;

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBCriterion_2)

__attribute__((unused)) static void SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(SquiDBCriterion_2 *self, NSString *capture$0, IOSObjectArray *capture$1, SquiDBOperator *operator_);

__attribute__((unused)) static SquiDBCriterion_2 *new_SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(NSString *capture$0, IOSObjectArray *capture$1, SquiDBOperator *operator_) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBCriterion_2 *create_SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(NSString *capture$0, IOSObjectArray *capture$1, SquiDBOperator *operator_);

@interface SquiDBCriterion_3 : SquiDBCriterion {
 @public
  id val$value_;
}

- (instancetype)initWithId:(id)capture$0
        withSquiDBOperator:(SquiDBOperator *)operator_;

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBCriterion_3)

__attribute__((unused)) static void SquiDBCriterion_3_initWithId_withSquiDBOperator_(SquiDBCriterion_3 *self, id capture$0, SquiDBOperator *operator_);

__attribute__((unused)) static SquiDBCriterion_3 *new_SquiDBCriterion_3_initWithId_withSquiDBOperator_(id capture$0, SquiDBOperator *operator_) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBCriterion_3 *create_SquiDBCriterion_3_initWithId_withSquiDBOperator_(id capture$0, SquiDBOperator *operator_);

@implementation SquiDBCriterion

- (instancetype)initWithSquiDBOperator:(SquiDBOperator *)operator_ {
  SquiDBCriterion_initWithSquiDBOperator_(self, operator_);
  return self;
}

+ (SquiDBCriterion *)and__WithSquiDBCriterion:(SquiDBCriterion *)criterion
                     withSquiDBCriterionArray:(IOSObjectArray *)criterions {
  return SquiDBCriterion_and__WithSquiDBCriterion_withSquiDBCriterionArray_(criterion, criterions);
}

+ (SquiDBCriterion *)and__WithJavaUtilList:(id<JavaUtilList>)criterions {
  return SquiDBCriterion_and__WithJavaUtilList_(criterions);
}

+ (SquiDBCriterion *)or__WithSquiDBCriterion:(SquiDBCriterion *)criterion
                    withSquiDBCriterionArray:(IOSObjectArray *)criterions {
  return SquiDBCriterion_or__WithSquiDBCriterion_withSquiDBCriterionArray_(criterion, criterions);
}

+ (SquiDBCriterion *)or__WithJavaUtilList:(id<JavaUtilList>)criterions {
  return SquiDBCriterion_or__WithJavaUtilList_(criterions);
}

+ (SquiDBCriterion *)not__WithSquiDBCriterion:(SquiDBCriterion *)criterion {
  return SquiDBCriterion_not__WithSquiDBCriterion_(criterion);
}

+ (SquiDBCriterion *)existsWithSquiDBQuery:(SquiDBQuery *)query {
  return SquiDBCriterion_existsWithSquiDBQuery_(query);
}

+ (SquiDBCriterion *)fromRawSelectionWithNSString:(NSString *)selection
                                withNSStringArray:(IOSObjectArray *)selectionArgs {
  return SquiDBCriterion_fromRawSelectionWithNSString_withNSStringArray_(selection, selectionArgs);
}

+ (SquiDBCriterion *)literalWithId:(id)value {
  return SquiDBCriterion_literalWithId_(value);
}

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)appendToSqlBuilderWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                   withBoolean:(jboolean)forSqlValidation {
  (void) [((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@"("];
  [self populateWithSquiDBSqlBuilder:builder withBoolean:forSqlValidation];
  (void) [builder->sql_ appendWithNSString:@")"];
}

- (SquiDBCriterion *)negate {
  return SquiDBCriterion_not__WithSquiDBCriterion_(self);
}

- (SquiDBCriterion *)and__WithSquiDBCriterion:(SquiDBCriterion *)criterion {
  if (criterion == nil) {
    return self;
  }
  return SquiDBCriterion_and__WithSquiDBCriterion_withSquiDBCriterionArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){ criterion } count:1 type:SquiDBCriterion_class_()]);
}

- (SquiDBCriterion *)or__WithSquiDBCriterion:(SquiDBCriterion *)criterion {
  if (criterion == nil) {
    return self;
  }
  return SquiDBCriterion_or__WithSquiDBCriterion_withSquiDBCriterionArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){ criterion } count:1 type:SquiDBCriterion_class_()]);
}

- (jboolean)isEqual:(id)o {
  return self == o || (!(o == nil || [self java_getClass] != [o java_getClass]) && [((NSString *) nil_chk([self description])) isEqual:[nil_chk(o) description]]);
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x89, 1, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x9, 1, 3, -1, 4, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x89, 5, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x9, 5, 3, -1, 4, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 15, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x1, 1, 7, -1, -1, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBOperator:);
  methods[1].selector = @selector(and__WithSquiDBCriterion:withSquiDBCriterionArray:);
  methods[2].selector = @selector(and__WithJavaUtilList:);
  methods[3].selector = @selector(or__WithSquiDBCriterion:withSquiDBCriterionArray:);
  methods[4].selector = @selector(or__WithJavaUtilList:);
  methods[5].selector = @selector(not__WithSquiDBCriterion:);
  methods[6].selector = @selector(existsWithSquiDBQuery:);
  methods[7].selector = @selector(fromRawSelectionWithNSString:withNSStringArray:);
  methods[8].selector = @selector(literalWithId:);
  methods[9].selector = @selector(populateWithSquiDBSqlBuilder:withBoolean:);
  methods[10].selector = @selector(appendToSqlBuilderWithSquiDBSqlBuilder:withBoolean:);
  methods[11].selector = @selector(negate);
  methods[12].selector = @selector(and__WithSquiDBCriterion:);
  methods[13].selector = @selector(or__WithSquiDBCriterion:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "operator__", "LSquiDBOperator;", .constantValue.asLong = 0, 0x14, 19, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBOperator;", "and", "LSquiDBCriterion;[LSquiDBCriterion;", "LJavaUtilList;", "(Ljava/util/List<Lcom/yahoo/squidb/sql/Criterion;>;)Lcom/yahoo/squidb/sql/Criterion;", "or", "not", "LSquiDBCriterion;", "exists", "LSquiDBQuery;", "fromRawSelection", "LNSString;[LNSString;", "literal", "LNSObject;", "populate", "LSquiDBSqlBuilder;Z", "appendToSqlBuilder", "equals", "hashCode", "operator" };
  static const J2ObjcClassInfo _SquiDBCriterion = { "Criterion", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x401, 16, 1, -1, -1, -1, -1, -1 };
  return &_SquiDBCriterion;
}

@end

void SquiDBCriterion_initWithSquiDBOperator_(SquiDBCriterion *self, SquiDBOperator *operator_) {
  SquiDBCompilableWithArguments_initPackagePrivate(self);
  self->operator__ = operator_;
}

SquiDBCriterion *SquiDBCriterion_and__WithSquiDBCriterion_withSquiDBCriterionArray_(SquiDBCriterion *criterion, IOSObjectArray *criterions) {
  SquiDBCriterion_initialize();
  return new_SquiDBConjunctionCriterion_initPackagePrivateWithSquiDBOperator_withSquiDBCriterion_withSquiDBCriterionArray_(JreLoadEnum(SquiDBOperator, and), criterion, criterions);
}

SquiDBCriterion *SquiDBCriterion_and__WithJavaUtilList_(id<JavaUtilList> criterions) {
  SquiDBCriterion_initialize();
  return new_SquiDBConjunctionCriterion_initPackagePrivateWithSquiDBOperator_withJavaUtilList_(JreLoadEnum(SquiDBOperator, and), criterions);
}

SquiDBCriterion *SquiDBCriterion_or__WithSquiDBCriterion_withSquiDBCriterionArray_(SquiDBCriterion *criterion, IOSObjectArray *criterions) {
  SquiDBCriterion_initialize();
  return new_SquiDBConjunctionCriterion_initPackagePrivateWithSquiDBOperator_withSquiDBCriterion_withSquiDBCriterionArray_(JreLoadEnum(SquiDBOperator, or), criterion, criterions);
}

SquiDBCriterion *SquiDBCriterion_or__WithJavaUtilList_(id<JavaUtilList> criterions) {
  SquiDBCriterion_initialize();
  return new_SquiDBConjunctionCriterion_initPackagePrivateWithSquiDBOperator_withJavaUtilList_(JreLoadEnum(SquiDBOperator, or), criterions);
}

SquiDBCriterion *SquiDBCriterion_not__WithSquiDBCriterion_(SquiDBCriterion *criterion) {
  SquiDBCriterion_initialize();
  return new_SquiDBNegationCriterion_initPackagePrivateWithSquiDBCriterion_(criterion);
}

SquiDBCriterion *SquiDBCriterion_existsWithSquiDBQuery_(SquiDBQuery *query) {
  SquiDBCriterion_initialize();
  return new_SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(query, JreLoadEnum(SquiDBOperator, exists));
}

SquiDBCriterion *SquiDBCriterion_fromRawSelectionWithNSString_withNSStringArray_(NSString *selection, IOSObjectArray *selectionArgs) {
  SquiDBCriterion_initialize();
  if (SquiDBSqlUtils_isEmptyWithNSString_(selection)) {
    return nil;
  }
  return new_SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(selection, selectionArgs, nil);
}

SquiDBCriterion *SquiDBCriterion_literalWithId_(id value) {
  SquiDBCriterion_initialize();
  return new_SquiDBCriterion_3_initWithId_withSquiDBOperator_(value, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBCriterion)

J2OBJC_NAME_MAPPING(SquiDBCriterion, "com.yahoo.squidb.sql", "SquiDB")

@implementation SquiDBCriterion_1

- (instancetype)initWithSquiDBQuery:(SquiDBQuery *)capture$0
                 withSquiDBOperator:(SquiDBOperator *)operator_ {
  SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(self, capture$0, operator_);
  return self;
}

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation {
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithId:operator__])) appendWithNSString:@"("];
  [((SquiDBQuery *) nil_chk(val$query_)) appendToSqlBuilderWithSquiDBSqlBuilder:builder withBoolean:forSqlValidation];
  (void) [builder->sql_ appendWithNSString:@")"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBQuery:withSquiDBOperator:);
  methods[1].selector = @selector(populateWithSquiDBSqlBuilder:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$query_", "LSquiDBQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBQuery;LSquiDBOperator;", "populate", "LSquiDBSqlBuilder;Z", "LSquiDBCriterion;", "existsWithSquiDBQuery:" };
  static const J2ObjcClassInfo _SquiDBCriterion_1 = { "", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_SquiDBCriterion_1;
}

@end

void SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(SquiDBCriterion_1 *self, SquiDBQuery *capture$0, SquiDBOperator *operator_) {
  self->val$query_ = capture$0;
  SquiDBCriterion_initWithSquiDBOperator_(self, operator_);
}

SquiDBCriterion_1 *new_SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(SquiDBQuery *capture$0, SquiDBOperator *operator_) {
  J2OBJC_NEW_IMPL(SquiDBCriterion_1, initWithSquiDBQuery_withSquiDBOperator_, capture$0, operator_)
}

SquiDBCriterion_1 *create_SquiDBCriterion_1_initWithSquiDBQuery_withSquiDBOperator_(SquiDBQuery *capture$0, SquiDBOperator *operator_) {
  J2OBJC_CREATE_IMPL(SquiDBCriterion_1, initWithSquiDBQuery_withSquiDBOperator_, capture$0, operator_)
}

@implementation SquiDBCriterion_2

- (instancetype)initWithNSString:(NSString *)capture$0
               withNSStringArray:(IOSObjectArray *)capture$1
              withSquiDBOperator:(SquiDBOperator *)operator_ {
  SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(self, capture$0, capture$1, operator_);
  return self;
}

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation {
  if (forSqlValidation) {
    (void) [((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:@"("];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(((SquiDBSqlBuilder *) nil_chk(builder))->sql_)) appendWithNSString:val$selection_];
  if (val$selectionArgs_ != nil && val$selectionArgs_->size_ > 0) {
    if (builder->args_ == nil) {
      SquiDBLogger_wWithNSString_withNSString_(SquiDBLogger_LOG_TAG, @"Raw selection criterion converted to raw SQL with unbound arguments");
    }
    else {
      JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(builder->args_, val$selectionArgs_);
    }
  }
  if (forSqlValidation) {
    (void) [builder->sql_ appendWithNSString:@")"];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:withSquiDBOperator:);
  methods[1].selector = @selector(populateWithSquiDBSqlBuilder:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$selection_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$selectionArgs_", "[LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;LSquiDBOperator;", "populate", "LSquiDBSqlBuilder;Z", "LSquiDBCriterion;", "fromRawSelectionWithNSString:withNSStringArray:" };
  static const J2ObjcClassInfo _SquiDBCriterion_2 = { "", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_SquiDBCriterion_2;
}

@end

void SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(SquiDBCriterion_2 *self, NSString *capture$0, IOSObjectArray *capture$1, SquiDBOperator *operator_) {
  self->val$selection_ = capture$0;
  self->val$selectionArgs_ = capture$1;
  SquiDBCriterion_initWithSquiDBOperator_(self, operator_);
}

SquiDBCriterion_2 *new_SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(NSString *capture$0, IOSObjectArray *capture$1, SquiDBOperator *operator_) {
  J2OBJC_NEW_IMPL(SquiDBCriterion_2, initWithNSString_withNSStringArray_withSquiDBOperator_, capture$0, capture$1, operator_)
}

SquiDBCriterion_2 *create_SquiDBCriterion_2_initWithNSString_withNSStringArray_withSquiDBOperator_(NSString *capture$0, IOSObjectArray *capture$1, SquiDBOperator *operator_) {
  J2OBJC_CREATE_IMPL(SquiDBCriterion_2, initWithNSString_withNSStringArray_withSquiDBOperator_, capture$0, capture$1, operator_)
}

@implementation SquiDBCriterion_3

- (instancetype)initWithId:(id)capture$0
        withSquiDBOperator:(SquiDBOperator *)operator_ {
  SquiDBCriterion_3_initWithId_withSquiDBOperator_(self, capture$0, operator_);
  return self;
}

- (void)populateWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                         withBoolean:(jboolean)forSqlValidation {
  [((SquiDBSqlBuilder *) nil_chk(builder)) addValueToSqlWithId:val$value_ withBoolean:forSqlValidation];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withSquiDBOperator:);
  methods[1].selector = @selector(populateWithSquiDBSqlBuilder:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LSquiDBOperator;", "populate", "LSquiDBSqlBuilder;Z", "LSquiDBCriterion;", "literalWithId:" };
  static const J2ObjcClassInfo _SquiDBCriterion_3 = { "", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_SquiDBCriterion_3;
}

@end

void SquiDBCriterion_3_initWithId_withSquiDBOperator_(SquiDBCriterion_3 *self, id capture$0, SquiDBOperator *operator_) {
  self->val$value_ = capture$0;
  SquiDBCriterion_initWithSquiDBOperator_(self, operator_);
}

SquiDBCriterion_3 *new_SquiDBCriterion_3_initWithId_withSquiDBOperator_(id capture$0, SquiDBOperator *operator_) {
  J2OBJC_NEW_IMPL(SquiDBCriterion_3, initWithId_withSquiDBOperator_, capture$0, operator_)
}

SquiDBCriterion_3 *create_SquiDBCriterion_3_initWithId_withSquiDBOperator_(id capture$0, SquiDBOperator *operator_) {
  J2OBJC_CREATE_IMPL(SquiDBCriterion_3, initWithId_withSquiDBOperator_, capture$0, operator_)
}
