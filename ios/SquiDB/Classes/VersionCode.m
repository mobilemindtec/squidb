//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/VersionCode.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SqlUtils.h"
#include "VersionCode.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface SquiDBVersionCode () {
 @public
  jint majorVersion_;
  jint minorVersion_;
  jint microVersion_;
  jint nanoVersion_;
  NSString *trailing_;
}

@end

J2OBJC_FIELD_SETTER(SquiDBVersionCode, trailing_, NSString *)

inline NSString *SquiDBVersionCode_get_VERSION_REGEX(void);
static NSString *SquiDBVersionCode_VERSION_REGEX = @"^([\\d]+)(?:\\.([\\d]+))?(?:\\.([\\d]+))?(?:\\.([\\d]+))?((?:[\\w\\-\\(\\)]+\\.)*[\\w\\-\\(\\)]+)?";
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBVersionCode, VERSION_REGEX, NSString *)

inline JavaUtilRegexPattern *SquiDBVersionCode_get_pattern(void);
inline JavaUtilRegexPattern *SquiDBVersionCode_set_pattern(JavaUtilRegexPattern *value);
static JavaUtilRegexPattern *SquiDBVersionCode_pattern;
J2OBJC_STATIC_FIELD_OBJ(SquiDBVersionCode, pattern, JavaUtilRegexPattern *)

__attribute__((unused)) static IOSObjectArray *SquiDBVersionCode__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *SquiDBVersionCode__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *SquiDBVersionCode__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *SquiDBVersionCode__Annotations$3(void);

J2OBJC_INITIALIZED_DEFN(SquiDBVersionCode)

SquiDBVersionCode *SquiDBVersionCode_V3_7_4;
SquiDBVersionCode *SquiDBVersionCode_V3_7_11;
SquiDBVersionCode *SquiDBVersionCode_V3_8_3;
SquiDBVersionCode *SquiDBVersionCode_LATEST;

@implementation SquiDBVersionCode

+ (SquiDBVersionCode *)V3_7_4 {
  return SquiDBVersionCode_V3_7_4;
}

+ (SquiDBVersionCode *)V3_7_11 {
  return SquiDBVersionCode_V3_7_11;
}

+ (SquiDBVersionCode *)V3_8_3 {
  return SquiDBVersionCode_V3_8_3;
}

+ (SquiDBVersionCode *)LATEST {
  return SquiDBVersionCode_LATEST;
}

- (instancetype)initWithInt:(jint)major
                    withInt:(jint)minor
                    withInt:(jint)micro
                    withInt:(jint)nano {
  SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(self, major, minor, micro, nano);
  return self;
}

- (instancetype)initWithInt:(jint)major
                    withInt:(jint)minor
                    withInt:(jint)micro
                    withInt:(jint)nano
               withNSString:(NSString *)trailing {
  SquiDBVersionCode_initWithInt_withInt_withInt_withInt_withNSString_(self, major, minor, micro, nano, trailing);
  return self;
}

- (jint)getMajorVersion {
  return majorVersion_;
}

- (jint)getMinorVersion {
  return minorVersion_;
}

- (jint)getMicroVersion {
  return microVersion_;
}

- (jint)getNanoVersion {
  return nanoVersion_;
}

- (NSString *)getTrailingText {
  return trailing_;
}

- (jboolean)isAtLeastWithSquiDBVersionCode:(SquiDBVersionCode *)version_ {
  return [self compareToWithId:version_] >= 0;
}

- (jboolean)isAtLeastWithNSString:(NSString *)versionString {
  return [self isAtLeastWithSquiDBVersionCode:SquiDBVersionCode_parseWithNSString_(versionString)];
}

- (jboolean)isLessThanWithSquiDBVersionCode:(SquiDBVersionCode *)version_ {
  return [self compareToWithId:version_] < 0;
}

- (jboolean)isLessThanWithNSString:(NSString *)versionString {
  return [self isLessThanWithSquiDBVersionCode:SquiDBVersionCode_parseWithNSString_(versionString)];
}

+ (SquiDBVersionCode *)parseWithNSString:(NSString *)versionString {
  return SquiDBVersionCode_parseWithNSString_(versionString);
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[SquiDBVersionCode class]])) {
    return false;
  }
  SquiDBVersionCode *other = (SquiDBVersionCode *) cast_chk(o, [SquiDBVersionCode class]);
  return [self compareToWithId:other] == 0;
}

- (jint)compareToWithId:(SquiDBVersionCode *)other {
  (void) cast_chk(other, [SquiDBVersionCode class]);
  if (self == other) {
    return 0;
  }
  jint result = self->majorVersion_ - ((SquiDBVersionCode *) nil_chk(other))->majorVersion_;
  if (result != 0) {
    return result;
  }
  result = self->minorVersion_ - other->minorVersion_;
  if (result != 0) {
    return result;
  }
  result = self->microVersion_ - other->microVersion_;
  if (result != 0) {
    return result;
  }
  result = self->nanoVersion_ - other->nanoVersion_;
  if (result != 0) {
    return result;
  }
  if (self->trailing_ == nil) {
    return other->trailing_ == nil ? 0 : -1;
  }
  return other->trailing_ == nil ? 1 : [self->trailing_ compareToWithId:other->trailing_];
}

- (NSString *)description {
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:JavaLangInteger_toStringWithInt_(majorVersion_)])) appendWithChar:'.'])) appendWithNSString:JavaLangInteger_toStringWithInt_(minorVersion_)])) appendWithChar:'.'])) appendWithNSString:JavaLangInteger_toStringWithInt_(microVersion_)];
  if (nanoVersion_ > 0) {
    (void) [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'.'])) appendWithInt:nanoVersion_];
  }
  if (!SquiDBSqlUtils_isEmptyWithNSString_(trailing_)) {
    (void) [builder appendWithNSString:trailing_];
  }
  return [builder description];
}

- (NSUInteger)hash {
  jint hash_ = majorVersion_;
  hash_ = hash_ * 31 + minorVersion_;
  hash_ = hash_ * 31 + microVersion_;
  hash_ = hash_ * 31 + nanoVersion_;
  hash_ = hash_ * 31 + (trailing_ == nil ? 0 : ((jint) [trailing_ hash]));
  return hash_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LSquiDBVersionCode;", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:withNSString:);
  methods[2].selector = @selector(getMajorVersion);
  methods[3].selector = @selector(getMinorVersion);
  methods[4].selector = @selector(getMicroVersion);
  methods[5].selector = @selector(getNanoVersion);
  methods[6].selector = @selector(getTrailingText);
  methods[7].selector = @selector(isAtLeastWithSquiDBVersionCode:);
  methods[8].selector = @selector(isAtLeastWithNSString:);
  methods[9].selector = @selector(isLessThanWithSquiDBVersionCode:);
  methods[10].selector = @selector(isLessThanWithNSString:);
  methods[11].selector = @selector(parseWithNSString:);
  methods[12].selector = @selector(isEqual:);
  methods[13].selector = @selector(compareToWithId:);
  methods[14].selector = @selector(description);
  methods[15].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "V3_7_4", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x19, -1, 12, -1, 13 },
    { "V3_7_11", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x19, -1, 14, -1, 15 },
    { "V3_8_3", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x19, -1, 16, -1, 17 },
    { "LATEST", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x19, -1, 18, -1, 19 },
    { "VERSION_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "pattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "majorVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minorVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "microVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nanoVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "trailing_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "IIIILNSString;", "isAtLeast", "LSquiDBVersionCode;", "LNSString;", "isLessThan", "parse", "equals", "LNSObject;", "compareTo", "toString", "hashCode", &SquiDBVersionCode_V3_7_4, (void *)&SquiDBVersionCode__Annotations$0, &SquiDBVersionCode_V3_7_11, (void *)&SquiDBVersionCode__Annotations$1, &SquiDBVersionCode_V3_8_3, (void *)&SquiDBVersionCode__Annotations$2, &SquiDBVersionCode_LATEST, (void *)&SquiDBVersionCode__Annotations$3, &SquiDBVersionCode_VERSION_REGEX, &SquiDBVersionCode_pattern, "Ljava/lang/Object;Ljava/lang/Comparable<Lcom/yahoo/squidb/utility/VersionCode;>;" };
  static const J2ObjcClassInfo _SquiDBVersionCode = { "VersionCode", "com.yahoo.squidb.utility", ptrTable, methods, fields, 7, 0x1, 16, 11, -1, -1, -1, 22, -1 };
  return &_SquiDBVersionCode;
}

+ (void)initialize {
  if (self == [SquiDBVersionCode class]) {
    SquiDBVersionCode_V3_7_4 = new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(3, 7, 4, 0);
    SquiDBVersionCode_V3_7_11 = new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(3, 7, 11, 0);
    SquiDBVersionCode_V3_8_3 = new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(3, 8, 3, 0);
    SquiDBVersionCode_LATEST = new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(3, 15, 0, 0);
    J2OBJC_SET_INITIALIZED(SquiDBVersionCode)
  }
}

@end

void SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(SquiDBVersionCode *self, jint major, jint minor, jint micro, jint nano) {
  SquiDBVersionCode_initWithInt_withInt_withInt_withInt_withNSString_(self, major, minor, micro, nano, nil);
}

SquiDBVersionCode *new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(jint major, jint minor, jint micro, jint nano) {
  J2OBJC_NEW_IMPL(SquiDBVersionCode, initWithInt_withInt_withInt_withInt_, major, minor, micro, nano)
}

SquiDBVersionCode *create_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(jint major, jint minor, jint micro, jint nano) {
  J2OBJC_CREATE_IMPL(SquiDBVersionCode, initWithInt_withInt_withInt_withInt_, major, minor, micro, nano)
}

void SquiDBVersionCode_initWithInt_withInt_withInt_withInt_withNSString_(SquiDBVersionCode *self, jint major, jint minor, jint micro, jint nano, NSString *trailing) {
  NSObject_init(self);
  if (major < 0 || minor < 0 || micro < 0 || nano < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't use a value less than zero to construct a VersionCode.");
  }
  self->majorVersion_ = major;
  self->minorVersion_ = minor;
  self->microVersion_ = micro;
  self->nanoVersion_ = nano;
  self->trailing_ = trailing;
}

SquiDBVersionCode *new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_withNSString_(jint major, jint minor, jint micro, jint nano, NSString *trailing) {
  J2OBJC_NEW_IMPL(SquiDBVersionCode, initWithInt_withInt_withInt_withInt_withNSString_, major, minor, micro, nano, trailing)
}

SquiDBVersionCode *create_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_withNSString_(jint major, jint minor, jint micro, jint nano, NSString *trailing) {
  J2OBJC_CREATE_IMPL(SquiDBVersionCode, initWithInt_withInt_withInt_withInt_withNSString_, major, minor, micro, nano, trailing)
}

SquiDBVersionCode *SquiDBVersionCode_parseWithNSString_(NSString *versionString) {
  SquiDBVersionCode_initialize();
  if (SquiDBSqlUtils_isEmptyWithNSString_(versionString)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Empty versionString");
  }
  if (SquiDBVersionCode_pattern == nil) {
    SquiDBVersionCode_pattern = JavaUtilRegexPattern_compileWithNSString_(SquiDBVersionCode_VERSION_REGEX);
  }
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(SquiDBVersionCode_pattern)) matcherWithJavaLangCharSequence:[((NSString *) nil_chk(versionString)) java_trim]];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid versionString: ", versionString));
  }
  jint major;
  jint minor;
  jint micro;
  jint nano;
  NSString *majorString = [matcher groupWithInt:1];
  major = JavaLangInteger_parseIntWithNSString_(majorString);
  NSString *minorString = [matcher groupWithInt:2];
  minor = minorString == nil ? 0 : JavaLangInteger_parseIntWithNSString_(minorString);
  NSString *microString = [matcher groupWithInt:3];
  micro = microString == nil ? 0 : JavaLangInteger_parseIntWithNSString_(microString);
  NSString *nanoString = [matcher groupWithInt:4];
  nano = nanoString == nil ? 0 : JavaLangInteger_parseIntWithNSString_(nanoString);
  NSString *trailing = [matcher groupWithInt:5];
  return new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_withNSString_(major, minor, micro, nano, trailing);
}

IOSObjectArray *SquiDBVersionCode__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBVersionCode__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBVersionCode__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBVersionCode__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBVersionCode)

J2OBJC_NAME_MAPPING(SquiDBVersionCode, "com.yahoo.squidb.utility", "SquiDB")
