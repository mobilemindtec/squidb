//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/DatabaseUtils.java
//

#ifndef DatabaseUtils_H
#define DatabaseUtils_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class JavaLangStringBuilder;
@class SquiDBCursorWindow;
@class SquiDBSQLiteDatabase;
@class SquiDBSQLiteProgram;
@class SquiDBSQLiteStatement;
@protocol SquiDBICursor;

@interface SquiDBDatabaseUtils : NSObject
@property (readonly, class) jint STATEMENT_SELECT NS_SWIFT_NAME(STATEMENT_SELECT);
@property (readonly, class) jint STATEMENT_UPDATE NS_SWIFT_NAME(STATEMENT_UPDATE);
@property (readonly, class) jint STATEMENT_ATTACH NS_SWIFT_NAME(STATEMENT_ATTACH);
@property (readonly, class) jint STATEMENT_BEGIN NS_SWIFT_NAME(STATEMENT_BEGIN);
@property (readonly, class) jint STATEMENT_COMMIT NS_SWIFT_NAME(STATEMENT_COMMIT);
@property (readonly, class) jint STATEMENT_ABORT NS_SWIFT_NAME(STATEMENT_ABORT);
@property (readonly, class) jint STATEMENT_PRAGMA NS_SWIFT_NAME(STATEMENT_PRAGMA);
@property (readonly, class) jint STATEMENT_DDL NS_SWIFT_NAME(STATEMENT_DDL);
@property (readonly, class) jint STATEMENT_UNPREPARED NS_SWIFT_NAME(STATEMENT_UNPREPARED);
@property (readonly, class) jint STATEMENT_OTHER NS_SWIFT_NAME(STATEMENT_OTHER);

+ (jint)STATEMENT_SELECT;

+ (jint)STATEMENT_UPDATE;

+ (jint)STATEMENT_ATTACH;

+ (jint)STATEMENT_BEGIN;

+ (jint)STATEMENT_COMMIT;

+ (jint)STATEMENT_ABORT;

+ (jint)STATEMENT_PRAGMA;

+ (jint)STATEMENT_DDL;

+ (jint)STATEMENT_UNPREPARED;

+ (jint)STATEMENT_OTHER;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)appendEscapedSQLStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withNSString:(NSString *)sqlString;

+ (void)bindObjectToProgramWithSquiDBSQLiteProgram:(SquiDBSQLiteProgram *)prog
                                           withInt:(jint)index
                                            withId:(id)value;

+ (void)cursorFillWindowWithSquiDBICursor:(id<SquiDBICursor>)cursor
                                  withInt:(jint)position
                   withSquiDBCursorWindow:(SquiDBCursorWindow *)window;

+ (jint)cursorPickFillWindowStartPositionWithInt:(jint)cursorPosition
                                         withInt:(jint)cursorWindowCapacity;

+ (jint)findRowIdColumnIndexWithNSStringArray:(IOSObjectArray *)columnNames;

+ (jint)getSqlStatementTypeWithNSString:(NSString *)sql;

+ (jint)getTypeOfObjectWithId:(id)obj;

+ (jlong)longForQueryWithSquiDBSQLiteDatabase:(SquiDBSQLiteDatabase *)db
                                 withNSString:(NSString *)query
                            withNSStringArray:(IOSObjectArray *)selectionArgs;

+ (jlong)longForQueryWithSquiDBSQLiteStatement:(SquiDBSQLiteStatement *)prog
                             withNSStringArray:(IOSObjectArray *)selectionArgs;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBDatabaseUtils)

inline jint SquiDBDatabaseUtils_get_STATEMENT_SELECT(void);
#define SquiDBDatabaseUtils_STATEMENT_SELECT 1
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_SELECT, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_UPDATE(void);
#define SquiDBDatabaseUtils_STATEMENT_UPDATE 2
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_UPDATE, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_ATTACH(void);
#define SquiDBDatabaseUtils_STATEMENT_ATTACH 3
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_ATTACH, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_BEGIN(void);
#define SquiDBDatabaseUtils_STATEMENT_BEGIN 4
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_BEGIN, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_COMMIT(void);
#define SquiDBDatabaseUtils_STATEMENT_COMMIT 5
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_COMMIT, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_ABORT(void);
#define SquiDBDatabaseUtils_STATEMENT_ABORT 6
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_ABORT, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_PRAGMA(void);
#define SquiDBDatabaseUtils_STATEMENT_PRAGMA 7
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_PRAGMA, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_DDL(void);
#define SquiDBDatabaseUtils_STATEMENT_DDL 8
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_DDL, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_UNPREPARED(void);
#define SquiDBDatabaseUtils_STATEMENT_UNPREPARED 9
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_UNPREPARED, jint)

inline jint SquiDBDatabaseUtils_get_STATEMENT_OTHER(void);
#define SquiDBDatabaseUtils_STATEMENT_OTHER 99
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBDatabaseUtils, STATEMENT_OTHER, jint)

FOUNDATION_EXPORT void SquiDBDatabaseUtils_init(SquiDBDatabaseUtils *self);

FOUNDATION_EXPORT SquiDBDatabaseUtils *new_SquiDBDatabaseUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBDatabaseUtils *create_SquiDBDatabaseUtils_init(void);

FOUNDATION_EXPORT jint SquiDBDatabaseUtils_getSqlStatementTypeWithNSString_(NSString *sql);

FOUNDATION_EXPORT jint SquiDBDatabaseUtils_getTypeOfObjectWithId_(id obj);

FOUNDATION_EXPORT jint SquiDBDatabaseUtils_findRowIdColumnIndexWithNSStringArray_(IOSObjectArray *columnNames);

FOUNDATION_EXPORT jint SquiDBDatabaseUtils_cursorPickFillWindowStartPositionWithInt_withInt_(jint cursorPosition, jint cursorWindowCapacity);

FOUNDATION_EXPORT void SquiDBDatabaseUtils_appendEscapedSQLStringWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *sqlString);

FOUNDATION_EXPORT jlong SquiDBDatabaseUtils_longForQueryWithSquiDBSQLiteDatabase_withNSString_withNSStringArray_(SquiDBSQLiteDatabase *db, NSString *query, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT jlong SquiDBDatabaseUtils_longForQueryWithSquiDBSQLiteStatement_withNSStringArray_(SquiDBSQLiteStatement *prog, IOSObjectArray *selectionArgs);

FOUNDATION_EXPORT void SquiDBDatabaseUtils_cursorFillWindowWithSquiDBICursor_withInt_withSquiDBCursorWindow_(id<SquiDBICursor> cursor, jint position, SquiDBCursorWindow *window);

FOUNDATION_EXPORT void SquiDBDatabaseUtils_bindObjectToProgramWithSquiDBSQLiteProgram_withInt_withId_(SquiDBSQLiteProgram *prog, jint index, id value);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBDatabaseUtils)

@compatibility_alias ComYahooAndroidSqliteDatabaseUtils SquiDBDatabaseUtils;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // DatabaseUtils_H
