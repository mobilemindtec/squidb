//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SquidDatabase.java
//

#ifndef SquidDatabase_H
#define SquidDatabase_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/lang/RuntimeException.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaLangRuntimeException;
@class JavaLangThrowable;
@class SquiDBAbstractModel;
@class SquiDBCompileContext;
@class SquiDBCompileContext_Builder;
@class SquiDBCriterion;
@class SquiDBDataChangedNotifier;
@class SquiDBDelete;
@class SquiDBIndex;
@class SquiDBInsert;
@class SquiDBProperty;
@class SquiDBQuery;
@class SquiDBSqlTable;
@class SquiDBSquidCursor;
@class SquiDBSquidDatabase_MigrationFailedException;
@class SquiDBSquidDatabase_OpenHelperDelegate;
@class SquiDBTable;
@class SquiDBTableModel;
@class SquiDBTableStatement_ConflictAlgorithm;
@class SquiDBUpdate;
@class SquiDBVersionCode;
@class SquiDBView;
@protocol SquiDBICursor;
@protocol SquiDBISQLiteDatabase;
@protocol SquiDBISQLiteOpenHelper;
@protocol SquiDBISQLitePreparedStatement;
@protocol SquiDBSqlStatement;
@protocol SquiDBSquidTransactionListener;

@interface SquiDBSquidDatabase : NSObject {
 @public
  jboolean showSql_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)areDataChangedNotificationsEnabled;

- (NSString *)attachDatabaseWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)other;

- (void)beginTransaction;

- (void)beginTransactionNonExclusive;

- (void)beginTransactionWithListenerWithSquiDBSquidTransactionListener:(id<SquiDBSquidTransactionListener>)listener;

- (void)beginTransactionWithListenerNonExclusiveWithSquiDBSquidTransactionListener:(id<SquiDBSquidTransactionListener>)listener;

- (void)clear;

- (void)close;

- (jboolean)copyDatabaseWithJavaIoFile:(JavaIoFile *)toDir OBJC_METHOD_FAMILY_NONE;

- (jint)countWithIOSClass:(IOSClass *)modelClass
      withSquiDBCriterion:(SquiDBCriterion *)criterion;

- (jint)countAllWithIOSClass:(IOSClass *)modelClass;

- (jboolean)createNewWithSquiDBTableModel:(SquiDBTableModel *)item;

- (jboolean)delete__WithIOSClass:(IOSClass *)modelClass
                        withLong:(jlong)id_;

- (jint)delete__WithSquiDBDelete:(SquiDBDelete *)delete_;

- (jint)deleteAllWithIOSClass:(IOSClass *)modelClass;

- (jint)deleteWhereWithIOSClass:(IOSClass *)modelClass
            withSquiDBCriterion:(SquiDBCriterion *)where;

- (jboolean)detachDatabaseWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)other;

- (void)endTransaction;

- (void)execSqlOrThrowWithNSString:(NSString *)sql;

- (void)execSqlOrThrowWithNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs;

- (void)explainQueryPlanWithIOSClass:(IOSClass *)modelClass
                     withSquiDBQuery:(SquiDBQuery *)query;

- (SquiDBTableModel *)fetchWithIOSClass:(IOSClass *)modelClass
                               withLong:(jlong)id_
                withSquiDBPropertyArray:(IOSObjectArray *)properties;

- (SquiDBAbstractModel *)fetchByCriterionWithIOSClass:(IOSClass *)modelClass
                                  withSquiDBCriterion:(SquiDBCriterion *)criterion
                              withSquiDBPropertyArray:(IOSObjectArray *)properties;

- (SquiDBAbstractModel *)fetchByQueryWithIOSClass:(IOSClass *)modelClass
                                  withSquiDBQuery:(SquiDBQuery *)query;

- (SquiDBCompileContext *)getCompileContext;

- (NSString *)getDatabasePath;

- (NSString *)getName;

- (SquiDBVersionCode *)getSqliteVersion;

- (jlong)insertWithSquiDBInsert:(SquiDBInsert *)insert;

- (jboolean)inTransaction;

- (jboolean)isOpen;

- (jboolean)persistWithSquiDBTableModel:(SquiDBTableModel *)item;

- (jboolean)persistWithOnConflictWithSquiDBTableModel:(SquiDBTableModel *)item
           withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm;

- (id<SquiDBISQLitePreparedStatement>)prepareStatementWithNSString:(NSString *)sql;

- (SquiDBSquidCursor *)queryWithIOSClass:(IOSClass *)modelClass
                         withSquiDBQuery:(SquiDBQuery *)query;

- (id<SquiDBICursor>)rawQueryWithNSString:(NSString *)sql
                        withNSObjectArray:(IOSObjectArray *)sqlArgs;

- (void)recreate;

- (void)registerDataChangedNotifierWithSquiDBDataChangedNotifier:(SquiDBDataChangedNotifier *)notifier;

- (jboolean)saveExistingWithSquiDBTableModel:(SquiDBTableModel *)item;

- (void)setDataChangedNotificationsEnabledWithBoolean:(jboolean)enabled;

- (void)setShowSqlWithBoolean:(jboolean)showSql;

- (void)setTransactionSuccessful;

- (jlong)simpleQueryForLongWithSquiDBQuery:(SquiDBQuery *)query;

- (jlong)simpleQueryForLongWithNSString:(NSString *)sql
                      withNSObjectArray:(IOSObjectArray *)sqlArgs;

- (NSString *)simpleQueryForStringWithSquiDBQuery:(SquiDBQuery *)query;

- (NSString *)simpleQueryForStringWithNSString:(NSString *)sql
                             withNSObjectArray:(IOSObjectArray *)sqlArgs;

- (NSString *)description;

- (jboolean)tryCreateViewWithSquiDBView:(SquiDBView *)view;

- (jboolean)tryDropViewWithSquiDBView:(SquiDBView *)view;

- (jboolean)tryExecSqlWithNSString:(NSString *)sql;

- (jboolean)tryExecSqlWithNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs;

- (jboolean)tryExecStatementWithSquiDBSqlStatement:(id<SquiDBSqlStatement>)statement;

- (void)unregisterAllDataChangedNotifiers;

- (void)unregisterDataChangedNotifierWithSquiDBDataChangedNotifier:(SquiDBDataChangedNotifier *)notifier;

- (jint)updateWithSquiDBCriterion:(SquiDBCriterion *)where
             withSquiDBTableModel:(SquiDBTableModel *)template_;

- (jint)updateWithSquiDBUpdate:(SquiDBUpdate *)update;

- (jint)updateAllWithSquiDBTableModel:(SquiDBTableModel *)template_;

- (jint)updateAllWithOnConflictWithSquiDBTableModel:(SquiDBTableModel *)template_
         withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm;

- (jint)updateWithOnConflictWithSquiDBCriterion:(SquiDBCriterion *)where
                           withSquiDBTableModel:(SquiDBTableModel *)template_
     withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm;

- (jboolean)yieldIfContendedSafely;

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay;

#pragma mark Protected

- (void)acquireExclusiveLock;

- (void)acquireNonExclusiveLock;

- (void)buildCompileContextWithSquiDBCompileContext_Builder:(SquiDBCompileContext_Builder *)builder;

- (id<SquiDBISQLiteOpenHelper>)createOpenHelperWithNSString:(NSString *)databaseName
                 withSquiDBSquidDatabase_OpenHelperDelegate:(SquiDBSquidDatabase_OpenHelperDelegate *)delegate
                                                    withInt:(jint)version_;

- (SquiDBSquidCursor *)fetchFirstItemWithIOSClass:(IOSClass *)modelClass
                              withSquiDBCriterion:(SquiDBCriterion *)criterion
                          withSquiDBPropertyArray:(IOSObjectArray *)properties;

- (SquiDBSquidCursor *)fetchFirstItemWithIOSClass:(IOSClass *)modelClass
                                  withSquiDBQuery:(SquiDBQuery *)query;

- (SquiDBSquidCursor *)fetchItemByIdWithIOSClass:(IOSClass *)modelClass
                                        withLong:(jlong)id_
                         withSquiDBPropertyArray:(IOSObjectArray *)properties;

- (id<SquiDBISQLiteDatabase>)getDatabase;

- (IOSObjectArray *)getIndexes;

- (SquiDBSqlTable *)getSqlTableWithIOSClass:(IOSClass *)modelClass;

- (SquiDBTable *)getTableWithIOSClass:(IOSClass *)modelClass;

- (IOSObjectArray *)getTables;

- (jint)getVersion;

- (IOSObjectArray *)getViews;

- (jboolean)insertRowWithSquiDBTableModel:(SquiDBTableModel *)item;

- (jboolean)insertRowWithSquiDBTableModel:(SquiDBTableModel *)item
withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm;

- (void)onCloseWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (void)onConfigureWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (void)onDatabaseOpenFailedWithJavaLangRuntimeException:(JavaLangRuntimeException *)failure
                                                 withInt:(jint)openFailureCount;

- (jboolean)onDowngradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                         withInt:(jint)oldVersion
                                         withInt:(jint)newVersion;

- (void)onErrorWithNSString:(NSString *)message
      withJavaLangThrowable:(JavaLangThrowable *)error;

- (void)onMigrationFailedWithSquiDBSquidDatabase_MigrationFailedException:(SquiDBSquidDatabase_MigrationFailedException *)failure;

- (void)onOpenWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (void)onTablesCreatedWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (jboolean)onUpgradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                       withInt:(jint)oldVersion
                                       withInt:(jint)newVersion;

- (void)releaseExclusiveLock;

- (void)releaseNonExclusiveLock;

- (SquiDBAbstractModel *)returnFetchResultWithIOSClass:(IOSClass *)modelClass
                                 withSquiDBSquidCursor:(SquiDBSquidCursor *)cursor;

- (void)setPreparedInsertCacheEnabledWithBoolean:(jboolean)enabled;

- (jboolean)tryAddColumnWithSquiDBProperty:(SquiDBProperty *)property;

- (jboolean)tryCreateIndexWithSquiDBIndex:(SquiDBIndex *)index;

- (jboolean)tryCreateIndexWithNSString:(NSString *)indexName
                       withSquiDBTable:(SquiDBTable *)table
                           withBoolean:(jboolean)unique
               withSquiDBPropertyArray:(IOSObjectArray *)properties;

- (jboolean)tryCreateTableWithSquiDBTable:(SquiDBTable *)table;

- (jboolean)tryDropIndexWithSquiDBIndex:(SquiDBIndex *)index;

- (jboolean)tryDropIndexWithNSString:(NSString *)indexName;

- (jboolean)tryDropTableWithSquiDBTable:(SquiDBTable *)table;

- (jboolean)updateRowWithSquiDBTableModel:(SquiDBTableModel *)item;

- (jboolean)updateRowWithSquiDBTableModel:(SquiDBTableModel *)item
withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase)

FOUNDATION_EXPORT void SquiDBSquidDatabase_init(SquiDBSquidDatabase *self);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSquidDatabase)

@compatibility_alias ComYahooSquidbDataSquidDatabase SquiDBSquidDatabase;

@interface SquiDBSquidDatabase_OpenHelperDelegate : NSObject

#pragma mark Public

- (void)onConfigureWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (void)onCreateWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (void)onDowngradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                     withInt:(jint)oldVersion
                                     withInt:(jint)newVersion;

- (void)onOpenWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (void)onUpgradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                   withInt:(jint)oldVersion
                                   withInt:(jint)newVersion;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_OpenHelperDelegate)

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSquidDatabase_OpenHelperDelegate)

@interface SquiDBSquidDatabase_MigrationFailedException : JavaLangRuntimeException {
 @public
  NSString *dbName_;
  jint oldVersion_;
  jint newVersion_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)dbName
                                   withInt:(jint)oldVersion
                                   withInt:(jint)newVersion;

- (instancetype __nonnull)initWithNSString:(NSString *)dbName
                                   withInt:(jint)oldVersion
                                   withInt:(jint)newVersion
                     withJavaLangThrowable:(JavaLangThrowable *)throwable;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_MigrationFailedException)

J2OBJC_FIELD_SETTER(SquiDBSquidDatabase_MigrationFailedException, dbName_, NSString *)

FOUNDATION_EXPORT void SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(SquiDBSquidDatabase_MigrationFailedException *self, NSString *dbName, jint oldVersion, jint newVersion);

FOUNDATION_EXPORT SquiDBSquidDatabase_MigrationFailedException *new_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(NSString *dbName, jint oldVersion, jint newVersion) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBSquidDatabase_MigrationFailedException *create_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(NSString *dbName, jint oldVersion, jint newVersion);

FOUNDATION_EXPORT void SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(SquiDBSquidDatabase_MigrationFailedException *self, NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable);

FOUNDATION_EXPORT SquiDBSquidDatabase_MigrationFailedException *new_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBSquidDatabase_MigrationFailedException *create_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSquidDatabase_MigrationFailedException)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SquidDatabase_H
