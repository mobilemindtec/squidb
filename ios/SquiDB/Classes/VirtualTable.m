//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/VirtualTable.java
//

#include "BinaryCriterion.h"
#include "CompileContext.h"
#include "Criterion.h"
#include "Field.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Operator.h"
#include "Property.h"
#include "Table.h"
#include "TableModel.h"
#include "VersionCode.h"
#include "VirtualTable.h"
#include "java/lang/StringBuilder.h"

@interface SquiDBVirtualTable () {
 @public
  NSString *moduleName_;
  SquiDBField *anyColumn_;
}

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName
                    withNSString:(NSString *)module
                    withNSString:(NSString *)alias;

@end

J2OBJC_FIELD_SETTER(SquiDBVirtualTable, moduleName_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBVirtualTable, anyColumn_, SquiDBField *)

inline SquiDBVersionCode *SquiDBVirtualTable_get_SQLITE_VERSION_IF_NOT_EXISTS(void);
static SquiDBVersionCode *SquiDBVirtualTable_SQLITE_VERSION_IF_NOT_EXISTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBVirtualTable, SQLITE_VERSION_IF_NOT_EXISTS, SquiDBVersionCode *)

__attribute__((unused)) static void SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(SquiDBVirtualTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module, NSString *alias);

__attribute__((unused)) static SquiDBVirtualTable *new_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module, NSString *alias) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBVirtualTable *create_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module, NSString *alias);

J2OBJC_INITIALIZED_DEFN(SquiDBVirtualTable)

@implementation SquiDBVirtualTable

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName
                    withNSString:(NSString *)module {
  SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, module);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)modelClass
         withSquiDBPropertyArray:(IOSObjectArray *)properties
                    withNSString:(NSString *)name
                    withNSString:(NSString *)databaseName
                    withNSString:(NSString *)module
                    withNSString:(NSString *)alias {
  SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, module, alias);
  return self;
}

- (NSString *)getModuleName {
  return moduleName_;
}

- (SquiDBVirtualTable *)qualifiedFromDatabaseWithNSString:(NSString *)databaseName {
  SquiDBVirtualTable *result = new_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(modelClass_, properties_, [self getExpression], databaseName, moduleName_, alias_);
  result->rowidProperty_ = rowidProperty_;
  return result;
}

- (SquiDBVirtualTable *)asWithNSString:(NSString *)newAlias {
  return (SquiDBVirtualTable *) cast_chk([super asWithNSString:newAlias], [SquiDBVirtualTable class]);
}

- (SquiDBVirtualTable *)asNewAliasWithPropertiesArrayWithNSString:(NSString *)newAlias
                                          withSquiDBPropertyArray:(IOSObjectArray *)newProperties {
  return new_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(modelClass_, newProperties, [self getExpression], qualifier_, moduleName_, newAlias);
}

- (SquiDBCriterion *)matchWithNSString:(NSString *)value {
  return new_SquiDBBinaryCriterion_initPackagePrivateWithSquiDBField_withSquiDBOperator_withId_(anyColumn_, JreLoadEnum(SquiDBOperator, match), value);
}

- (NSString *)description {
  return JreStrcat("$$$$$", [super description], @" ModelClass=", [((IOSClass *) nil_chk(modelClass_)) getSimpleName], @" module=", moduleName_);
}

- (void)appendCreateTableSqlWithSquiDBCompileContext:(SquiDBCompileContext *)compileContext
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sql
                  withSquiDBProperty_PropertyVisitor:(id<SquiDBProperty_PropertyVisitor>)propertyVisitor {
  (void) [((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:@"CREATE VIRTUAL TABLE "];
  if (compileContext != nil && [((SquiDBVersionCode *) nil_chk([compileContext getVersionCode])) isAtLeastWithSquiDBVersionCode:SquiDBVirtualTable_SQLITE_VERSION_IF_NOT_EXISTS]) {
    (void) [sql appendWithNSString:@"IF NOT EXISTS "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:[self getExpression]])) appendWithNSString:@" USING "])) appendWithNSString:moduleName_])) appendWithChar:'('];
  jboolean needComma = false;
  {
    IOSObjectArray *a__ = properties_;
    SquiDBProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    SquiDBProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      SquiDBProperty *property = *b__++;
      if ([((NSString *) nil_chk(SquiDBTableModel_ROWID)) isEqual:[((SquiDBProperty *) nil_chk(property)) getExpression]]) {
        continue;
      }
      if (needComma) {
        (void) [sql appendWithChar:','];
      }
      (void) [sql appendWithNSString:[property getName]];
      needComma = true;
    }
  }
  (void) [sql appendWithChar:')'];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBVirtualTable;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LSquiDBVirtualTable;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LSquiDBVirtualTable;", 0x4, 7, 8, -1, 9, -1, -1 },
    { NULL, "LSquiDBCriterion;", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withSquiDBPropertyArray:withNSString:withNSString:withNSString:);
  methods[1].selector = @selector(initWithIOSClass:withSquiDBPropertyArray:withNSString:withNSString:withNSString:withNSString:);
  methods[2].selector = @selector(getModuleName);
  methods[3].selector = @selector(qualifiedFromDatabaseWithNSString:);
  methods[4].selector = @selector(asWithNSString:);
  methods[5].selector = @selector(asNewAliasWithPropertiesArrayWithNSString:withSquiDBPropertyArray:);
  methods[6].selector = @selector(matchWithNSString:);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(appendCreateTableSqlWithSquiDBCompileContext:withJavaLangStringBuilder:withSquiDBProperty_PropertyVisitor:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SQLITE_VERSION_IF_NOT_EXISTS", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "moduleName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "anyColumn_", "LSquiDBField;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;[LSquiDBProperty;LNSString;LNSString;LNSString;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;[Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "LIOSClass;[LSquiDBProperty;LNSString;LNSString;LNSString;LNSString;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;[Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "qualifiedFromDatabase", "LNSString;", "as", "asNewAliasWithPropertiesArray", "LNSString;[LSquiDBProperty;", "(Ljava/lang/String;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/sql/VirtualTable;", "match", "toString", "appendCreateTableSql", "LSquiDBCompileContext;LJavaLangStringBuilder;LSquiDBProperty_PropertyVisitor;", "(Lcom/yahoo/squidb/sql/CompileContext;Ljava/lang/StringBuilder;Lcom/yahoo/squidb/sql/Property$PropertyVisitor<Ljava/lang/Void;Ljava/lang/StringBuilder;>;)V", &SquiDBVirtualTable_SQLITE_VERSION_IF_NOT_EXISTS, "Lcom/yahoo/squidb/sql/Field<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _SquiDBVirtualTable = { "VirtualTable", "com.yahoo.squidb.sql", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_SquiDBVirtualTable;
}

+ (void)initialize {
  if (self == [SquiDBVirtualTable class]) {
    SquiDBVirtualTable_SQLITE_VERSION_IF_NOT_EXISTS = new_SquiDBVersionCode_initWithInt_withInt_withInt_withInt_(3, 7, 11, 0);
    J2OBJC_SET_INITIALIZED(SquiDBVirtualTable)
  }
}

@end

void SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(SquiDBVirtualTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module) {
  SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(self, modelClass, properties, name, databaseName, module, nil);
}

SquiDBVirtualTable *new_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module) {
  J2OBJC_NEW_IMPL(SquiDBVirtualTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, module)
}

SquiDBVirtualTable *create_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module) {
  J2OBJC_CREATE_IMPL(SquiDBVirtualTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, module)
}

void SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(SquiDBVirtualTable *self, IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module, NSString *alias) {
  SquiDBTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_(self, modelClass, properties, name, databaseName);
  self->moduleName_ = module;
  self->alias_ = alias;
  self->anyColumn_ = SquiDBField_fieldWithNSString_(self->expression_);
}

SquiDBVirtualTable *new_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module, NSString *alias) {
  J2OBJC_NEW_IMPL(SquiDBVirtualTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, module, alias)
}

SquiDBVirtualTable *create_SquiDBVirtualTable_initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_(IOSClass *modelClass, IOSObjectArray *properties, NSString *name, NSString *databaseName, NSString *module, NSString *alias) {
  J2OBJC_CREATE_IMPL(SquiDBVirtualTable, initWithIOSClass_withSquiDBPropertyArray_withNSString_withNSString_withNSString_withNSString_, modelClass, properties, name, databaseName, module, alias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBVirtualTable)

J2OBJC_NAME_MAPPING(SquiDBVirtualTable, "com.yahoo.squidb.sql", "SquiDB")
