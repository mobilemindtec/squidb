//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SQLiteDatabase.java
//

#include "CloseGuard.h"
#include "DatabaseErrorHandler.h"
#include "DatabaseUtils.h"
#include "DefaultDatabaseErrorHandler.h"
#include "ICursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "Pair.h"
#include "Printer.h"
#include "SQLException.h"
#include "SQLiteClosable.h"
#include "SQLiteConnectionPool.h"
#include "SQLiteCursorDriver.h"
#include "SQLiteCustomFunction.h"
#include "SQLiteDatabase.h"
#include "SQLiteDatabaseConfiguration.h"
#include "SQLiteDatabaseCorruptException.h"
#include "SQLiteDirectCursorDriver.h"
#include "SQLiteException.h"
#include "SQLiteGlobal.h"
#include "SQLiteQueryBuilder.h"
#include "SQLiteSession.h"
#include "SQLiteStatement.h"
#include "SQLiteTransactionListener.h"
#include "SqlUtils.h"
#include "ValuesStorage.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface SquiDBSQLiteDatabase () {
 @public
  JavaLangThreadLocal *mThreadSession_;
  id<SquiDBSQLiteDatabase_CursorFactory> mCursorFactory_;
  id<SquiDBDatabaseErrorHandler> mErrorHandler_;
  id mLock_;
  SquiDBCloseGuard *mCloseGuardLocked_;
  SquiDBSQLiteDatabaseConfiguration *mConfigurationLocked_;
  SquiDBSQLiteConnectionPool *mConnectionPoolLocked_;
  jboolean mHasAttachedDbsLocked_;
}

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags
withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)cursorFactory
  withSquiDBDatabaseErrorHandler:(id<SquiDBDatabaseErrorHandler>)errorHandler;

- (void)disposeWithBoolean:(jboolean)finalized;

+ (jboolean)isMainThread;

- (void)beginTransactionWithSquiDBSQLiteTransactionListener:(id<SquiDBSQLiteTransactionListener>)transactionListener
                                                withBoolean:(jboolean)exclusive;

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay;

- (void)open;

- (void)openInner;

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs;

- (jboolean)isReadOnlyLocked;

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList;

+ (JavaUtilArrayList *)getActiveDatabases;

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                  withBoolean:(jboolean)verbose;

- (void)throwIfNotOpenLocked;

@end

J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mThreadSession_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mCursorFactory_, id<SquiDBSQLiteDatabase_CursorFactory>)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mErrorHandler_, id<SquiDBDatabaseErrorHandler>)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mLock_, id)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mCloseGuardLocked_, SquiDBCloseGuard *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mConfigurationLocked_, SquiDBSQLiteDatabaseConfiguration *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDatabase, mConnectionPoolLocked_, SquiDBSQLiteConnectionPool *)

inline NSString *SquiDBSQLiteDatabase_get_TAG(void);
static NSString *SquiDBSQLiteDatabase_TAG = @"SQLiteDatabase";
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteDatabase, TAG, NSString *)

inline jint SquiDBSQLiteDatabase_get_EVENT_DB_CORRUPT(void);
#define SquiDBSQLiteDatabase_EVENT_DB_CORRUPT 75004
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteDatabase, EVENT_DB_CORRUPT, jint)

inline JavaUtilWeakHashMap *SquiDBSQLiteDatabase_get_sActiveDatabases(void);
inline JavaUtilWeakHashMap *SquiDBSQLiteDatabase_set_sActiveDatabases(JavaUtilWeakHashMap *value);
static JavaUtilWeakHashMap *SquiDBSQLiteDatabase_sActiveDatabases;
J2OBJC_STATIC_FIELD_OBJ(SquiDBSQLiteDatabase, sActiveDatabases, JavaUtilWeakHashMap *)

inline IOSObjectArray *SquiDBSQLiteDatabase_get_CONFLICT_VALUES(void);
static IOSObjectArray *SquiDBSQLiteDatabase_CONFLICT_VALUES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSQLiteDatabase, CONFLICT_VALUES, IOSObjectArray *)

inline jint SquiDBSQLiteDatabase_get_OPEN_READ_MASK(void);
#define SquiDBSQLiteDatabase_OPEN_READ_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteDatabase, OPEN_READ_MASK, jint)

__attribute__((unused)) static void SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(SquiDBSQLiteDatabase *self, NSString *path, jint openFlags, id<SquiDBSQLiteDatabase_CursorFactory> cursorFactory, id<SquiDBDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static SquiDBSQLiteDatabase *new_SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(NSString *path, jint openFlags, id<SquiDBSQLiteDatabase_CursorFactory> cursorFactory, id<SquiDBDatabaseErrorHandler> errorHandler) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteDatabase *create_SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(NSString *path, jint openFlags, id<SquiDBSQLiteDatabase_CursorFactory> cursorFactory, id<SquiDBDatabaseErrorHandler> errorHandler);

__attribute__((unused)) static void SquiDBSQLiteDatabase_disposeWithBoolean_(SquiDBSQLiteDatabase *self, jboolean finalized);

__attribute__((unused)) static jboolean SquiDBSQLiteDatabase_isMainThread(void);

__attribute__((unused)) static void SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(SquiDBSQLiteDatabase *self, id<SquiDBSQLiteTransactionListener> transactionListener, jboolean exclusive);

__attribute__((unused)) static jboolean SquiDBSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(SquiDBSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay);

__attribute__((unused)) static void SquiDBSQLiteDatabase_open(SquiDBSQLiteDatabase *self);

__attribute__((unused)) static void SquiDBSQLiteDatabase_openInner(SquiDBSQLiteDatabase *self);

__attribute__((unused)) static jint SquiDBSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(SquiDBSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs);

__attribute__((unused)) static jboolean SquiDBSQLiteDatabase_isReadOnlyLocked(SquiDBSQLiteDatabase *self);

__attribute__((unused)) static NSString *SquiDBSQLiteDatabase_getPath(SquiDBSQLiteDatabase *self);

__attribute__((unused)) static void SquiDBSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(SquiDBSQLiteDatabase *self, JavaUtilArrayList *dbStatsList);

__attribute__((unused)) static JavaUtilArrayList *SquiDBSQLiteDatabase_getActiveDatabases(void);

__attribute__((unused)) static void SquiDBSQLiteDatabase_dumpWithSquiDBPrinter_withBoolean_(SquiDBSQLiteDatabase *self, id<SquiDBPrinter> printer, jboolean verbose);

__attribute__((unused)) static void SquiDBSQLiteDatabase_throwIfNotOpenLocked(SquiDBSQLiteDatabase *self);

__attribute__((unused)) static IOSObjectArray *SquiDBSQLiteDatabase__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *SquiDBSQLiteDatabase__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *SquiDBSQLiteDatabase__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *SquiDBSQLiteDatabase__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *SquiDBSQLiteDatabase__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *SquiDBSQLiteDatabase__Annotations$5(void);

@interface SquiDBSQLiteDatabase_1 : JavaLangThreadLocal {
 @public
  SquiDBSQLiteDatabase *this$0_;
}

- (instancetype)initWithSquiDBSQLiteDatabase:(SquiDBSQLiteDatabase *)outer$;

- (SquiDBSQLiteSession *)initialValue OBJC_METHOD_FAMILY_NONE;

- (SquiDBSQLiteSession *)get;

- (SquiDBSQLiteSession *)childValueWithId:(SquiDBSQLiteSession *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSQLiteDatabase_1)

__attribute__((unused)) static void SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(SquiDBSQLiteDatabase_1 *self, SquiDBSQLiteDatabase *outer$);

__attribute__((unused)) static SquiDBSQLiteDatabase_1 *new_SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(SquiDBSQLiteDatabase *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteDatabase_1 *create_SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(SquiDBSQLiteDatabase *outer$);

@interface SquiDBSQLiteDatabase_2 : NSObject < JavaIoFileFilter > {
 @public
  NSString *val$prefix_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSQLiteDatabase_2)

__attribute__((unused)) static void SquiDBSQLiteDatabase_2_initWithNSString_(SquiDBSQLiteDatabase_2 *self, NSString *capture$0);

__attribute__((unused)) static SquiDBSQLiteDatabase_2 *new_SquiDBSQLiteDatabase_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSQLiteDatabase_2 *create_SquiDBSQLiteDatabase_2_initWithNSString_(NSString *capture$0);

@interface SquiDBSQLiteDatabase_CursorFactory : NSObject

@end

@interface SquiDBSQLiteDatabase_CustomFunction : NSObject

@end

J2OBJC_INITIALIZED_DEFN(SquiDBSQLiteDatabase)

@implementation SquiDBSQLiteDatabase

+ (jint)CONFLICT_ROLLBACK {
  return SquiDBSQLiteDatabase_CONFLICT_ROLLBACK;
}

+ (jint)CONFLICT_ABORT {
  return SquiDBSQLiteDatabase_CONFLICT_ABORT;
}

+ (jint)CONFLICT_FAIL {
  return SquiDBSQLiteDatabase_CONFLICT_FAIL;
}

+ (jint)CONFLICT_IGNORE {
  return SquiDBSQLiteDatabase_CONFLICT_IGNORE;
}

+ (jint)CONFLICT_REPLACE {
  return SquiDBSQLiteDatabase_CONFLICT_REPLACE;
}

+ (jint)CONFLICT_NONE {
  return SquiDBSQLiteDatabase_CONFLICT_NONE;
}

+ (jint)SQLITE_MAX_LIKE_PATTERN_LENGTH {
  return SquiDBSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH;
}

+ (jint)OPEN_READWRITE {
  return SquiDBSQLiteDatabase_OPEN_READWRITE;
}

+ (jint)OPEN_READONLY {
  return SquiDBSQLiteDatabase_OPEN_READONLY;
}

+ (jint)NO_LOCALIZED_COLLATORS {
  return SquiDBSQLiteDatabase_NO_LOCALIZED_COLLATORS;
}

+ (jint)CREATE_IF_NECESSARY {
  return SquiDBSQLiteDatabase_CREATE_IF_NECESSARY;
}

+ (jint)ENABLE_WRITE_AHEAD_LOGGING {
  return SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
}

+ (jint)MAX_SQL_CACHE_SIZE {
  return SquiDBSQLiteDatabase_MAX_SQL_CACHE_SIZE;
}

- (instancetype)initWithNSString:(NSString *)path
                         withInt:(jint)openFlags
withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)cursorFactory
  withSquiDBDatabaseErrorHandler:(id<SquiDBDatabaseErrorHandler>)errorHandler {
  SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(self, path, openFlags, cursorFactory, errorHandler);
  return self;
}

- (void)java_finalize {
  @try {
    SquiDBSQLiteDatabase_disposeWithBoolean_(self, true);
  }
  @finally {
    [super java_finalize];
  }
}

- (void)onAllReferencesReleased {
  SquiDBSQLiteDatabase_disposeWithBoolean_(self, false);
}

- (void)disposeWithBoolean:(jboolean)finalized {
  SquiDBSQLiteDatabase_disposeWithBoolean_(self, finalized);
}

+ (jint)releaseMemory {
  return SquiDBSQLiteDatabase_releaseMemory();
}

- (void)setLockingEnabledWithBoolean:(jboolean)lockingEnabled {
}

- (NSString *)getLabel {
  @synchronized(mLock_) {
    return ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->label_;
  }
}

- (void)onCorruption {
  [((id<SquiDBDatabaseErrorHandler>) nil_chk(mErrorHandler_)) onCorruptionWithSquiDBSQLiteDatabase:self];
}

- (SquiDBSQLiteSession *)getThreadSession {
  return [((JavaLangThreadLocal *) nil_chk(mThreadSession_)) get];
}

- (SquiDBSQLiteSession *)createSession {
  SquiDBSQLiteConnectionPool *pool;
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    pool = mConnectionPoolLocked_;
  }
  return new_SquiDBSQLiteSession_initWithSquiDBSQLiteConnectionPool_(pool);
}

- (jint)getThreadDefaultConnectionFlagsWithBoolean:(jboolean)readOnly {
  jint flags = readOnly ? SquiDBSQLiteConnectionPool_CONNECTION_FLAG_READ_ONLY : SquiDBSQLiteConnectionPool_CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY;
  if (SquiDBSQLiteDatabase_isMainThread()) {
    flags |= SquiDBSQLiteConnectionPool_CONNECTION_FLAG_INTERACTIVE;
  }
  return flags;
}

+ (jboolean)isMainThread {
  return SquiDBSQLiteDatabase_isMainThread();
}

- (void)beginTransaction {
  SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(self, nil, true);
}

- (void)beginTransactionNonExclusive {
  SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(self, nil, false);
}

- (void)beginTransactionWithListenerWithSquiDBSQLiteTransactionListener:(id<SquiDBSQLiteTransactionListener>)transactionListener {
  SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(self, transactionListener, true);
}

- (void)beginTransactionWithListenerNonExclusiveWithSquiDBSQLiteTransactionListener:(id<SquiDBSQLiteTransactionListener>)transactionListener {
  SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(self, transactionListener, false);
}

- (void)beginTransactionWithSquiDBSQLiteTransactionListener:(id<SquiDBSQLiteTransactionListener>)transactionListener
                                                withBoolean:(jboolean)exclusive {
  SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(self, transactionListener, exclusive);
}

- (void)endTransaction {
  [self acquireReference];
  @try {
    [((SquiDBSQLiteSession *) nil_chk([self getThreadSession])) endTransaction];
  }
  @finally {
    [self releaseReference];
  }
}

- (void)setTransactionSuccessful {
  [self acquireReference];
  @try {
    [((SquiDBSQLiteSession *) nil_chk([self getThreadSession])) setTransactionSuccessful];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)inTransaction {
  [self acquireReference];
  @try {
    return [((SquiDBSQLiteSession *) nil_chk([self getThreadSession])) hasTransaction];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByCurrentThread {
  [self acquireReference];
  @try {
    return [((SquiDBSQLiteSession *) nil_chk([self getThreadSession])) hasConnection];
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDbLockedByOtherThreads {
  return false;
}

- (jboolean)yieldIfContended {
  return SquiDBSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, false, -1);
}

- (jboolean)yieldIfContendedSafely {
  return SquiDBSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, -1);
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return SquiDBSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, true, sleepAfterYieldDelay);
}

- (jboolean)yieldIfContendedHelperWithBoolean:(jboolean)throwIfUnsafe
                                     withLong:(jlong)sleepAfterYieldDelay {
  return SquiDBSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(self, throwIfUnsafe, sleepAfterYieldDelay);
}

- (id<JavaUtilMap>)getSyncedTables {
  return new_JavaUtilHashMap_initWithInt_(0);
}

+ (SquiDBSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory
                                           withInt:(jint)flags {
  return SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_(path, factory, flags);
}

+ (SquiDBSQLiteDatabase *)openDatabaseWithNSString:(NSString *)path
            withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory
                                           withInt:(jint)flags
                    withSquiDBDatabaseErrorHandler:(id<SquiDBDatabaseErrorHandler>)errorHandler {
  return SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_withSquiDBDatabaseErrorHandler_(path, factory, flags, errorHandler);
}

+ (SquiDBSQLiteDatabase *)openOrCreateDatabaseWithJavaIoFile:(JavaIoFile *)file
                      withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory {
  return SquiDBSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withSquiDBSQLiteDatabase_CursorFactory_(file, factory);
}

+ (SquiDBSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory {
  return SquiDBSQLiteDatabase_openOrCreateDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_(path, factory);
}

+ (SquiDBSQLiteDatabase *)openOrCreateDatabaseWithNSString:(NSString *)path
                    withSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory
                            withSquiDBDatabaseErrorHandler:(id<SquiDBDatabaseErrorHandler>)errorHandler {
  return SquiDBSQLiteDatabase_openOrCreateDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(path, factory, errorHandler);
}

+ (jboolean)deleteDatabaseWithJavaIoFile:(JavaIoFile *)file {
  return SquiDBSQLiteDatabase_deleteDatabaseWithJavaIoFile_(file);
}

- (void)reopenReadWrite {
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    if (!SquiDBSQLiteDatabase_isReadOnlyLocked(self)) {
      return;
    }
    jint oldOpenFlags = ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_;
    mConfigurationLocked_->openFlags_ = (mConfigurationLocked_->openFlags_ & ~SquiDBSQLiteDatabase_OPEN_READ_MASK) | SquiDBSQLiteDatabase_OPEN_READWRITE;
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ = oldOpenFlags;
      @throw ex;
    }
  }
}

- (void)open {
  SquiDBSQLiteDatabase_open(self);
}

- (void)openInner {
  SquiDBSQLiteDatabase_openInner(self);
}

+ (SquiDBSQLiteDatabase *)createWithSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory {
  return SquiDBSQLiteDatabase_createWithSquiDBSQLiteDatabase_CursorFactory_(factory);
}

- (void)addCustomFunctionWithNSString:(NSString *)name
                              withInt:(jint)numArgs
withSquiDBSQLiteDatabase_CustomFunction:(id<SquiDBSQLiteDatabase_CustomFunction>)function {
  SquiDBSQLiteCustomFunction *wrapper = new_SquiDBSQLiteCustomFunction_initWithNSString_withInt_withSquiDBSQLiteDatabase_CustomFunction_(name, numArgs, function);
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    [((JavaUtilArrayList *) nil_chk(((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->customFunctions_)) addWithId:wrapper];
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      [mConfigurationLocked_->customFunctions_ removeWithId:wrapper];
      @throw ex;
    }
  }
}

- (jint)getVersion {
  return [JavaLangLong_valueOfWithLong_(SquiDBDatabaseUtils_longForQueryWithSquiDBSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA user_version;", nil)) intValue];
}

- (void)setVersionWithInt:(jint)version_ {
  [self execSQLWithNSString:JreStrcat("$I", @"PRAGMA user_version = ", version_)];
}

- (jlong)getMaximumSize {
  jlong pageCount = SquiDBDatabaseUtils_longForQueryWithSquiDBSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA max_page_count;", nil);
  return pageCount * [self getPageSize];
}

- (jlong)setMaximumSizeWithLong:(jlong)numBytes {
  jlong pageSize = [self getPageSize];
  jlong numPages = JreLongDiv(numBytes, pageSize);
  if ((JreLongMod(numBytes, pageSize)) != 0) {
    numPages++;
  }
  jlong newPageCount = SquiDBDatabaseUtils_longForQueryWithSquiDBSQLiteDatabase_withNSString_withNSStringArray_(self, JreStrcat("$J", @"PRAGMA max_page_count = ", numPages), nil);
  return newPageCount * pageSize;
}

- (jlong)getPageSize {
  return SquiDBDatabaseUtils_longForQueryWithSquiDBSQLiteDatabase_withNSString_withNSStringArray_(self, @"PRAGMA page_size;", nil);
}

- (void)setPageSizeWithLong:(jlong)numBytes {
  [self execSQLWithNSString:JreStrcat("$J", @"PRAGMA page_size = ", numBytes)];
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)deletedTable {
}

- (void)markTableSyncableWithNSString:(NSString *)table
                         withNSString:(NSString *)foreignKey
                         withNSString:(NSString *)updateTable {
}

+ (NSString *)findEditTableWithNSString:(NSString *)tables {
  return SquiDBSQLiteDatabase_findEditTableWithNSString_(tables);
}

- (SquiDBSQLiteStatement *)compileStatementWithNSString:(NSString *)sql {
  [self acquireReference];
  @try {
    return new_SquiDBSQLiteStatement_initWithSquiDBSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, nil);
  }
  @finally {
    [self releaseReference];
  }
}

- (id<SquiDBICursor>)queryWithBoolean:(jboolean)distinct
                         withNSString:(NSString *)table
                    withNSStringArray:(IOSObjectArray *)columns
                         withNSString:(NSString *)selection
                    withNSStringArray:(IOSObjectArray *)selectionArgs
                         withNSString:(NSString *)groupBy
                         withNSString:(NSString *)having
                         withNSString:(NSString *)orderBy
                         withNSString:(NSString *)limit {
  return [self queryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:nil withBoolean:distinct withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<SquiDBICursor>)queryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)cursorFactory
                                                                withBoolean:(jboolean)distinct
                                                               withNSString:(NSString *)table
                                                          withNSStringArray:(IOSObjectArray *)columns
                                                               withNSString:(NSString *)selection
                                                          withNSStringArray:(IOSObjectArray *)selectionArgs
                                                               withNSString:(NSString *)groupBy
                                                               withNSString:(NSString *)having
                                                               withNSString:(NSString *)orderBy
                                                               withNSString:(NSString *)limit {
  [self acquireReference];
  @try {
    NSString *sql = SquiDBSQLiteQueryBuilder_buildQueryStringWithBoolean_withNSString_withNSStringArray_withNSString_withNSString_withNSString_withNSString_withNSString_(distinct, table, columns, selection, groupBy, having, orderBy, limit);
    return [self rawQueryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:cursorFactory withNSString:sql withNSStringArray:selectionArgs withNSString:SquiDBSQLiteDatabase_findEditTableWithNSString_(table)];
  }
  @finally {
    [self releaseReference];
  }
}

- (id<SquiDBICursor>)queryWithNSString:(NSString *)table
                     withNSStringArray:(IOSObjectArray *)columns
                          withNSString:(NSString *)selection
                     withNSStringArray:(IOSObjectArray *)selectionArgs
                          withNSString:(NSString *)groupBy
                          withNSString:(NSString *)having
                          withNSString:(NSString *)orderBy {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:nil];
}

- (id<SquiDBICursor>)queryWithNSString:(NSString *)table
                     withNSStringArray:(IOSObjectArray *)columns
                          withNSString:(NSString *)selection
                     withNSStringArray:(IOSObjectArray *)selectionArgs
                          withNSString:(NSString *)groupBy
                          withNSString:(NSString *)having
                          withNSString:(NSString *)orderBy
                          withNSString:(NSString *)limit {
  return [self queryWithBoolean:false withNSString:table withNSStringArray:columns withNSString:selection withNSStringArray:selectionArgs withNSString:groupBy withNSString:having withNSString:orderBy withNSString:limit];
}

- (id<SquiDBICursor>)rawQueryWithNSString:(NSString *)sql
                        withNSStringArray:(IOSObjectArray *)selectionArgs {
  return [self rawQueryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:nil withNSString:sql withNSStringArray:selectionArgs withNSString:nil];
}

- (id<SquiDBICursor>)rawQueryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)cursorFactory
                                                                  withNSString:(NSString *)sql
                                                             withNSStringArray:(IOSObjectArray *)selectionArgs
                                                                  withNSString:(NSString *)editTable {
  [self acquireReference];
  @try {
    id<SquiDBSQLiteCursorDriver> driver = new_SquiDBSQLiteDirectCursorDriver_initWithSquiDBSQLiteDatabase_withNSString_withNSString_(self, sql, editTable);
    return [driver queryWithSquiDBSQLiteDatabase_CursorFactory:cursorFactory != nil ? cursorFactory : mCursorFactory_ withNSStringArray:selectionArgs];
  }
  @finally {
    [self releaseReference];
  }
}

- (jlong)insertWithNSString:(NSString *)table
               withNSString:(NSString *)nullColumnHack
    withSquiDBValuesStorage:(SquiDBValuesStorage *)values {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withSquiDBValuesStorage:values withInt:SquiDBSQLiteDatabase_CONFLICT_NONE];
  }
  @catch (SquiDBSQLException *e) {
    SquiDBLogger_eWithNSString_withNSString_withJavaLangThrowable_(SquiDBSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", values), e);
    return -1;
  }
}

- (jlong)insertOrThrowWithNSString:(NSString *)table
                      withNSString:(NSString *)nullColumnHack
           withSquiDBValuesStorage:(SquiDBValuesStorage *)values {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withSquiDBValuesStorage:values withInt:SquiDBSQLiteDatabase_CONFLICT_NONE];
}

- (jlong)replaceWithNSString:(NSString *)table
                withNSString:(NSString *)nullColumnHack
     withSquiDBValuesStorage:(SquiDBValuesStorage *)initialValues {
  @try {
    return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withSquiDBValuesStorage:initialValues withInt:SquiDBSQLiteDatabase_CONFLICT_REPLACE];
  }
  @catch (SquiDBSQLException *e) {
    SquiDBLogger_eWithNSString_withNSString_withJavaLangThrowable_(SquiDBSQLiteDatabase_TAG, JreStrcat("$@", @"Error inserting ", initialValues), e);
    return -1;
  }
}

- (jlong)replaceOrThrowWithNSString:(NSString *)table
                       withNSString:(NSString *)nullColumnHack
            withSquiDBValuesStorage:(SquiDBValuesStorage *)initialValues {
  return [self insertWithOnConflictWithNSString:table withNSString:nullColumnHack withSquiDBValuesStorage:initialValues withInt:SquiDBSQLiteDatabase_CONFLICT_REPLACE];
}

- (jlong)insertWithOnConflictWithNSString:(NSString *)table
                             withNSString:(NSString *)nullColumnHack
                  withSquiDBValuesStorage:(SquiDBValuesStorage *)initialValues
                                  withInt:(jint)conflictAlgorithm {
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = new_JavaLangStringBuilder_init();
    (void) [sql appendWithNSString:@"INSERT"];
    (void) [sql appendWithNSString:IOSObjectArray_Get(nil_chk(SquiDBSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    (void) [sql appendWithNSString:@" INTO "];
    (void) [sql appendWithNSString:table];
    (void) [sql appendWithChar:'('];
    IOSObjectArray *bindArgs = nil;
    jint size = (initialValues != nil && [initialValues size] > 0) ? [((SquiDBValuesStorage *) nil_chk(initialValues)) size] : 0;
    if (size > 0) {
      bindArgs = [IOSObjectArray newArrayWithLength:size type:NSObject_class_()];
      jint i = 0;
      for (NSString * __strong colName in nil_chk([((SquiDBValuesStorage *) nil_chk(initialValues)) keySet])) {
        (void) [sql appendWithNSString:(i > 0) ? @"," : @""];
        (void) [sql appendWithNSString:colName];
        (void) IOSObjectArray_Set(bindArgs, i++, [initialValues getWithNSString:colName]);
      }
      (void) [sql appendWithChar:')'];
      (void) [sql appendWithNSString:@" VALUES ("];
      for (i = 0; i < size; i++) {
        (void) [sql appendWithNSString:(i > 0) ? @",?" : @"?"];
      }
    }
    else {
      (void) [sql appendWithNSString:JreStrcat("$$", nullColumnHack, @") VALUES (NULL")];
    }
    (void) [sql appendWithChar:')'];
    SquiDBSQLiteStatement *statement = new_SquiDBSQLiteStatement_initWithSquiDBSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeInsert];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)delete__WithNSString:(NSString *)table
                withNSString:(NSString *)whereClause
           withNSStringArray:(IOSObjectArray *)whereArgs {
  [self acquireReference];
  @try {
    SquiDBSQLiteStatement *statement = new_SquiDBSQLiteStatement_initWithSquiDBSQLiteDatabase_withNSString_withNSObjectArray_(self, JreStrcat("$$$", @"DELETE FROM ", table, (!SquiDBSqlUtils_isEmptyWithNSString_(whereClause) ? JreStrcat("$$", @" WHERE ", whereClause) : @"")), whereArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (jint)updateWithNSString:(NSString *)table
   withSquiDBValuesStorage:(SquiDBValuesStorage *)values
              withNSString:(NSString *)whereClause
         withNSStringArray:(IOSObjectArray *)whereArgs {
  return [self updateWithOnConflictWithNSString:table withSquiDBValuesStorage:values withNSString:whereClause withNSStringArray:whereArgs withInt:SquiDBSQLiteDatabase_CONFLICT_NONE];
}

- (jint)updateWithOnConflictWithNSString:(NSString *)table
                 withSquiDBValuesStorage:(SquiDBValuesStorage *)values
                            withNSString:(NSString *)whereClause
                       withNSStringArray:(IOSObjectArray *)whereArgs
                                 withInt:(jint)conflictAlgorithm {
  if (values == nil || [values size] == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Empty values");
  }
  [self acquireReference];
  @try {
    JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(120);
    (void) [sql appendWithNSString:@"UPDATE "];
    (void) [sql appendWithNSString:IOSObjectArray_Get(nil_chk(SquiDBSQLiteDatabase_CONFLICT_VALUES), conflictAlgorithm)];
    (void) [sql appendWithNSString:table];
    (void) [sql appendWithNSString:@" SET "];
    jint setValuesSize = [values size];
    jint bindArgsSize = (whereArgs == nil) ? setValuesSize : (setValuesSize + ((IOSObjectArray *) nil_chk(whereArgs))->size_);
    IOSObjectArray *bindArgs = [IOSObjectArray newArrayWithLength:bindArgsSize type:NSObject_class_()];
    jint i = 0;
    for (NSString * __strong colName in nil_chk([values keySet])) {
      (void) [sql appendWithNSString:(i > 0) ? @"," : @""];
      (void) [sql appendWithNSString:colName];
      (void) IOSObjectArray_Set(bindArgs, i++, [values getWithNSString:colName]);
      (void) [sql appendWithNSString:@"=?"];
    }
    if (whereArgs != nil) {
      for (i = setValuesSize; i < bindArgsSize; i++) {
        (void) IOSObjectArray_Set(bindArgs, i, IOSObjectArray_Get(whereArgs, i - setValuesSize));
      }
    }
    if (!SquiDBSqlUtils_isEmptyWithNSString_(whereClause)) {
      (void) [sql appendWithNSString:@" WHERE "];
      (void) [sql appendWithNSString:whereClause];
    }
    SquiDBSQLiteStatement *statement = new_SquiDBSQLiteStatement_initWithSquiDBSQLiteDatabase_withNSString_withNSObjectArray_(self, [sql description], bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

- (void)execSQLWithNSString:(NSString *)sql {
  SquiDBSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, nil);
}

- (void)execSQLWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs {
  if (bindArgs == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Empty bindArgs");
  }
  SquiDBSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jint)executeSqlWithNSString:(NSString *)sql
             withNSObjectArray:(IOSObjectArray *)bindArgs {
  return SquiDBSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(self, sql, bindArgs);
}

- (jboolean)isReadOnly {
  @synchronized(mLock_) {
    return SquiDBSQLiteDatabase_isReadOnlyLocked(self);
  }
}

- (jboolean)isReadOnlyLocked {
  return SquiDBSQLiteDatabase_isReadOnlyLocked(self);
}

- (jboolean)isInMemoryDatabase {
  @synchronized(mLock_) {
    return [((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_)) isInMemoryDb];
  }
}

- (jboolean)isOpen {
  @synchronized(mLock_) {
    return mConnectionPoolLocked_ != nil;
  }
}

- (jboolean)needUpgradeWithInt:(jint)newVersion {
  return newVersion > [self getVersion];
}

- (NSString *)getPath {
  return SquiDBSQLiteDatabase_getPath(self);
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"locale must not be null.");
  }
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    JavaUtilLocale *oldLocale = ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->locale_;
    mConfigurationLocked_->locale_ = locale;
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->locale_ = oldLocale;
      @throw ex;
    }
  }
}

- (void)setMaxSqlCacheSizeWithInt:(jint)cacheSize {
  if (cacheSize > SquiDBSQLiteDatabase_MAX_SQL_CACHE_SIZE || cacheSize < 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"expected value between 0 and ", SquiDBSQLiteDatabase_MAX_SQL_CACHE_SIZE));
  }
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    jint oldMaxSqlCacheSize = ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->maxSqlCacheSize_;
    mConfigurationLocked_->maxSqlCacheSize_ = cacheSize;
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->maxSqlCacheSize_ = oldMaxSqlCacheSize;
      @throw ex;
    }
  }
}

- (void)setForeignKeyConstraintsEnabledWithBoolean:(jboolean)enable {
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    if (((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->foreignKeyConstraintsEnabled_ == enable) {
      return;
    }
    mConfigurationLocked_->foreignKeyConstraintsEnabled_ = enable;
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->foreignKeyConstraintsEnabled_ = !enable;
      @throw ex;
    }
  }
}

- (jboolean)enableWriteAheadLogging {
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0) {
      return true;
    }
    if (SquiDBSQLiteDatabase_isReadOnlyLocked(self)) {
      return false;
    }
    if ([mConfigurationLocked_ isInMemoryDb]) {
      SquiDBLogger_iWithNSString_withNSString_(SquiDBSQLiteDatabase_TAG, @"can't enable WAL for memory databases.");
      return false;
    }
    if (mHasAttachedDbsLocked_) {
      if (SquiDBLogger_isLoggableWithNSString_withSquiDBLogger_Level_(SquiDBSQLiteDatabase_TAG, JreLoadEnum(SquiDBLogger_Level, DEBUG))) {
        SquiDBLogger_dWithNSString_withNSString_(SquiDBSQLiteDatabase_TAG, JreStrcat("$$$", @"this database: ", mConfigurationLocked_->label_, @" has attached databases. can't  enable WAL."));
      }
      return false;
    }
    mConfigurationLocked_->openFlags_ |= SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ &= ~SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
  return true;
}

- (void)disableWriteAheadLogging {
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    if ((((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) == 0) {
      return;
    }
    mConfigurationLocked_->openFlags_ &= ~SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
    @try {
      [((SquiDBSQLiteConnectionPool *) nil_chk(mConnectionPoolLocked_)) reconfigureWithSquiDBSQLiteDatabaseConfiguration:mConfigurationLocked_];
    }
    @catch (JavaLangRuntimeException *ex) {
      mConfigurationLocked_->openFlags_ |= SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING;
      @throw ex;
    }
  }
}

- (jboolean)isWriteAheadLoggingEnabled {
  @synchronized(mLock_) {
    SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
    return (((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->openFlags_ & SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING) != 0;
  }
}

+ (JavaUtilArrayList *)getDbStats {
  return SquiDBSQLiteDatabase_getDbStats();
}

- (void)collectDbStatsWithJavaUtilArrayList:(JavaUtilArrayList *)dbStatsList {
  SquiDBSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(self, dbStatsList);
}

+ (JavaUtilArrayList *)getActiveDatabases {
  return SquiDBSQLiteDatabase_getActiveDatabases();
}

+ (void)dumpAllWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                     withBoolean:(jboolean)verbose {
  SquiDBSQLiteDatabase_dumpAllWithSquiDBPrinter_withBoolean_(printer, verbose);
}

- (void)dumpWithSquiDBPrinter:(id<SquiDBPrinter>)printer
                  withBoolean:(jboolean)verbose {
  SquiDBSQLiteDatabase_dumpWithSquiDBPrinter_withBoolean_(self, printer, verbose);
}

- (id<JavaUtilList>)getAttachedDbs {
  JavaUtilArrayList *attachedDbs = new_JavaUtilArrayList_init();
  @synchronized(mLock_) {
    if (mConnectionPoolLocked_ == nil) {
      return nil;
    }
    if (!mHasAttachedDbsLocked_) {
      [attachedDbs addWithId:new_SquiDBPair_initWithId_withId_(@"main", ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(mConfigurationLocked_))->path_)];
      return attachedDbs;
    }
    [self acquireReference];
  }
  @try {
    id<SquiDBICursor> c = nil;
    @try {
      c = [self rawQueryWithNSString:@"pragma database_list;" withNSStringArray:nil];
      while ([((id<SquiDBICursor>) nil_chk(c)) moveToNext]) {
        [attachedDbs addWithId:new_SquiDBPair_initWithId_withId_([c getStringWithInt:1], [c getStringWithInt:2])];
      }
    }
    @finally {
      if (c != nil) {
        [c close];
      }
    }
    return attachedDbs;
  }
  @finally {
    [self releaseReference];
  }
}

- (jboolean)isDatabaseIntegrityOk {
  [self acquireReference];
  @try {
    id<JavaUtilList> attachedDbs = nil;
    @try {
      attachedDbs = [self getAttachedDbs];
      if (attachedDbs == nil) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"databaselist for: ", SquiDBSQLiteDatabase_getPath(self), @" couldn't be retrieved. probably because the database is closed"));
      }
    }
    @catch (SquiDBSQLiteException *e) {
      attachedDbs = new_JavaUtilArrayList_init();
      [attachedDbs addWithId:new_SquiDBPair_initWithId_withId_(@"main", SquiDBSQLiteDatabase_getPath(self))];
    }
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(attachedDbs)) size]; i++) {
      SquiDBPair *p = [attachedDbs getWithInt:i];
      SquiDBSQLiteStatement *prog = nil;
      @try {
        prog = [self compileStatementWithNSString:JreStrcat("$$$", @"PRAGMA ", ((SquiDBPair *) nil_chk(p))->first_, @".integrity_check(1);")];
        NSString *rslt = [((SquiDBSQLiteStatement *) nil_chk(prog)) simpleQueryForString];
        if (![((NSString *) nil_chk(rslt)) java_equalsIgnoreCase:@"ok"]) {
          SquiDBLogger_eWithNSString_withNSString_(SquiDBSQLiteDatabase_TAG, JreStrcat("$$$$", @"PRAGMA integrity_check on ", p->second_, @" returned: ", rslt));
          return false;
        }
      }
      @finally {
        if (prog != nil) {
          [prog close];
        }
      }
    }
  }
  @finally {
    [self releaseReference];
  }
  return true;
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDatabase: ", SquiDBSQLiteDatabase_getPath(self));
}

- (void)throwIfNotOpenLocked {
  SquiDBSQLiteDatabase_throwIfNotOpenLocked(self);
}

- (void)dealloc {
  JreCheckFinalize(self, [SquiDBSQLiteDatabase class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, 6, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteSession;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteSession;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 13, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 14, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 19, 20, -1 },
    { NULL, "LSquiDBSQLiteDatabase;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteDatabase;", 0x9, 21, 23, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteDatabase;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteDatabase;", 0x9, 24, 26, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteDatabase;", 0x9, 24, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteDatabase;", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 36, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, 40, -1 },
    { NULL, "V", 0x1, 38, 41, -1, -1, 42, -1 },
    { NULL, "LNSString;", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteStatement;", 0x1, 45, 44, 46, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 47, 51, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 47, 52, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 59, 58, 46, -1, -1, -1 },
    { NULL, "J", 0x1, 60, 58, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 61, 58, 46, -1, -1, -1 },
    { NULL, "J", 0x1, 62, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 64, 65, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 44, 46, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 71, 46, -1, -1, -1 },
    { NULL, "I", 0x2, 72, 71, 46, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 73, 35, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x8, -1, -1, -1, 78, -1, -1 },
    { NULL, "V", 0x2, 79, 80, -1, 81, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0xa, -1, -1, -1, 82, -1, -1 },
    { NULL, "V", 0x8, 83, 84, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 84, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 86, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 87, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withSquiDBSQLiteDatabase_CursorFactory:withSquiDBDatabaseErrorHandler:);
  methods[1].selector = @selector(java_finalize);
  methods[2].selector = @selector(onAllReferencesReleased);
  methods[3].selector = @selector(disposeWithBoolean:);
  methods[4].selector = @selector(releaseMemory);
  methods[5].selector = @selector(setLockingEnabledWithBoolean:);
  methods[6].selector = @selector(getLabel);
  methods[7].selector = @selector(onCorruption);
  methods[8].selector = @selector(getThreadSession);
  methods[9].selector = @selector(createSession);
  methods[10].selector = @selector(getThreadDefaultConnectionFlagsWithBoolean:);
  methods[11].selector = @selector(isMainThread);
  methods[12].selector = @selector(beginTransaction);
  methods[13].selector = @selector(beginTransactionNonExclusive);
  methods[14].selector = @selector(beginTransactionWithListenerWithSquiDBSQLiteTransactionListener:);
  methods[15].selector = @selector(beginTransactionWithListenerNonExclusiveWithSquiDBSQLiteTransactionListener:);
  methods[16].selector = @selector(beginTransactionWithSquiDBSQLiteTransactionListener:withBoolean:);
  methods[17].selector = @selector(endTransaction);
  methods[18].selector = @selector(setTransactionSuccessful);
  methods[19].selector = @selector(inTransaction);
  methods[20].selector = @selector(isDbLockedByCurrentThread);
  methods[21].selector = @selector(isDbLockedByOtherThreads);
  methods[22].selector = @selector(yieldIfContended);
  methods[23].selector = @selector(yieldIfContendedSafely);
  methods[24].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[25].selector = @selector(yieldIfContendedHelperWithBoolean:withLong:);
  methods[26].selector = @selector(getSyncedTables);
  methods[27].selector = @selector(openDatabaseWithNSString:withSquiDBSQLiteDatabase_CursorFactory:withInt:);
  methods[28].selector = @selector(openDatabaseWithNSString:withSquiDBSQLiteDatabase_CursorFactory:withInt:withSquiDBDatabaseErrorHandler:);
  methods[29].selector = @selector(openOrCreateDatabaseWithJavaIoFile:withSquiDBSQLiteDatabase_CursorFactory:);
  methods[30].selector = @selector(openOrCreateDatabaseWithNSString:withSquiDBSQLiteDatabase_CursorFactory:);
  methods[31].selector = @selector(openOrCreateDatabaseWithNSString:withSquiDBSQLiteDatabase_CursorFactory:withSquiDBDatabaseErrorHandler:);
  methods[32].selector = @selector(deleteDatabaseWithJavaIoFile:);
  methods[33].selector = @selector(reopenReadWrite);
  methods[34].selector = @selector(open);
  methods[35].selector = @selector(openInner);
  methods[36].selector = @selector(createWithSquiDBSQLiteDatabase_CursorFactory:);
  methods[37].selector = @selector(addCustomFunctionWithNSString:withInt:withSquiDBSQLiteDatabase_CustomFunction:);
  methods[38].selector = @selector(getVersion);
  methods[39].selector = @selector(setVersionWithInt:);
  methods[40].selector = @selector(getMaximumSize);
  methods[41].selector = @selector(setMaximumSizeWithLong:);
  methods[42].selector = @selector(getPageSize);
  methods[43].selector = @selector(setPageSizeWithLong:);
  methods[44].selector = @selector(markTableSyncableWithNSString:withNSString:);
  methods[45].selector = @selector(markTableSyncableWithNSString:withNSString:withNSString:);
  methods[46].selector = @selector(findEditTableWithNSString:);
  methods[47].selector = @selector(compileStatementWithNSString:);
  methods[48].selector = @selector(queryWithBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[49].selector = @selector(queryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:withBoolean:withNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[50].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:);
  methods[51].selector = @selector(queryWithNSString:withNSStringArray:withNSString:withNSStringArray:withNSString:withNSString:withNSString:withNSString:);
  methods[52].selector = @selector(rawQueryWithNSString:withNSStringArray:);
  methods[53].selector = @selector(rawQueryWithFactoryWithSquiDBSQLiteDatabase_CursorFactory:withNSString:withNSStringArray:withNSString:);
  methods[54].selector = @selector(insertWithNSString:withNSString:withSquiDBValuesStorage:);
  methods[55].selector = @selector(insertOrThrowWithNSString:withNSString:withSquiDBValuesStorage:);
  methods[56].selector = @selector(replaceWithNSString:withNSString:withSquiDBValuesStorage:);
  methods[57].selector = @selector(replaceOrThrowWithNSString:withNSString:withSquiDBValuesStorage:);
  methods[58].selector = @selector(insertWithOnConflictWithNSString:withNSString:withSquiDBValuesStorage:withInt:);
  methods[59].selector = @selector(delete__WithNSString:withNSString:withNSStringArray:);
  methods[60].selector = @selector(updateWithNSString:withSquiDBValuesStorage:withNSString:withNSStringArray:);
  methods[61].selector = @selector(updateWithOnConflictWithNSString:withSquiDBValuesStorage:withNSString:withNSStringArray:withInt:);
  methods[62].selector = @selector(execSQLWithNSString:);
  methods[63].selector = @selector(execSQLWithNSString:withNSObjectArray:);
  methods[64].selector = @selector(executeSqlWithNSString:withNSObjectArray:);
  methods[65].selector = @selector(isReadOnly);
  methods[66].selector = @selector(isReadOnlyLocked);
  methods[67].selector = @selector(isInMemoryDatabase);
  methods[68].selector = @selector(isOpen);
  methods[69].selector = @selector(needUpgradeWithInt:);
  methods[70].selector = @selector(getPath);
  methods[71].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[72].selector = @selector(setMaxSqlCacheSizeWithInt:);
  methods[73].selector = @selector(setForeignKeyConstraintsEnabledWithBoolean:);
  methods[74].selector = @selector(enableWriteAheadLogging);
  methods[75].selector = @selector(disableWriteAheadLogging);
  methods[76].selector = @selector(isWriteAheadLoggingEnabled);
  methods[77].selector = @selector(getDbStats);
  methods[78].selector = @selector(collectDbStatsWithJavaUtilArrayList:);
  methods[79].selector = @selector(getActiveDatabases);
  methods[80].selector = @selector(dumpAllWithSquiDBPrinter:withBoolean:);
  methods[81].selector = @selector(dumpWithSquiDBPrinter:withBoolean:);
  methods[82].selector = @selector(getAttachedDbs);
  methods[83].selector = @selector(isDatabaseIntegrityOk);
  methods[84].selector = @selector(description);
  methods[85].selector = @selector(throwIfNotOpenLocked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
    { "EVENT_DB_CORRUPT", "I", .constantValue.asInt = SquiDBSQLiteDatabase_EVENT_DB_CORRUPT, 0x1a, -1, -1, -1, -1 },
    { "sActiveDatabases", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0xa, -1, 89, 90, -1 },
    { "mThreadSession_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 91, -1 },
    { "mCursorFactory_", "LSquiDBSQLiteDatabase_CursorFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mErrorHandler_", "LSquiDBDatabaseErrorHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCloseGuardLocked_", "LSquiDBCloseGuard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConfigurationLocked_", "LSquiDBSQLiteDatabaseConfiguration;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mConnectionPoolLocked_", "LSquiDBSQLiteConnectionPool;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasAttachedDbsLocked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CONFLICT_ROLLBACK", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CONFLICT_ROLLBACK, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_ABORT", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CONFLICT_ABORT, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_FAIL", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CONFLICT_FAIL, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_IGNORE", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CONFLICT_IGNORE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_REPLACE", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CONFLICT_REPLACE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_NONE", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CONFLICT_NONE, 0x19, -1, -1, -1, -1 },
    { "CONFLICT_VALUES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 92, -1, -1 },
    { "SQLITE_MAX_LIKE_PATTERN_LENGTH", "I", .constantValue.asInt = SquiDBSQLiteDatabase_SQLITE_MAX_LIKE_PATTERN_LENGTH, 0x19, -1, -1, -1, -1 },
    { "OPEN_READWRITE", "I", .constantValue.asInt = SquiDBSQLiteDatabase_OPEN_READWRITE, 0x19, -1, -1, -1, -1 },
    { "OPEN_READONLY", "I", .constantValue.asInt = SquiDBSQLiteDatabase_OPEN_READONLY, 0x19, -1, -1, -1, -1 },
    { "OPEN_READ_MASK", "I", .constantValue.asInt = SquiDBSQLiteDatabase_OPEN_READ_MASK, 0x1a, -1, -1, -1, -1 },
    { "NO_LOCALIZED_COLLATORS", "I", .constantValue.asInt = SquiDBSQLiteDatabase_NO_LOCALIZED_COLLATORS, 0x19, -1, -1, -1, -1 },
    { "CREATE_IF_NECESSARY", "I", .constantValue.asInt = SquiDBSQLiteDatabase_CREATE_IF_NECESSARY, 0x19, -1, -1, -1, -1 },
    { "ENABLE_WRITE_AHEAD_LOGGING", "I", .constantValue.asInt = SquiDBSQLiteDatabase_ENABLE_WRITE_AHEAD_LOGGING, 0x19, -1, -1, -1, -1 },
    { "MAX_SQL_CACHE_SIZE", "I", .constantValue.asInt = SquiDBSQLiteDatabase_MAX_SQL_CACHE_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILSquiDBSQLiteDatabase_CursorFactory;LSquiDBDatabaseErrorHandler;", "finalize", "LJavaLangThrowable;", "dispose", "Z", "setLockingEnabled", (void *)&SquiDBSQLiteDatabase__Annotations$0, "getThreadDefaultConnectionFlags", "beginTransactionWithListener", "LSquiDBSQLiteTransactionListener;", "beginTransactionWithListenerNonExclusive", "beginTransaction", "LSquiDBSQLiteTransactionListener;Z", (void *)&SquiDBSQLiteDatabase__Annotations$1, (void *)&SquiDBSQLiteDatabase__Annotations$2, "yieldIfContendedSafely", "J", "yieldIfContendedHelper", "ZJ", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", (void *)&SquiDBSQLiteDatabase__Annotations$3, "openDatabase", "LNSString;LSquiDBSQLiteDatabase_CursorFactory;I", "LNSString;LSquiDBSQLiteDatabase_CursorFactory;ILSquiDBDatabaseErrorHandler;", "openOrCreateDatabase", "LJavaIoFile;LSquiDBSQLiteDatabase_CursorFactory;", "LNSString;LSquiDBSQLiteDatabase_CursorFactory;", "LNSString;LSquiDBSQLiteDatabase_CursorFactory;LSquiDBDatabaseErrorHandler;", "deleteDatabase", "LJavaIoFile;", "create", "LSquiDBSQLiteDatabase_CursorFactory;", "addCustomFunction", "LNSString;ILSquiDBSQLiteDatabase_CustomFunction;", "setVersion", "I", "setMaximumSize", "setPageSize", "markTableSyncable", "LNSString;LNSString;", (void *)&SquiDBSQLiteDatabase__Annotations$4, "LNSString;LNSString;LNSString;", (void *)&SquiDBSQLiteDatabase__Annotations$5, "findEditTable", "LNSString;", "compileStatement", "LSquiDBSQLException;", "query", "ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "queryWithFactory", "LSquiDBSQLiteDatabase_CursorFactory;ZLNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;", "LNSString;[LNSString;LNSString;[LNSString;LNSString;LNSString;LNSString;LNSString;", "rawQuery", "LNSString;[LNSString;", "rawQueryWithFactory", "LSquiDBSQLiteDatabase_CursorFactory;LNSString;[LNSString;LNSString;", "insert", "LNSString;LNSString;LSquiDBValuesStorage;", "insertOrThrow", "replace", "replaceOrThrow", "insertWithOnConflict", "LNSString;LNSString;LSquiDBValuesStorage;I", "delete", "LNSString;LNSString;[LNSString;", "update", "LNSString;LSquiDBValuesStorage;LNSString;[LNSString;", "updateWithOnConflict", "LNSString;LSquiDBValuesStorage;LNSString;[LNSString;I", "execSQL", "LNSString;[LNSObject;", "executeSql", "needUpgrade", "setLocale", "LJavaUtilLocale;", "setMaxSqlCacheSize", "setForeignKeyConstraintsEnabled", "()Ljava/util/ArrayList<Lcom/yahoo/android/sqlite/SQLiteDebug$DbStats;>;", "collectDbStats", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Lcom/yahoo/android/sqlite/SQLiteDebug$DbStats;>;)V", "()Ljava/util/ArrayList<Lcom/yahoo/android/sqlite/SQLiteDatabase;>;", "dumpAll", "LSquiDBPrinter;Z", "dump", "()Ljava/util/List<Lcom/yahoo/android/sqlite/Pair<Ljava/lang/String;Ljava/lang/String;>;>;", "toString", &SquiDBSQLiteDatabase_TAG, &SquiDBSQLiteDatabase_sActiveDatabases, "Ljava/util/WeakHashMap<Lcom/yahoo/android/sqlite/SQLiteDatabase;Ljava/lang/Object;>;", "Ljava/lang/ThreadLocal<Lcom/yahoo/android/sqlite/SQLiteSession;>;", &SquiDBSQLiteDatabase_CONFLICT_VALUES, "LSquiDBSQLiteDatabase_CursorFactory;LSquiDBSQLiteDatabase_CustomFunction;" };
  static const J2ObjcClassInfo _SquiDBSQLiteDatabase = { "SQLiteDatabase", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x11, 86, 26, -1, 93, -1, -1, -1 };
  return &_SquiDBSQLiteDatabase;
}

+ (void)initialize {
  if (self == [SquiDBSQLiteDatabase class]) {
    {
      SquiDBSQLiteGlobal_sqlite3_initialize();
    }
    SquiDBSQLiteDatabase_sActiveDatabases = new_JavaUtilWeakHashMap_init();
    SquiDBSQLiteDatabase_CONFLICT_VALUES = [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" OR ROLLBACK ", @" OR ABORT ", @" OR FAIL ", @" OR IGNORE ", @" OR REPLACE " } count:6 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(SquiDBSQLiteDatabase)
  }
}

@end

void SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(SquiDBSQLiteDatabase *self, NSString *path, jint openFlags, id<SquiDBSQLiteDatabase_CursorFactory> cursorFactory, id<SquiDBDatabaseErrorHandler> errorHandler) {
  SquiDBSQLiteClosable_init(self);
  self->mThreadSession_ = new_SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(self);
  self->mLock_ = new_NSObject_init();
  self->mCloseGuardLocked_ = SquiDBCloseGuard_get();
  self->mCursorFactory_ = cursorFactory;
  self->mErrorHandler_ = errorHandler != nil ? errorHandler : new_SquiDBDefaultDatabaseErrorHandler_init();
  self->mConfigurationLocked_ = new_SquiDBSQLiteDatabaseConfiguration_initWithNSString_withInt_(path, openFlags);
}

SquiDBSQLiteDatabase *new_SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(NSString *path, jint openFlags, id<SquiDBSQLiteDatabase_CursorFactory> cursorFactory, id<SquiDBDatabaseErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteDatabase, initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

SquiDBSQLiteDatabase *create_SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(NSString *path, jint openFlags, id<SquiDBSQLiteDatabase_CursorFactory> cursorFactory, id<SquiDBDatabaseErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteDatabase, initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_, path, openFlags, cursorFactory, errorHandler)
}

void SquiDBSQLiteDatabase_disposeWithBoolean_(SquiDBSQLiteDatabase *self, jboolean finalized) {
  SquiDBSQLiteConnectionPool *pool;
  @synchronized(self->mLock_) {
    if (self->mCloseGuardLocked_ != nil) {
      if (finalized) {
        [self->mCloseGuardLocked_ warnIfOpen];
      }
      [self->mCloseGuardLocked_ close];
    }
    pool = self->mConnectionPoolLocked_;
    self->mConnectionPoolLocked_ = nil;
  }
  if (!finalized) {
    @synchronized(SquiDBSQLiteDatabase_sActiveDatabases) {
      (void) [((JavaUtilWeakHashMap *) nil_chk(SquiDBSQLiteDatabase_sActiveDatabases)) removeWithId:self];
    }
    if (pool != nil) {
      [pool close];
    }
  }
}

jint SquiDBSQLiteDatabase_releaseMemory() {
  SquiDBSQLiteDatabase_initialize();
  return SquiDBSQLiteGlobal_releaseMemory();
}

jboolean SquiDBSQLiteDatabase_isMainThread() {
  SquiDBSQLiteDatabase_initialize();
  return [NSThread isMainThread];
}

void SquiDBSQLiteDatabase_beginTransactionWithSquiDBSQLiteTransactionListener_withBoolean_(SquiDBSQLiteDatabase *self, id<SquiDBSQLiteTransactionListener> transactionListener, jboolean exclusive) {
  [self acquireReference];
  @try {
    [((SquiDBSQLiteSession *) nil_chk([self getThreadSession])) beginTransactionWithInt:exclusive ? SquiDBSQLiteSession_TRANSACTION_MODE_EXCLUSIVE : SquiDBSQLiteSession_TRANSACTION_MODE_IMMEDIATE withSquiDBSQLiteTransactionListener:transactionListener withInt:[self getThreadDefaultConnectionFlagsWithBoolean:false]];
  }
  @finally {
    [self releaseReference];
  }
}

jboolean SquiDBSQLiteDatabase_yieldIfContendedHelperWithBoolean_withLong_(SquiDBSQLiteDatabase *self, jboolean throwIfUnsafe, jlong sleepAfterYieldDelay) {
  [self acquireReference];
  @try {
    return [((SquiDBSQLiteSession *) nil_chk([self getThreadSession])) yieldTransactionWithLong:sleepAfterYieldDelay withBoolean:throwIfUnsafe];
  }
  @finally {
    [self releaseReference];
  }
}

SquiDBSQLiteDatabase *SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_(NSString *path, id<SquiDBSQLiteDatabase_CursorFactory> factory, jint flags) {
  SquiDBSQLiteDatabase_initialize();
  return SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_withSquiDBDatabaseErrorHandler_(path, factory, flags, nil);
}

SquiDBSQLiteDatabase *SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_withSquiDBDatabaseErrorHandler_(NSString *path, id<SquiDBSQLiteDatabase_CursorFactory> factory, jint flags, id<SquiDBDatabaseErrorHandler> errorHandler) {
  SquiDBSQLiteDatabase_initialize();
  SquiDBSQLiteDatabase *db = new_SquiDBSQLiteDatabase_initWithNSString_withInt_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(path, flags, factory, errorHandler);
  SquiDBSQLiteDatabase_open(db);
  return db;
}

SquiDBSQLiteDatabase *SquiDBSQLiteDatabase_openOrCreateDatabaseWithJavaIoFile_withSquiDBSQLiteDatabase_CursorFactory_(JavaIoFile *file, id<SquiDBSQLiteDatabase_CursorFactory> factory) {
  SquiDBSQLiteDatabase_initialize();
  return SquiDBSQLiteDatabase_openOrCreateDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_([((JavaIoFile *) nil_chk(file)) getPath], factory);
}

SquiDBSQLiteDatabase *SquiDBSQLiteDatabase_openOrCreateDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_(NSString *path, id<SquiDBSQLiteDatabase_CursorFactory> factory) {
  SquiDBSQLiteDatabase_initialize();
  return SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_withSquiDBDatabaseErrorHandler_(path, factory, SquiDBSQLiteDatabase_CREATE_IF_NECESSARY, nil);
}

SquiDBSQLiteDatabase *SquiDBSQLiteDatabase_openOrCreateDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withSquiDBDatabaseErrorHandler_(NSString *path, id<SquiDBSQLiteDatabase_CursorFactory> factory, id<SquiDBDatabaseErrorHandler> errorHandler) {
  SquiDBSQLiteDatabase_initialize();
  return SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_withSquiDBDatabaseErrorHandler_(path, factory, SquiDBSQLiteDatabase_CREATE_IF_NECESSARY, errorHandler);
}

jboolean SquiDBSQLiteDatabase_deleteDatabaseWithJavaIoFile_(JavaIoFile *file) {
  SquiDBSQLiteDatabase_initialize();
  if (file == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"file must not be null");
  }
  jboolean deleted = false;
  deleted |= [file delete__];
  deleted |= [new_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-journal")) delete__];
  deleted |= [new_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-shm")) delete__];
  deleted |= [new_JavaIoFile_initWithNSString_(JreStrcat("$$", [file getPath], @"-wal")) delete__];
  JavaIoFile *dir = [file getParentFile];
  if (dir != nil) {
    NSString *prefix = JreStrcat("$$", [file getName], @"-mj");
    id<JavaIoFileFilter> filter = new_SquiDBSQLiteDatabase_2_initWithNSString_(prefix);
    {
      IOSObjectArray *a__ = [dir listFilesWithJavaIoFileFilter:filter];
      JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *masterJournal = *b__++;
        deleted |= [((JavaIoFile *) nil_chk(masterJournal)) delete__];
      }
    }
  }
  return deleted;
}

void SquiDBSQLiteDatabase_open(SquiDBSQLiteDatabase *self) {
  @try {
    @try {
      SquiDBSQLiteDatabase_openInner(self);
    }
    @catch (SquiDBSQLiteDatabaseCorruptException *ex) {
      [self onCorruption];
      SquiDBSQLiteDatabase_openInner(self);
    }
  }
  @catch (SquiDBSQLiteException *ex) {
    SquiDBLogger_eWithNSString_withNSString_withJavaLangThrowable_(SquiDBSQLiteDatabase_TAG, JreStrcat("$$$", @"Failed to open database '", [self getLabel], @"'."), ex);
    [self close];
    @throw ex;
  }
}

void SquiDBSQLiteDatabase_openInner(SquiDBSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    JreAssert(self->mConnectionPoolLocked_ == nil, @"com/yahoo/android/sqlite/SQLiteDatabase.java:802 condition failed: assert mConnectionPoolLocked == null;");
    self->mConnectionPoolLocked_ = SquiDBSQLiteConnectionPool_openWithSquiDBSQLiteDatabaseConfiguration_(self->mConfigurationLocked_);
    [((SquiDBCloseGuard *) nil_chk(self->mCloseGuardLocked_)) openWithNSString:@"close"];
  }
  @synchronized(SquiDBSQLiteDatabase_sActiveDatabases) {
    (void) [((JavaUtilWeakHashMap *) nil_chk(SquiDBSQLiteDatabase_sActiveDatabases)) putWithId:self withId:nil];
  }
}

SquiDBSQLiteDatabase *SquiDBSQLiteDatabase_createWithSquiDBSQLiteDatabase_CursorFactory_(id<SquiDBSQLiteDatabase_CursorFactory> factory) {
  SquiDBSQLiteDatabase_initialize();
  return SquiDBSQLiteDatabase_openDatabaseWithNSString_withSquiDBSQLiteDatabase_CursorFactory_withInt_(SquiDBSQLiteDatabaseConfiguration_MEMORY_DB_PATH, factory, SquiDBSQLiteDatabase_CREATE_IF_NECESSARY);
}

NSString *SquiDBSQLiteDatabase_findEditTableWithNSString_(NSString *tables) {
  SquiDBSQLiteDatabase_initialize();
  if (!SquiDBSqlUtils_isEmptyWithNSString_(tables)) {
    jint spacepos = [((NSString *) nil_chk(tables)) java_indexOf:' '];
    jint commapos = [tables java_indexOf:','];
    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
      return [tables java_substring:0 endIndex:spacepos];
    }
    else if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {
      return [tables java_substring:0 endIndex:commapos];
    }
    return tables;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid tables");
  }
}

jint SquiDBSQLiteDatabase_executeSqlWithNSString_withNSObjectArray_(SquiDBSQLiteDatabase *self, NSString *sql, IOSObjectArray *bindArgs) {
  [self acquireReference];
  @try {
    if (SquiDBDatabaseUtils_getSqlStatementTypeWithNSString_(sql) == SquiDBDatabaseUtils_STATEMENT_ATTACH) {
      jboolean disableWal = false;
      @synchronized(self->mLock_) {
        if (!self->mHasAttachedDbsLocked_) {
          self->mHasAttachedDbsLocked_ = true;
          disableWal = true;
        }
      }
      if (disableWal) {
        [self disableWriteAheadLogging];
      }
    }
    SquiDBSQLiteStatement *statement = new_SquiDBSQLiteStatement_initWithSquiDBSQLiteDatabase_withNSString_withNSObjectArray_(self, sql, bindArgs);
    @try {
      return [statement executeUpdateDelete];
    }
    @finally {
      [statement close];
    }
  }
  @finally {
    [self releaseReference];
  }
}

jboolean SquiDBSQLiteDatabase_isReadOnlyLocked(SquiDBSQLiteDatabase *self) {
  return (((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->openFlags_ & SquiDBSQLiteDatabase_OPEN_READ_MASK) == SquiDBSQLiteDatabase_OPEN_READONLY;
}

NSString *SquiDBSQLiteDatabase_getPath(SquiDBSQLiteDatabase *self) {
  @synchronized(self->mLock_) {
    return ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->path_;
  }
}

JavaUtilArrayList *SquiDBSQLiteDatabase_getDbStats() {
  SquiDBSQLiteDatabase_initialize();
  JavaUtilArrayList *dbStatsList = new_JavaUtilArrayList_init();
  for (SquiDBSQLiteDatabase * __strong db in nil_chk(SquiDBSQLiteDatabase_getActiveDatabases())) {
    SquiDBSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(nil_chk(db), dbStatsList);
  }
  return dbStatsList;
}

void SquiDBSQLiteDatabase_collectDbStatsWithJavaUtilArrayList_(SquiDBSQLiteDatabase *self, JavaUtilArrayList *dbStatsList) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [self->mConnectionPoolLocked_ collectDbStatsWithJavaUtilArrayList:dbStatsList];
    }
  }
}

JavaUtilArrayList *SquiDBSQLiteDatabase_getActiveDatabases() {
  SquiDBSQLiteDatabase_initialize();
  JavaUtilArrayList *databases = new_JavaUtilArrayList_init();
  @synchronized(SquiDBSQLiteDatabase_sActiveDatabases) {
    [databases addAllWithJavaUtilCollection:[((JavaUtilWeakHashMap *) nil_chk(SquiDBSQLiteDatabase_sActiveDatabases)) keySet]];
  }
  return databases;
}

void SquiDBSQLiteDatabase_dumpAllWithSquiDBPrinter_withBoolean_(id<SquiDBPrinter> printer, jboolean verbose) {
  SquiDBSQLiteDatabase_initialize();
  for (SquiDBSQLiteDatabase * __strong db in nil_chk(SquiDBSQLiteDatabase_getActiveDatabases())) {
    SquiDBSQLiteDatabase_dumpWithSquiDBPrinter_withBoolean_(nil_chk(db), printer, verbose);
  }
}

void SquiDBSQLiteDatabase_dumpWithSquiDBPrinter_withBoolean_(SquiDBSQLiteDatabase *self, id<SquiDBPrinter> printer, jboolean verbose) {
  @synchronized(self->mLock_) {
    if (self->mConnectionPoolLocked_ != nil) {
      [((id<SquiDBPrinter>) nil_chk(printer)) printlnWithNSString:@""];
      [((SquiDBSQLiteConnectionPool *) nil_chk(self->mConnectionPoolLocked_)) dumpWithSquiDBPrinter:printer withBoolean:verbose];
    }
  }
}

void SquiDBSQLiteDatabase_throwIfNotOpenLocked(SquiDBSQLiteDatabase *self) {
  if (self->mConnectionPoolLocked_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"The database '", ((SquiDBSQLiteDatabaseConfiguration *) nil_chk(self->mConfigurationLocked_))->label_, @"' is not open."));
  }
}

IOSObjectArray *SquiDBSQLiteDatabase__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBSQLiteDatabase__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBSQLiteDatabase__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBSQLiteDatabase__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBSQLiteDatabase__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBSQLiteDatabase__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteDatabase)

J2OBJC_NAME_MAPPING(SquiDBSQLiteDatabase, "com.yahoo.android.sqlite", "SquiDB")

@implementation SquiDBSQLiteDatabase_1

- (instancetype)initWithSquiDBSQLiteDatabase:(SquiDBSQLiteDatabase *)outer$ {
  SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(self, outer$);
  return self;
}

- (SquiDBSQLiteSession *)initialValue {
  return [this$0_ createSession];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBSQLiteSession;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBSQLiteDatabase:);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LSquiDBSQLiteDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSQLiteDatabase;", "Ljava/lang/ThreadLocal<Lcom/yahoo/android/sqlite/SQLiteSession;>;" };
  static const J2ObjcClassInfo _SquiDBSQLiteDatabase_1 = { "", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, -1, 1, -1 };
  return &_SquiDBSQLiteDatabase_1;
}

@end

void SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(SquiDBSQLiteDatabase_1 *self, SquiDBSQLiteDatabase *outer$) {
  self->this$0_ = outer$;
  JavaLangThreadLocal_init(self);
}

SquiDBSQLiteDatabase_1 *new_SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(SquiDBSQLiteDatabase *outer$) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteDatabase_1, initWithSquiDBSQLiteDatabase_, outer$)
}

SquiDBSQLiteDatabase_1 *create_SquiDBSQLiteDatabase_1_initWithSquiDBSQLiteDatabase_(SquiDBSQLiteDatabase *outer$) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteDatabase_1, initWithSquiDBSQLiteDatabase_, outer$)
}

@implementation SquiDBSQLiteDatabase_2

- (instancetype)initWithNSString:(NSString *)capture$0 {
  SquiDBSQLiteDatabase_2_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)candidate {
  return [((NSString *) nil_chk([((JavaIoFile *) nil_chk(candidate)) getName])) java_hasPrefix:val$prefix_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(acceptWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$prefix_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "accept", "LJavaIoFile;", "LSquiDBSQLiteDatabase;", "deleteDatabaseWithJavaIoFile:" };
  static const J2ObjcClassInfo _SquiDBSQLiteDatabase_2 = { "", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_SquiDBSQLiteDatabase_2;
}

@end

void SquiDBSQLiteDatabase_2_initWithNSString_(SquiDBSQLiteDatabase_2 *self, NSString *capture$0) {
  self->val$prefix_ = capture$0;
  NSObject_init(self);
}

SquiDBSQLiteDatabase_2 *new_SquiDBSQLiteDatabase_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteDatabase_2, initWithNSString_, capture$0)
}

SquiDBSQLiteDatabase_2 *create_SquiDBSQLiteDatabase_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteDatabase_2, initWithNSString_, capture$0)
}

@implementation SquiDBSQLiteDatabase_CursorFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LSquiDBICursor;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newCursorWithSquiDBSQLiteDatabase:withSquiDBSQLiteCursorDriver:withNSString:withSquiDBSQLiteQuery:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newCursor", "LSquiDBSQLiteDatabase;LSquiDBSQLiteCursorDriver;LNSString;LSquiDBSQLiteQuery;", "LSquiDBSQLiteDatabase;" };
  static const J2ObjcClassInfo _SquiDBSQLiteDatabase_CursorFactory = { "CursorFactory", "com.yahoo.android.sqlite", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_SquiDBSQLiteDatabase_CursorFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(SquiDBSQLiteDatabase_CursorFactory)

@implementation SquiDBSQLiteDatabase_CustomFunction

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(callbackWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "callback", "[LNSString;", "LSquiDBSQLiteDatabase;" };
  static const J2ObjcClassInfo _SquiDBSQLiteDatabase_CustomFunction = { "CustomFunction", "com.yahoo.android.sqlite", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_SquiDBSQLiteDatabase_CustomFunction;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(SquiDBSQLiteDatabase_CustomFunction)
