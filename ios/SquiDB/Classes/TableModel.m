//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TableModel.java
//

#include "AbstractModel.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISQLitePreparedStatement.h"
#include "J2ObjC_source.h"
#include "Property.h"
#include "Table.h"
#include "TableModel.h"
#include "ValuesStorage.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"

@class SquiDBTableModel_ValueBindingPropertyVisitor;

inline SquiDBTableModel_ValueBindingPropertyVisitor *SquiDBTableModel_get_valueBindingVisitor(void);
static SquiDBTableModel_ValueBindingPropertyVisitor *SquiDBTableModel_valueBindingVisitor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBTableModel, valueBindingVisitor, SquiDBTableModel_ValueBindingPropertyVisitor *)

__attribute__((unused)) static IOSObjectArray *SquiDBTableModel__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *SquiDBTableModel__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *SquiDBTableModel__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *SquiDBTableModel__Annotations$3(void);

@interface SquiDBTableModel_ModelAndIndex : NSObject {
 @public
  SquiDBTableModel *model_;
  jint index_;
}

- (instancetype)initWithSquiDBTableModel:(SquiDBTableModel *)model;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBTableModel_ModelAndIndex)

J2OBJC_FIELD_SETTER(SquiDBTableModel_ModelAndIndex, model_, SquiDBTableModel *)

__attribute__((unused)) static void SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(SquiDBTableModel_ModelAndIndex *self, SquiDBTableModel *model);

__attribute__((unused)) static SquiDBTableModel_ModelAndIndex *new_SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(SquiDBTableModel *model) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBTableModel_ModelAndIndex *create_SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(SquiDBTableModel *model);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTableModel_ModelAndIndex)

@interface SquiDBTableModel_ValueBindingPropertyVisitor : NSObject < SquiDBProperty_PropertyWritingVisitor >

- (instancetype)init;

- (JavaLangVoid *)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                          withId:(SquiDBTableModel_ModelAndIndex *)data;

- (JavaLangVoid *)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                       withId:(SquiDBTableModel_ModelAndIndex *)data;

- (JavaLangVoid *)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                         withId:(SquiDBTableModel_ModelAndIndex *)data;

- (JavaLangVoid *)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                         withId:(SquiDBTableModel_ModelAndIndex *)data;

- (JavaLangVoid *)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                          withId:(SquiDBTableModel_ModelAndIndex *)data;

- (JavaLangVoid *)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                       withId:(SquiDBTableModel_ModelAndIndex *)data;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBTableModel_ValueBindingPropertyVisitor)

__attribute__((unused)) static void SquiDBTableModel_ValueBindingPropertyVisitor_init(SquiDBTableModel_ValueBindingPropertyVisitor *self);

__attribute__((unused)) static SquiDBTableModel_ValueBindingPropertyVisitor *new_SquiDBTableModel_ValueBindingPropertyVisitor_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBTableModel_ValueBindingPropertyVisitor *create_SquiDBTableModel_ValueBindingPropertyVisitor_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBTableModel_ValueBindingPropertyVisitor)

J2OBJC_INITIALIZED_DEFN(SquiDBTableModel)

NSString *SquiDBTableModel_DEFAULT_ID_COLUMN = @"_id";
NSString *SquiDBTableModel_ROWID = @"rowid";

@implementation SquiDBTableModel

+ (NSString *)DEFAULT_ID_COLUMN {
  return SquiDBTableModel_DEFAULT_ID_COLUMN;
}

+ (NSString *)ROWID {
  return SquiDBTableModel_ROWID;
}

+ (jlong)NO_ID {
  return SquiDBTableModel_NO_ID;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBTableModel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)getRowId {
  JavaLangLong *id_ = nil;
  NSString *idPropertyName = [((SquiDBProperty_LongProperty *) nil_chk([self getRowIdProperty])) getName];
  if (setValues_ != nil && [setValues_ containsKeyWithNSString:idPropertyName]) {
    id_ = (JavaLangLong *) cast_chk([setValues_ getWithNSString:idPropertyName], [JavaLangLong class]);
  }
  else if (values_ != nil && [values_ containsKeyWithNSString:idPropertyName]) {
    id_ = (JavaLangLong *) cast_chk([values_ getWithNSString:idPropertyName], [JavaLangLong class]);
  }
  if (id_ != nil) {
    return [id_ longLongValue];
  }
  return SquiDBTableModel_NO_ID;
}

- (jlong)getId {
  return [self getRowId];
}

- (SquiDBTableModel *)setRowIdWithLong:(jlong)rowid {
  if (rowid == SquiDBTableModel_NO_ID) {
    [self clearValueWithSquiDBProperty:[self getRowIdProperty]];
  }
  else {
    if (setValues_ == nil) {
      setValues_ = [self newValuesStorage];
    }
    [((SquiDBValuesStorage *) nil_chk(setValues_)) putWithNSString:[((SquiDBProperty_LongProperty *) nil_chk([self getRowIdProperty])) getName] withJavaLangLong:JavaLangLong_valueOfWithLong_(rowid)];
  }
  return self;
}

- (SquiDBTableModel *)setIdWithLong:(jlong)id_ {
  return [self setRowIdWithLong:id_];
}

- (jboolean)isSaved {
  return [self getRowId] != SquiDBTableModel_NO_ID;
}

- (SquiDBProperty_LongProperty *)getRowIdProperty {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (SquiDBProperty_LongProperty *)getIdProperty {
  return [self getRowIdProperty];
}

- (void)bindValuesForInsertWithSquiDBTable:(SquiDBTable *)table
        withSquiDBISQLitePreparedStatement:(id<SquiDBISQLitePreparedStatement>)preparedInsert {
  SquiDBProperty_LongProperty *rowidProperty = [self getRowIdProperty];
  IOSObjectArray *allProperties = [((SquiDBTable *) nil_chk(table)) getProperties];
  SquiDBTableModel_ModelAndIndex *modelAndIndex = new_SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(self);
  {
    IOSObjectArray *a__ = allProperties;
    SquiDBProperty * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    SquiDBProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      SquiDBProperty *property = *b__++;
      if (property == rowidProperty) {
        jlong rowid = [self getRowId];
        if (rowid == SquiDBTableModel_NO_ID) {
          [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedInsert)) bindNullWithInt:modelAndIndex->index_];
        }
        else {
          [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedInsert)) bindLongWithInt:modelAndIndex->index_ withLong:rowid];
        }
      }
      else {
        (void) [((SquiDBProperty *) nil_chk(property)) acceptWithSquiDBProperty_PropertyWritingVisitor:SquiDBTableModel_valueBindingVisitor withId:preparedInsert withId:modelAndIndex];
      }
      modelAndIndex->index_++;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "LSquiDBTableModel;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LSquiDBTableModel;", 0x1, 3, 2, -1, -1, 4, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBProperty_LongProperty;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBProperty_LongProperty;", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getRowId);
  methods[2].selector = @selector(getId);
  methods[3].selector = @selector(setRowIdWithLong:);
  methods[4].selector = @selector(setIdWithLong:);
  methods[5].selector = @selector(isSaved);
  methods[6].selector = @selector(getRowIdProperty);
  methods[7].selector = @selector(getIdProperty);
  methods[8].selector = @selector(bindValuesForInsertWithSquiDBTable:withSquiDBISQLitePreparedStatement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ID_COLUMN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, 9 },
    { "ROWID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "NO_ID", "J", .constantValue.asLong = SquiDBTableModel_NO_ID, 0x19, -1, -1, -1, -1 },
    { "valueBindingVisitor", "LSquiDBTableModel_ValueBindingPropertyVisitor;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&SquiDBTableModel__Annotations$0, "setRowId", "J", "setId", (void *)&SquiDBTableModel__Annotations$1, (void *)&SquiDBTableModel__Annotations$2, "bindValuesForInsert", "LSquiDBTable;LSquiDBISQLitePreparedStatement;", &SquiDBTableModel_DEFAULT_ID_COLUMN, (void *)&SquiDBTableModel__Annotations$3, &SquiDBTableModel_ROWID, &SquiDBTableModel_valueBindingVisitor, "LSquiDBTableModel_ModelAndIndex;LSquiDBTableModel_ValueBindingPropertyVisitor;" };
  static const J2ObjcClassInfo _SquiDBTableModel = { "TableModel", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x401, 9, 4, -1, 12, -1, -1, -1 };
  return &_SquiDBTableModel;
}

+ (void)initialize {
  if (self == [SquiDBTableModel class]) {
    SquiDBTableModel_valueBindingVisitor = new_SquiDBTableModel_ValueBindingPropertyVisitor_init();
    J2OBJC_SET_INITIALIZED(SquiDBTableModel)
  }
}

@end

void SquiDBTableModel_init(SquiDBTableModel *self) {
  SquiDBAbstractModel_init(self);
}

IOSObjectArray *SquiDBTableModel__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBTableModel__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBTableModel__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *SquiDBTableModel__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTableModel)

J2OBJC_NAME_MAPPING(SquiDBTableModel, "com.yahoo.squidb.data", "SquiDB")

@implementation SquiDBTableModel_ModelAndIndex

- (instancetype)initWithSquiDBTableModel:(SquiDBTableModel *)model {
  SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(self, model);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBTableModel:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "model_", "LSquiDBTableModel;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBTableModel;" };
  static const J2ObjcClassInfo _SquiDBTableModel_ModelAndIndex = { "ModelAndIndex", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x1a, 1, 2, 0, -1, -1, -1, -1 };
  return &_SquiDBTableModel_ModelAndIndex;
}

@end

void SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(SquiDBTableModel_ModelAndIndex *self, SquiDBTableModel *model) {
  NSObject_init(self);
  self->index_ = 1;
  self->model_ = model;
}

SquiDBTableModel_ModelAndIndex *new_SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(SquiDBTableModel *model) {
  J2OBJC_NEW_IMPL(SquiDBTableModel_ModelAndIndex, initWithSquiDBTableModel_, model)
}

SquiDBTableModel_ModelAndIndex *create_SquiDBTableModel_ModelAndIndex_initWithSquiDBTableModel_(SquiDBTableModel *model) {
  J2OBJC_CREATE_IMPL(SquiDBTableModel_ModelAndIndex, initWithSquiDBTableModel_, model)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTableModel_ModelAndIndex)

@implementation SquiDBTableModel_ValueBindingPropertyVisitor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBTableModel_ValueBindingPropertyVisitor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangVoid *)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                          withId:(SquiDBTableModel_ModelAndIndex *)data {
  JavaLangInteger *val = [((SquiDBTableModel *) nil_chk(((SquiDBTableModel_ModelAndIndex *) nil_chk(data))->model_)) getWithSquiDBProperty:property withBoolean:false];
  if (val == nil) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindNullWithInt:data->index_];
  }
  else {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindLongWithInt:data->index_ withLong:[val intValue]];
  }
  return nil;
}

- (JavaLangVoid *)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                       withId:(SquiDBTableModel_ModelAndIndex *)data {
  JavaLangLong *val = [((SquiDBTableModel *) nil_chk(((SquiDBTableModel_ModelAndIndex *) nil_chk(data))->model_)) getWithSquiDBProperty:property withBoolean:false];
  if (val == nil) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindNullWithInt:data->index_];
  }
  else {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindLongWithInt:data->index_ withLong:[val longLongValue]];
  }
  return nil;
}

- (JavaLangVoid *)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                         withId:(SquiDBTableModel_ModelAndIndex *)data {
  JavaLangDouble *val = [((SquiDBTableModel *) nil_chk(((SquiDBTableModel_ModelAndIndex *) nil_chk(data))->model_)) getWithSquiDBProperty:property withBoolean:false];
  if (val == nil) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindNullWithInt:data->index_];
  }
  else {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindDoubleWithInt:data->index_ withDouble:[val doubleValue]];
  }
  return nil;
}

- (JavaLangVoid *)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                         withId:(SquiDBTableModel_ModelAndIndex *)data {
  NSString *val = [((SquiDBTableModel *) nil_chk(((SquiDBTableModel_ModelAndIndex *) nil_chk(data))->model_)) getWithSquiDBProperty:property withBoolean:false];
  if (val == nil) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindNullWithInt:data->index_];
  }
  else {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindStringWithInt:data->index_ withNSString:val];
  }
  return nil;
}

- (JavaLangVoid *)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                          withId:(SquiDBTableModel_ModelAndIndex *)data {
  JavaLangBoolean *val = [((SquiDBTableModel *) nil_chk(((SquiDBTableModel_ModelAndIndex *) nil_chk(data))->model_)) getWithSquiDBProperty:property withBoolean:false];
  if (val == nil) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindNullWithInt:data->index_];
  }
  else {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindLongWithInt:data->index_ withLong:[val booleanValue] ? 1 : 0];
  }
  return nil;
}

- (JavaLangVoid *)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(id<SquiDBISQLitePreparedStatement>)preparedStatement
                                       withId:(SquiDBTableModel_ModelAndIndex *)data {
  IOSByteArray *val = [((SquiDBTableModel *) nil_chk(((SquiDBTableModel_ModelAndIndex *) nil_chk(data))->model_)) getWithSquiDBProperty:property withBoolean:false];
  if (val == nil) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindNullWithInt:data->index_];
  }
  else {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) bindBlobWithInt:data->index_ withByteArray:val];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 7, 1, -1, 8, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 9, 1, -1, 10, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 11, 1, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(visitIntegerWithSquiDBProperty:withId:withId:);
  methods[2].selector = @selector(visitLongWithSquiDBProperty:withId:withId:);
  methods[3].selector = @selector(visitDoubleWithSquiDBProperty:withId:withId:);
  methods[4].selector = @selector(visitStringWithSquiDBProperty:withId:withId:);
  methods[5].selector = @selector(visitBooleanWithSquiDBProperty:withId:withId:);
  methods[6].selector = @selector(visitBlobWithSquiDBProperty:withId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "visitInteger", "LSquiDBProperty;LSquiDBISQLitePreparedStatement;LSquiDBTableModel_ModelAndIndex;", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Integer;>;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;)Ljava/lang/Void;", "visitLong", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Long;>;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;)Ljava/lang/Void;", "visitDouble", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Double;>;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;)Ljava/lang/Void;", "visitString", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/String;>;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;)Ljava/lang/Void;", "visitBoolean", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Boolean;>;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;)Ljava/lang/Void;", "visitBlob", "(Lcom/yahoo/squidb/sql/Property<[B>;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;)Ljava/lang/Void;", "LSquiDBTableModel;", "Ljava/lang/Object;Lcom/yahoo/squidb/sql/Property$PropertyWritingVisitor<Ljava/lang/Void;Lcom/yahoo/squidb/data/ISQLitePreparedStatement;Lcom/yahoo/squidb/data/TableModel$ModelAndIndex;>;" };
  static const J2ObjcClassInfo _SquiDBTableModel_ValueBindingPropertyVisitor = { "ValueBindingPropertyVisitor", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0xa, 7, 0, 13, -1, -1, 14, -1 };
  return &_SquiDBTableModel_ValueBindingPropertyVisitor;
}

@end

void SquiDBTableModel_ValueBindingPropertyVisitor_init(SquiDBTableModel_ValueBindingPropertyVisitor *self) {
  NSObject_init(self);
}

SquiDBTableModel_ValueBindingPropertyVisitor *new_SquiDBTableModel_ValueBindingPropertyVisitor_init() {
  J2OBJC_NEW_IMPL(SquiDBTableModel_ValueBindingPropertyVisitor, init)
}

SquiDBTableModel_ValueBindingPropertyVisitor *create_SquiDBTableModel_ValueBindingPropertyVisitor_init() {
  J2OBJC_CREATE_IMPL(SquiDBTableModel_ValueBindingPropertyVisitor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBTableModel_ValueBindingPropertyVisitor)
