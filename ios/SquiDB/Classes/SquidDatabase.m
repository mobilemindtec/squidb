//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SquidDatabase.java
//

#include "AbstractModel.h"
#include "CompileContext.h"
#include "CompiledStatement.h"
#include "Criterion.h"
#include "DataChangedNotifier.h"
#include "Delete.h"
#include "Field.h"
#include "ICursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISQLiteDatabase.h"
#include "ISQLiteOpenHelper.h"
#include "ISQLitePreparedStatement.h"
#include "Index.h"
#include "Insert.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "PreparedInsertCache.h"
#include "Property.h"
#include "Query.h"
#include "SqlStatement.h"
#include "SqlTable.h"
#include "SqlUtils.h"
#include "SquidCursor.h"
#include "SquidDatabase.h"
#include "SquidTransactionListener.h"
#include "SquidUtilities.h"
#include "Table.h"
#include "TableModel.h"
#include "TableModelName.h"
#include "TableStatement.h"
#include "Update.h"
#include "ValuesStorage.h"
#include "VersionCode.h"
#include "View.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Deque.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "java/util/function/Function.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComYahooSquidbDataSquidDatabase () {
 @public
  id<JavaUtilSet> trackedPreparedInserts_;
  JavaLangThreadLocal *preparedInsertCache_;
  jboolean preparedInsertCacheEnabled_;
  ComYahooSquidbDataSquidDatabase *attachedTo_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *readWriteLock_;
  id databaseInstanceLock_;
  id<ComYahooSquidbDataISQLiteOpenHelper> helper_;
  id<ComYahooSquidbDataISQLiteDatabase> database_;
  ComYahooSquidbUtilityVersionCode *sqliteVersion_;
  id<JavaUtilMap> tableMap_;
  jboolean isInMigration_;
  jboolean isInMigrationFailedHook_;
  jint databaseOpenFailedRetryCount_;
  JavaLangThreadLocal *transactionSuccessState_;
  id notifiersLock_;
  jboolean dataChangedNotificationsEnabled_;
  id<JavaUtilList> globalNotifiers_;
  id<JavaUtilMap> tableNotifiers_;
  JavaLangThreadLocal *notifierAccumulator_;
}

- (void)registerTableModelsWithComYahooSquidbSqlSqlTableArray:(IOSObjectArray *)tables;

- (id<ComYahooSquidbDataISQLiteOpenHelper>)getOpenHelper;

- (void)openForWritingLocked;

- (JavaLangThreadLocal *)newPreparedInsertCacheWithJavaUtilSet:(id<JavaUtilSet>)openStatementTracking OBJC_METHOD_FAMILY_NONE;

- (NSString *)attachToWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)attachTo;

- (jboolean)detachFromWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)detachFrom;

- (NSString *)getAttachedName;

- (void)recreateLocked;

- (void)closeLocked;

- (void)closeAndDeleteLocked;

- (void)closeAndDeleteInternalWithBoolean:(jboolean)deleteAfterClose;

- (void)clearPreparedStatementCache;

- (jlong)insertInternalWithComYahooSquidbSqlInsert:(ComYahooSquidbSqlInsert *)insert;

- (jint)deleteInternalWithComYahooSquidbSqlDelete:(ComYahooSquidbSqlDelete *)delete_;

- (jint)updateInternalWithComYahooSquidbSqlUpdate:(ComYahooSquidbSqlUpdate *)update;

- (void)setDatabaseWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db;

- (ComYahooSquidbUtilityVersionCode *)readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db;

- (jboolean)propertyBelongsToTableWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property;

- (ComYahooSquidbSqlQuery *)inferTableForQueryWithIOSClass:(IOSClass *)modelClass
                                withComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query;

- (void)ensureSqlCompilesWithNSString:(NSString *)sql;

- (jlong)insertRowLegacyWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item
                              withComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table
   withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm;

- (void)notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation:(ComYahooSquidbDataDataChangedNotifier_DBOperation *)op
                                        withComYahooSquidbDataAbstractModel:(ComYahooSquidbDataAbstractModel *)modelValues
                                              withComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table
                                                                   withLong:(jlong)rowId;

- (void)onDataChangedWithJavaUtilList:(id<JavaUtilList>)notifiers
withComYahooSquidbDataDataChangedNotifier_DBOperation:(ComYahooSquidbDataDataChangedNotifier_DBOperation *)op
  withComYahooSquidbDataAbstractModel:(ComYahooSquidbDataAbstractModel *)modelValues
        withComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table
                             withLong:(jlong)rowId;

- (void)flushAccumulatedNotificationsWithBoolean:(jboolean)transactionSuccess;

- (jboolean)copyDatabaseLockedWithJavaIoFile:(JavaIoFile *)toDir OBJC_METHOD_FAMILY_NONE;

- (jboolean)copyFileIfExistsWithJavaIoFile:(JavaIoFile *)inArg
                            withJavaIoFile:(JavaIoFile *)toDir OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, trackedPreparedInserts_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, preparedInsertCache_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, attachedTo_, ComYahooSquidbDataSquidDatabase *)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, readWriteLock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, databaseInstanceLock_, id)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, helper_, id<ComYahooSquidbDataISQLiteOpenHelper>)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, database_, id<ComYahooSquidbDataISQLiteDatabase>)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, sqliteVersion_, ComYahooSquidbUtilityVersionCode *)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, tableMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, transactionSuccessState_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, notifiersLock_, id)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, globalNotifiers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, tableNotifiers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase, notifierAccumulator_, JavaLangThreadLocal *)

inline jint ComYahooSquidbDataSquidDatabase_get_STRING_BUILDER_INITIAL_CAPACITY(void);
#define ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY 128
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooSquidbDataSquidDatabase, STRING_BUILDER_INITIAL_CAPACITY, jint)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_registerTableModelsWithComYahooSquidbSqlSqlTableArray_(ComYahooSquidbDataSquidDatabase *self, IOSObjectArray *tables);

__attribute__((unused)) static id<ComYahooSquidbDataISQLiteOpenHelper> ComYahooSquidbDataSquidDatabase_getOpenHelper(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static ComYahooSquidbSqlSqlTable *ComYahooSquidbDataSquidDatabase_getSqlTableWithIOSClass_(ComYahooSquidbDataSquidDatabase *self, IOSClass *modelClass);

__attribute__((unused)) static ComYahooSquidbSqlTable *ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(ComYahooSquidbDataSquidDatabase *self, IOSClass *modelClass);

__attribute__((unused)) static id<ComYahooSquidbDataISQLiteDatabase> ComYahooSquidbDataSquidDatabase_getDatabase(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_openForWritingLocked(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static JavaLangThreadLocal *ComYahooSquidbDataSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(ComYahooSquidbDataSquidDatabase *self, id<JavaUtilSet> openStatementTracking);

__attribute__((unused)) static NSString *ComYahooSquidbDataSquidDatabase_attachToWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataSquidDatabase *attachTo);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_detachFromWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataSquidDatabase *detachFrom);

__attribute__((unused)) static NSString *ComYahooSquidbDataSquidDatabase_getAttachedName(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_isOpen(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_recreateLocked(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_closeLocked(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_closeAndDeleteLocked(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_closeAndDeleteInternalWithBoolean_(ComYahooSquidbDataSquidDatabase *self, jboolean deleteAfterClose);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_clearPreparedStatementCache(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static jlong ComYahooSquidbDataSquidDatabase_insertInternalWithComYahooSquidbSqlInsert_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlInsert *insert);

__attribute__((unused)) static jint ComYahooSquidbDataSquidDatabase_deleteInternalWithComYahooSquidbSqlDelete_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlDelete *delete_);

__attribute__((unused)) static jint ComYahooSquidbDataSquidDatabase_updateInternalWithComYahooSquidbSqlUpdate_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlUpdate *update);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_inTransaction(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(ComYahooSquidbDataSquidDatabase *self, id<ComYahooSquidbDataISQLiteDatabase> db);

__attribute__((unused)) static ComYahooSquidbUtilityVersionCode *ComYahooSquidbDataSquidDatabase_readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase_(ComYahooSquidbDataSquidDatabase *self, id<ComYahooSquidbDataISQLiteDatabase> db);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_propertyBelongsToTableWithComYahooSquidbSqlProperty_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlProperty *property);

__attribute__((unused)) static ComYahooSquidbSqlCompileContext *ComYahooSquidbDataSquidDatabase_getCompileContext(ComYahooSquidbDataSquidDatabase *self);

__attribute__((unused)) static ComYahooSquidbSqlQuery *ComYahooSquidbDataSquidDatabase_inferTableForQueryWithIOSClass_withComYahooSquidbSqlQuery_(ComYahooSquidbDataSquidDatabase *self, IOSClass *modelClass, ComYahooSquidbSqlQuery *query);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_ensureSqlCompilesWithNSString_(ComYahooSquidbDataSquidDatabase *self, NSString *sql);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_insertRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataTableModel *item, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm);

__attribute__((unused)) static jlong ComYahooSquidbDataSquidDatabase_insertRowLegacyWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTable_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataTableModel *item, ComYahooSquidbSqlTable *table, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_updateRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataTableModel *item, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataDataChangedNotifier_DBOperation *op, ComYahooSquidbDataAbstractModel *modelValues, ComYahooSquidbSqlSqlTable *table, jlong rowId);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_onDataChangedWithJavaUtilList_withComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(ComYahooSquidbDataSquidDatabase *self, id<JavaUtilList> notifiers, ComYahooSquidbDataDataChangedNotifier_DBOperation *op, ComYahooSquidbDataAbstractModel *modelValues, ComYahooSquidbSqlSqlTable *table, jlong rowId);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_flushAccumulatedNotificationsWithBoolean_(ComYahooSquidbDataSquidDatabase *self, jboolean transactionSuccess);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_copyDatabaseLockedWithJavaIoFile_(ComYahooSquidbDataSquidDatabase *self, JavaIoFile *toDir);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(ComYahooSquidbDataSquidDatabase *self, JavaIoFile *inArg, JavaIoFile *toDir);

@interface ComYahooSquidbDataSquidDatabase_1 : JavaLangThreadLocal {
 @public
  id<JavaUtilSet> val$openStatementTracking_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0;

- (ComYahooSquidbDataPreparedInsertCache *)initialValue OBJC_METHOD_FAMILY_NONE;

- (ComYahooSquidbDataPreparedInsertCache *)get;

- (ComYahooSquidbDataPreparedInsertCache *)childValueWithId:(ComYahooSquidbDataPreparedInsertCache *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooSquidbDataSquidDatabase_1)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(ComYahooSquidbDataSquidDatabase_1 *self, id<JavaUtilSet> capture$0);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_1 *new_ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_1 *create_ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0);

@interface ComYahooSquidbDataSquidDatabase_TransactionSuccessState : NSObject {
 @public
  id<JavaUtilDeque> nestedSuccessStack_;
  jboolean outerTransactionSuccess_;
}

- (instancetype)init;

- (void)beginTransaction;

- (jboolean)inTransaction;

- (void)setTransactionSuccessful;

- (void)unsetTransactionSuccessful;

- (void)endTransaction;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooSquidbDataSquidDatabase_TransactionSuccessState)

J2OBJC_FIELD_SETTER(ComYahooSquidbDataSquidDatabase_TransactionSuccessState, nestedSuccessStack_, id<JavaUtilDeque>)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_TransactionSuccessState *new_ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_TransactionSuccessState *create_ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init(void);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static jboolean ComYahooSquidbDataSquidDatabase_TransactionSuccessState_inTransaction(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_setTransactionSuccessful(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_endTransaction(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_reset(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self);

J2OBJC_TYPE_LITERAL_HEADER(ComYahooSquidbDataSquidDatabase_TransactionSuccessState)

@interface ComYahooSquidbDataSquidDatabase_2 : JavaLangThreadLocal

- (instancetype)init;

- (ComYahooSquidbDataSquidDatabase_TransactionSuccessState *)initialValue OBJC_METHOD_FAMILY_NONE;

- (ComYahooSquidbDataSquidDatabase_TransactionSuccessState *)get;

- (ComYahooSquidbDataSquidDatabase_TransactionSuccessState *)childValueWithId:(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooSquidbDataSquidDatabase_2)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_2_init(ComYahooSquidbDataSquidDatabase_2 *self);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_2 *new_ComYahooSquidbDataSquidDatabase_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_2 *create_ComYahooSquidbDataSquidDatabase_2_init(void);

@interface ComYahooSquidbDataSquidDatabase_OpenHelperDelegate () {
 @public
  ComYahooSquidbDataSquidDatabase *this$0_;
}

- (instancetype)initWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)outer$;

@end

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *self, ComYahooSquidbDataSquidDatabase *outer$);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *new_ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *create_ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *outer$);

@interface ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor : NSObject < ComYahooSquidbSqlProperty_PropertyVisitor >

- (instancetype)init;

- (JavaLangVoid *)appendColumnDefinitionWithNSString:(NSString *)type
                       withComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitDoubleWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                    withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitIntegerWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                     withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitLongWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                  withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitStringWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                    withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitBooleanWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                     withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitBlobWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                  withId:(JavaLangStringBuilder *)sql;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *self);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *new_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *create_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init(void);

__attribute__((unused)) static JavaLangVoid *ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *self, NSString *type, ComYahooSquidbSqlProperty *property, JavaLangStringBuilder *sql);

J2OBJC_TYPE_LITERAL_HEADER(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor)

@interface ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException : JavaLangRuntimeException

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException)

inline jlong ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_get_serialVersionUID(void);
#define ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_serialVersionUID 480910684116077495LL
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException, serialVersionUID, jlong)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *self);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *new_ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *create_ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException)

inline jlong ComYahooSquidbDataSquidDatabase_MigrationFailedException_get_serialVersionUID(void);
#define ComYahooSquidbDataSquidDatabase_MigrationFailedException_serialVersionUID 2949995666882182744LL
J2OBJC_STATIC_FIELD_CONSTANT(ComYahooSquidbDataSquidDatabase_MigrationFailedException, serialVersionUID, jlong)

@interface ComYahooSquidbDataSquidDatabase_3 : JavaLangThreadLocal

- (instancetype)init;

- (id<JavaUtilSet>)initialValue OBJC_METHOD_FAMILY_NONE;

- (id<JavaUtilSet>)get;

- (id<JavaUtilSet>)childValueWithId:(id<JavaUtilSet>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYahooSquidbDataSquidDatabase_3)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_3_init(ComYahooSquidbDataSquidDatabase_3 *self);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_3 *new_ComYahooSquidbDataSquidDatabase_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_3 *create_ComYahooSquidbDataSquidDatabase_3_init(void);

@interface ComYahooSquidbDataSquidDatabase_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id)x;

@end

J2OBJC_STATIC_INIT(ComYahooSquidbDataSquidDatabase_$Lambda$1)

inline ComYahooSquidbDataSquidDatabase_$Lambda$1 *ComYahooSquidbDataSquidDatabase_$Lambda$1_get_instance(void);
static ComYahooSquidbDataSquidDatabase_$Lambda$1 *ComYahooSquidbDataSquidDatabase_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYahooSquidbDataSquidDatabase_$Lambda$1, instance, ComYahooSquidbDataSquidDatabase_$Lambda$1 *)

__attribute__((unused)) static void ComYahooSquidbDataSquidDatabase_$Lambda$1_init(ComYahooSquidbDataSquidDatabase_$Lambda$1 *self);

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_$Lambda$1 *new_ComYahooSquidbDataSquidDatabase_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYahooSquidbDataSquidDatabase_$Lambda$1 *create_ComYahooSquidbDataSquidDatabase_$Lambda$1_init(void);

@implementation ComYahooSquidbDataSquidDatabase

- (void)setShowSqlWithBoolean:(jboolean)showSql {
  self->showSql_ = showSql;
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getTables {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getViews {
  return nil;
}

- (IOSObjectArray *)getIndexes {
  return nil;
}

- (void)onTablesCreatedWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
}

- (jboolean)onUpgradeWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db
                                                   withInt:(jint)oldVersion
                                                   withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)onDowngradeWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db
                                                     withInt:(jint)oldVersion
                                                     withInt:(jint)newVersion {
  return true;
}

- (void)onMigrationFailedWithComYahooSquidbDataSquidDatabase_MigrationFailedException:(ComYahooSquidbDataSquidDatabase_MigrationFailedException *)failure {
  @throw nil_chk(failure);
}

- (void)onDatabaseOpenFailedWithJavaLangRuntimeException:(JavaLangRuntimeException *)failure
                                                 withInt:(jint)openFailureCount {
  @throw nil_chk(failure);
}

- (void)onConfigureWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
}

- (void)onOpenWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
}

- (void)onCloseWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
}

- (void)onErrorWithNSString:(NSString *)message
      withJavaLangThrowable:(JavaLangThrowable *)error {
  ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withJavaLangThrowable_(ComYahooSquidbUtilityLogger_LOG_TAG, JreStrcat("$$$", [[self java_getClass] getSimpleName], @" -- ", message), error);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataSquidDatabase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)registerTableModelsWithComYahooSquidbSqlSqlTableArray:(IOSObjectArray *)tables {
  ComYahooSquidbDataSquidDatabase_registerTableModelsWithComYahooSquidbSqlSqlTableArray_(self, tables);
}

- (id<ComYahooSquidbDataISQLiteOpenHelper>)getOpenHelper {
  return ComYahooSquidbDataSquidDatabase_getOpenHelper(self);
}

- (id<ComYahooSquidbDataISQLiteOpenHelper>)createOpenHelperWithNSString:(NSString *)databaseName
                 withComYahooSquidbDataSquidDatabase_OpenHelperDelegate:(ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *)delegate
                                                                withInt:(jint)version_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDatabasePath {
  return [((id<ComYahooSquidbDataISQLiteOpenHelper>) nil_chk(ComYahooSquidbDataSquidDatabase_getOpenHelper(self))) getDatabasePath];
}

- (ComYahooSquidbSqlSqlTable *)getSqlTableWithIOSClass:(IOSClass *)modelClass {
  return ComYahooSquidbDataSquidDatabase_getSqlTableWithIOSClass_(self, modelClass);
}

- (ComYahooSquidbSqlTable *)getTableWithIOSClass:(IOSClass *)modelClass {
  return ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
}

- (id<ComYahooSquidbDataISQLiteDatabase>)getDatabase {
  return ComYahooSquidbDataSquidDatabase_getDatabase(self);
}

- (void)openForWritingLocked {
  ComYahooSquidbDataSquidDatabase_openForWritingLocked(self);
}

- (void)setPreparedInsertCacheEnabledWithBoolean:(jboolean)enabled {
  preparedInsertCacheEnabled_ = enabled;
}

- (JavaLangThreadLocal *)newPreparedInsertCacheWithJavaUtilSet:(id<JavaUtilSet>)openStatementTracking {
  return ComYahooSquidbDataSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(self, openStatementTracking);
}

- (NSString *)attachDatabaseWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)other {
  if (attachedTo_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Can't attach a database to a database that is itself attached");
  }
  if (ComYahooSquidbDataSquidDatabase_inTransaction(self)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Can't attach a database while in a transaction on the current thread");
  }
  [self acquireExclusiveLock];
  @try {
    return ComYahooSquidbDataSquidDatabase_attachToWithComYahooSquidbDataSquidDatabase_(nil_chk(other), self);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (jboolean)detachDatabaseWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)other {
  if (((ComYahooSquidbDataSquidDatabase *) nil_chk(other))->attachedTo_ != self) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Database ", [other getName], @" is not attached to ", [self getName]));
  }
  return ComYahooSquidbDataSquidDatabase_detachFromWithComYahooSquidbDataSquidDatabase_(other, self);
}

- (NSString *)attachToWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)attachTo {
  return ComYahooSquidbDataSquidDatabase_attachToWithComYahooSquidbDataSquidDatabase_(self, attachTo);
}

- (jboolean)detachFromWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)detachFrom {
  return ComYahooSquidbDataSquidDatabase_detachFromWithComYahooSquidbDataSquidDatabase_(self, detachFrom);
}

- (NSString *)getAttachedName {
  return ComYahooSquidbDataSquidDatabase_getAttachedName(self);
}

- (jboolean)isOpen {
  return ComYahooSquidbDataSquidDatabase_isOpen(self);
}

- (void)close {
  [self acquireExclusiveLock];
  @try {
    ComYahooSquidbDataSquidDatabase_closeLocked(self);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (void)clear {
  [self acquireExclusiveLock];
  @try {
    ComYahooSquidbDataSquidDatabase_closeAndDeleteLocked(self);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (void)recreate {
  if (isInMigration_) {
    @throw new_ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init();
  }
  else if (isInMigrationFailedHook_ || databaseOpenFailedRetryCount_ > 0) {
    ComYahooSquidbDataSquidDatabase_recreateLocked(self);
  }
  else {
    [self acquireExclusiveLock];
    @try {
      ComYahooSquidbDataSquidDatabase_recreateLocked(self);
    }
    @finally {
      [self releaseExclusiveLock];
    }
  }
}

- (void)recreateLocked {
  ComYahooSquidbDataSquidDatabase_recreateLocked(self);
}

- (void)closeLocked {
  ComYahooSquidbDataSquidDatabase_closeLocked(self);
}

- (void)closeAndDeleteLocked {
  ComYahooSquidbDataSquidDatabase_closeAndDeleteLocked(self);
}

- (void)closeAndDeleteInternalWithBoolean:(jboolean)deleteAfterClose {
  ComYahooSquidbDataSquidDatabase_closeAndDeleteInternalWithBoolean_(self, deleteAfterClose);
}

- (void)clearPreparedStatementCache {
  ComYahooSquidbDataSquidDatabase_clearPreparedStatementCache(self);
}

- (NSString *)description {
  return JreStrcat("$$", @"DB:", [self getName]);
}

- (id<ComYahooSquidbDataICursor>)rawQueryWithNSString:(NSString *)sql
                                    withNSObjectArray:(IOSObjectArray *)sqlArgs {
  [self acquireNonExclusiveLock];
  @try {
    if (self->showSql_) {
      NSString *argsAsList = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(sqlArgs))) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(ComYahooSquidbDataSquidDatabase_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(@",")];
      ComYahooSquidbUtilityLogger_dWithNSString_withNSString_(ComYahooSquidbUtilityLogger_LOG_TAG, JreStrcat("$$$$C", @"SQL: ", sql, @" [", argsAsList, ']'));
    }
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) rawQueryWithNSString:sql withNSObjectArray:sqlArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (NSString *)simpleQueryForStringWithNSString:(NSString *)sql
                             withNSObjectArray:(IOSObjectArray *)sqlArgs {
  [self acquireNonExclusiveLock];
  @try {
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) simpleQueryForStringWithNSString:sql withNSObjectArray:sqlArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (jlong)simpleQueryForLongWithNSString:(NSString *)sql
                      withNSObjectArray:(IOSObjectArray *)sqlArgs {
  [self acquireNonExclusiveLock];
  @try {
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) simpleQueryForLongWithNSString:sql withNSObjectArray:sqlArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (NSString *)simpleQueryForStringWithComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlQuery *) nil_chk(query)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  return [self simpleQueryForStringWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
}

- (jlong)simpleQueryForLongWithComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlQuery *) nil_chk(query)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  return [self simpleQueryForLongWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
}

- (jlong)insertInternalWithComYahooSquidbSqlInsert:(ComYahooSquidbSqlInsert *)insert {
  return ComYahooSquidbDataSquidDatabase_insertInternalWithComYahooSquidbSqlInsert_(self, insert);
}

- (jint)deleteInternalWithComYahooSquidbSqlDelete:(ComYahooSquidbSqlDelete *)delete_ {
  return ComYahooSquidbDataSquidDatabase_deleteInternalWithComYahooSquidbSqlDelete_(self, delete_);
}

- (jint)updateInternalWithComYahooSquidbSqlUpdate:(ComYahooSquidbSqlUpdate *)update {
  return ComYahooSquidbDataSquidDatabase_updateInternalWithComYahooSquidbSqlUpdate_(self, update);
}

- (void)beginTransaction {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) beginTransaction];
    ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)beginTransactionNonExclusive {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) beginTransactionNonExclusive];
    ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)beginTransactionWithListenerWithComYahooSquidbDataSquidTransactionListener:(id<ComYahooSquidbDataSquidTransactionListener>)listener {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) beginTransactionWithListenerWithComYahooSquidbDataSquidTransactionListener:listener];
    ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)beginTransactionWithListenerNonExclusiveWithComYahooSquidbDataSquidTransactionListener:(id<ComYahooSquidbDataSquidTransactionListener>)listener {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) beginTransactionWithListenerNonExclusiveWithComYahooSquidbDataSquidTransactionListener:listener];
    ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)setTransactionSuccessful {
  [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) setTransactionSuccessful];
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_setTransactionSuccessful(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
}

- (jboolean)inTransaction {
  return ComYahooSquidbDataSquidDatabase_inTransaction(self);
}

- (void)endTransaction {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState *successState = [((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) endTransaction];
  }
  @catch (JavaLangRuntimeException *e) {
    ComYahooSquidbDataSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(nil_chk(successState));
    @throw e;
  }
  @finally {
    [self releaseNonExclusiveLock];
    ComYahooSquidbDataSquidDatabase_TransactionSuccessState_endTransaction(nil_chk(successState));
    if (!ComYahooSquidbDataSquidDatabase_TransactionSuccessState_inTransaction(successState)) {
      ComYahooSquidbDataSquidDatabase_flushAccumulatedNotificationsWithBoolean_(self, successState->outerTransactionSuccess_);
      ComYahooSquidbDataSquidDatabase_TransactionSuccessState_reset(successState);
    }
  }
}

- (jboolean)yieldIfContendedSafely {
  return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) yieldIfContendedSafely];
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) yieldIfContendedSafelyWithLong:sleepAfterYieldDelay];
}

- (void)acquireExclusiveLock {
  if ([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) getReadHoldCount] > 0 && [readWriteLock_ getWriteHoldCount] == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Can't acquire an exclusive lock when the calling thread is in a transaction or otherwise holds a non-exclusive lock and not the exclusive lock");
  }
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([readWriteLock_ writeLock])) lock];
}

- (void)releaseExclusiveLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) writeLock])) unlock];
}

- (void)acquireNonExclusiveLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) readLock])) lock];
}

- (void)releaseNonExclusiveLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) readLock])) unlock];
}

- (void)setDatabaseWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(self, db);
}

- (ComYahooSquidbUtilityVersionCode *)readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
  return ComYahooSquidbDataSquidDatabase_readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase_(self, db);
}

- (jboolean)tryAddColumnWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property {
  if (!ComYahooSquidbDataSquidDatabase_propertyBelongsToTableWithComYahooSquidbSqlProperty_(self, property)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't alter table: property does not belong to a Table");
  }
  ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *visitor = new_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init();
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@"ALTER TABLE "])) appendWithNSString:((ComYahooSquidbSqlTableModelName *) nil_chk(((ComYahooSquidbSqlProperty *) nil_chk(property))->tableModelName_))->tableName_])) appendWithNSString:@" ADD "];
  (void) [property acceptWithComYahooSquidbSqlProperty_PropertyVisitor:visitor withId:sql];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)propertyBelongsToTableWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property {
  return ComYahooSquidbDataSquidDatabase_propertyBelongsToTableWithComYahooSquidbSqlProperty_(self, property);
}

- (jboolean)tryCreateTableWithComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table {
  ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *sqlVisitor = new_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init();
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  [((ComYahooSquidbSqlTable *) nil_chk(table)) appendCreateTableSqlWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self) withJavaLangStringBuilder:sql withComYahooSquidbSqlProperty_PropertyVisitor:sqlVisitor];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)tryDropTableWithComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table {
  return [self tryExecSqlWithNSString:JreStrcat("$$", @"DROP TABLE IF EXISTS ", [((ComYahooSquidbSqlTable *) nil_chk(table)) getExpression])];
}

- (jboolean)tryCreateViewWithComYahooSquidbSqlView:(ComYahooSquidbSqlView *)view {
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  [((ComYahooSquidbSqlView *) nil_chk(view)) createViewSqlWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self) withJavaLangStringBuilder:sql];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)tryDropViewWithComYahooSquidbSqlView:(ComYahooSquidbSqlView *)view {
  return [self tryExecSqlWithNSString:JreStrcat("$$", @"DROP VIEW IF EXISTS ", [((ComYahooSquidbSqlView *) nil_chk(view)) getExpression])];
}

- (jboolean)tryCreateIndexWithComYahooSquidbSqlIndex:(ComYahooSquidbSqlIndex *)index {
  return [self tryCreateIndexWithNSString:[((ComYahooSquidbSqlIndex *) nil_chk(index)) getName] withComYahooSquidbSqlTable:[index getTable] withBoolean:[index isUnique] withComYahooSquidbSqlPropertyArray:[index getProperties]];
}

- (jboolean)tryCreateIndexWithNSString:(NSString *)indexName
            withComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table
                           withBoolean:(jboolean)unique
    withComYahooSquidbSqlPropertyArray:(IOSObjectArray *)properties {
  if (properties == nil || properties->size_ == 0) {
    [self onErrorWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot create index %s: no properties specified", [IOSObjectArray newArrayWithObjects:(id[]){ indexName } count:1 type:NSObject_class_()]) withJavaLangThrowable:nil];
    return false;
  }
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  (void) [sql appendWithNSString:@"CREATE "];
  if (unique) {
    (void) [sql appendWithNSString:@"UNIQUE "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@"INDEX IF NOT EXISTS "])) appendWithNSString:indexName])) appendWithNSString:@" ON "])) appendWithNSString:[((ComYahooSquidbSqlTable *) nil_chk(table)) getExpression]])) appendWithNSString:@"("];
  {
    IOSObjectArray *a__ = properties;
    ComYahooSquidbSqlProperty * const *b__ = a__->buffer_;
    ComYahooSquidbSqlProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComYahooSquidbSqlProperty *p = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:[((ComYahooSquidbSqlProperty *) nil_chk(p)) getName]])) appendWithNSString:@","];
    }
  }
  (void) [sql deleteCharAtWithInt:[sql java_length] - 1];
  (void) [sql appendWithNSString:@")"];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)tryDropIndexWithComYahooSquidbSqlIndex:(ComYahooSquidbSqlIndex *)index {
  return [self tryDropIndexWithNSString:[((ComYahooSquidbSqlIndex *) nil_chk(index)) getName]];
}

- (jboolean)tryDropIndexWithNSString:(NSString *)indexName {
  return [self tryExecSqlWithNSString:JreStrcat("$$", @"DROP INDEX IF EXISTS ", indexName)];
}

- (jboolean)tryExecStatementWithComYahooSquidbSqlSqlStatement:(id<ComYahooSquidbSqlSqlStatement>)statement {
  ComYahooSquidbSqlCompiledStatement *compiled = [((id<ComYahooSquidbSqlSqlStatement>) nil_chk(statement)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  return [self tryExecSqlWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
}

- (jboolean)tryExecSqlWithNSString:(NSString *)sql {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) execSQLWithNSString:sql];
    return true;
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:JreStrcat("$$", @"Failed to execute statement: ", sql) withJavaLangThrowable:e];
    return false;
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (void)execSqlOrThrowWithNSString:(NSString *)sql {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) execSQLWithNSString:sql];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (jboolean)tryExecSqlWithNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) execSQLWithNSString:sql withNSObjectArray:bindArgs];
    return true;
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:JreStrcat("$$", @"Failed to execute statement: ", sql) withJavaLangThrowable:e];
    return false;
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (void)execSqlOrThrowWithNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) execSQLWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (ComYahooSquidbUtilityVersionCode *)getSqliteVersion {
  ComYahooSquidbUtilityVersionCode *toReturn = sqliteVersion_;
  if (toReturn == nil) {
    [self acquireNonExclusiveLock];
    @try {
      @synchronized(databaseInstanceLock_) {
        (void) ComYahooSquidbDataSquidDatabase_getDatabase(self);
        return sqliteVersion_;
      }
    }
    @finally {
      [self releaseNonExclusiveLock];
    }
  }
  return toReturn;
}

- (ComYahooSquidbSqlCompileContext *)getCompileContext {
  return ComYahooSquidbDataSquidDatabase_getCompileContext(self);
}

- (void)buildCompileContextWithComYahooSquidbSqlCompileContext_Builder:(ComYahooSquidbSqlCompileContext_Builder *)builder {
}

- (id<ComYahooSquidbDataISQLitePreparedStatement>)prepareStatementWithNSString:(NSString *)sql {
  [self acquireNonExclusiveLock];
  @try {
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) prepareStatementWithNSString:sql];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (ComYahooSquidbDataSquidCursor *)queryWithIOSClass:(IOSClass *)modelClass
                          withComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  query = ComYahooSquidbDataSquidDatabase_inferTableForQueryWithIOSClass_withComYahooSquidbSqlQuery_(self, modelClass, query);
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlQuery *) nil_chk(query)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  if (((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->needsValidation_) {
    NSString *validateSql = [query sqlForValidationWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
    ComYahooSquidbDataSquidDatabase_ensureSqlCompilesWithNSString_(self, validateSql);
  }
  id<ComYahooSquidbDataICursor> cursor = [self rawQueryWithNSString:compiled->sql_ withNSObjectArray:compiled->sqlArgs_];
  return new_ComYahooSquidbDataSquidCursor_initWithComYahooSquidbDataICursor_withIOSClass_withJavaUtilList_(cursor, modelClass, [query getFields]);
}

- (ComYahooSquidbSqlQuery *)inferTableForQueryWithIOSClass:(IOSClass *)modelClass
                                withComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  return ComYahooSquidbDataSquidDatabase_inferTableForQueryWithIOSClass_withComYahooSquidbSqlQuery_(self, modelClass, query);
}

- (void)ensureSqlCompilesWithNSString:(NSString *)sql {
  ComYahooSquidbDataSquidDatabase_ensureSqlCompilesWithNSString_(self, sql);
}

- (ComYahooSquidbDataTableModel *)fetchWithIOSClass:(IOSClass *)modelClass
                                           withLong:(jlong)id_
                 withComYahooSquidbSqlPropertyArray:(IOSObjectArray *)properties {
  ComYahooSquidbDataSquidCursor *cursor = [self fetchItemByIdWithIOSClass:modelClass withLong:id_ withComYahooSquidbSqlPropertyArray:properties];
  return ((ComYahooSquidbDataTableModel *) [self returnFetchResultWithIOSClass:modelClass withComYahooSquidbDataSquidCursor:cursor]);
}

- (ComYahooSquidbDataAbstractModel *)fetchByCriterionWithIOSClass:(IOSClass *)modelClass
                                   withComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)criterion
                               withComYahooSquidbSqlPropertyArray:(IOSObjectArray *)properties {
  ComYahooSquidbDataSquidCursor *cursor = [self fetchFirstItemWithIOSClass:modelClass withComYahooSquidbSqlCriterion:criterion withComYahooSquidbSqlPropertyArray:properties];
  return [self returnFetchResultWithIOSClass:modelClass withComYahooSquidbDataSquidCursor:cursor];
}

- (ComYahooSquidbDataAbstractModel *)fetchByQueryWithIOSClass:(IOSClass *)modelClass
                                   withComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  ComYahooSquidbDataSquidCursor *cursor = [self fetchFirstItemWithIOSClass:modelClass withComYahooSquidbSqlQuery:query];
  return [self returnFetchResultWithIOSClass:modelClass withComYahooSquidbDataSquidCursor:cursor];
}

- (ComYahooSquidbDataAbstractModel *)returnFetchResultWithIOSClass:(IOSClass *)modelClass
                                 withComYahooSquidbDataSquidCursor:(ComYahooSquidbDataSquidCursor *)cursor {
  @try {
    if ([((ComYahooSquidbDataSquidCursor *) nil_chk(cursor)) getCount] == 0) {
      return nil;
    }
    ComYahooSquidbDataAbstractModel *toReturn = [((IOSClass *) nil_chk(modelClass)) newInstance];
    [((ComYahooSquidbDataAbstractModel *) nil_chk(toReturn)) readPropertiesFromCursorWithComYahooSquidbDataSquidCursor:cursor];
    return toReturn;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @finally {
    [cursor close];
  }
}

- (jboolean)delete__WithIOSClass:(IOSClass *)modelClass
                        withLong:(jlong)id_ {
  ComYahooSquidbSqlTable *table = ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
  jint rowsUpdated = ComYahooSquidbDataSquidDatabase_deleteInternalWithComYahooSquidbSqlDelete_(self, [((ComYahooSquidbSqlDelete *) nil_chk(ComYahooSquidbSqlDelete_fromWithComYahooSquidbSqlTable_(table))) whereWithComYahooSquidbSqlCriterion:[((ComYahooSquidbSqlProperty_LongProperty *) nil_chk([((ComYahooSquidbSqlTable *) nil_chk(table)) getRowIdProperty])) eqWithId:JavaLangLong_valueOfWithLong_(id_)]]);
  if (rowsUpdated > 0) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, DELETE), nil, table, id_);
  }
  return rowsUpdated > 0;
}

- (jint)deleteWhereWithIOSClass:(IOSClass *)modelClass
 withComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)where {
  ComYahooSquidbSqlTable *table = ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
  ComYahooSquidbSqlDelete *delete_ = ComYahooSquidbSqlDelete_fromWithComYahooSquidbSqlTable_(table);
  if (where != nil) {
    (void) [((ComYahooSquidbSqlDelete *) nil_chk(delete_)) whereWithComYahooSquidbSqlCriterion:where];
  }
  jint rowsUpdated = ComYahooSquidbDataSquidDatabase_deleteInternalWithComYahooSquidbSqlDelete_(self, delete_);
  if (rowsUpdated > 0) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, DELETE), nil, table, ComYahooSquidbDataTableModel_NO_ID);
  }
  return rowsUpdated;
}

- (jint)deleteAllWithIOSClass:(IOSClass *)modelClass {
  return [self deleteWhereWithIOSClass:modelClass withComYahooSquidbSqlCriterion:nil];
}

- (jint)delete__WithComYahooSquidbSqlDelete:(ComYahooSquidbSqlDelete *)delete_ {
  jint result = ComYahooSquidbDataSquidDatabase_deleteInternalWithComYahooSquidbSqlDelete_(self, delete_);
  if (result > 0) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, DELETE), nil, [((ComYahooSquidbSqlDelete *) nil_chk(delete_)) getTable], ComYahooSquidbDataTableModel_NO_ID);
  }
  return result;
}

- (jint)updateWithComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)where
            withComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)template_ {
  return [self updateWithOnConflictWithComYahooSquidbSqlCriterion:where withComYahooSquidbDataTableModel:template_ withComYahooSquidbSqlTableStatement_ConflictAlgorithm:nil];
}

- (jint)updateAllWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)template_ {
  return [self updateWithComYahooSquidbSqlCriterion:nil withComYahooSquidbDataTableModel:template_];
}

- (jint)updateWithOnConflictWithComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)where
                          withComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)template_
     withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  IOSClass *modelClass = [((ComYahooSquidbDataTableModel *) nil_chk(template_)) java_getClass];
  ComYahooSquidbSqlTable *table = ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
  ComYahooSquidbSqlUpdate *update = [((ComYahooSquidbSqlUpdate *) nil_chk(ComYahooSquidbSqlUpdate_tableWithComYahooSquidbSqlTable_(table))) fromTemplateWithComYahooSquidbDataAbstractModel:template_];
  if (where != nil) {
    (void) [((ComYahooSquidbSqlUpdate *) nil_chk(update)) whereWithComYahooSquidbSqlCriterion:where];
  }
  if (conflictAlgorithm != nil) {
    (void) [((ComYahooSquidbSqlUpdate *) nil_chk(update)) onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:conflictAlgorithm];
  }
  jint rowsUpdated = ComYahooSquidbDataSquidDatabase_updateInternalWithComYahooSquidbSqlUpdate_(self, update);
  if (rowsUpdated > 0) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, UPDATE), template_, table, ComYahooSquidbDataTableModel_NO_ID);
  }
  return rowsUpdated;
}

- (jint)updateAllWithOnConflictWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)template_
          withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return [self updateWithOnConflictWithComYahooSquidbSqlCriterion:nil withComYahooSquidbDataTableModel:template_ withComYahooSquidbSqlTableStatement_ConflictAlgorithm:conflictAlgorithm];
}

- (jint)updateWithComYahooSquidbSqlUpdate:(ComYahooSquidbSqlUpdate *)update {
  jint result = ComYahooSquidbDataSquidDatabase_updateInternalWithComYahooSquidbSqlUpdate_(self, update);
  if (result > 0) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, UPDATE), nil, [((ComYahooSquidbSqlUpdate *) nil_chk(update)) getTable], ComYahooSquidbDataTableModel_NO_ID);
  }
  return result;
}

- (jboolean)persistWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item {
  return [self persistWithOnConflictWithComYahooSquidbDataTableModel:item withComYahooSquidbSqlTableStatement_ConflictAlgorithm:nil];
}

- (jboolean)persistWithOnConflictWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item
            withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  if (![((ComYahooSquidbDataTableModel *) nil_chk(item)) isSaved]) {
    return ComYahooSquidbDataSquidDatabase_insertRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
  }
  if (![item isModified]) {
    return true;
  }
  return ComYahooSquidbDataSquidDatabase_updateRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
}

- (jboolean)createNewWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item {
  (void) [((ComYahooSquidbDataTableModel *) nil_chk(item)) setRowIdWithLong:ComYahooSquidbDataTableModel_NO_ID];
  return ComYahooSquidbDataSquidDatabase_insertRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)saveExistingWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item {
  return ComYahooSquidbDataSquidDatabase_updateRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)insertRowWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item {
  return ComYahooSquidbDataSquidDatabase_insertRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)insertRowWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item
withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return ComYahooSquidbDataSquidDatabase_insertRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
}

- (jlong)insertRowLegacyWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item
                              withComYahooSquidbSqlTable:(ComYahooSquidbSqlTable *)table
   withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return ComYahooSquidbDataSquidDatabase_insertRowLegacyWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTable_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, table, conflictAlgorithm);
}

- (jboolean)updateRowWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item {
  return ComYahooSquidbDataSquidDatabase_updateRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)updateRowWithComYahooSquidbDataTableModel:(ComYahooSquidbDataTableModel *)item
withComYahooSquidbSqlTableStatement_ConflictAlgorithm:(ComYahooSquidbSqlTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return ComYahooSquidbDataSquidDatabase_updateRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
}

- (jlong)insertWithComYahooSquidbSqlInsert:(ComYahooSquidbSqlInsert *)insert {
  jlong result = ComYahooSquidbDataSquidDatabase_insertInternalWithComYahooSquidbSqlInsert_(self, insert);
  if (result > ComYahooSquidbDataTableModel_NO_ID) {
    jint numInserted = [((ComYahooSquidbSqlInsert *) nil_chk(insert)) getNumRows];
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, INSERT), nil, [insert getTable], numInserted == 1 ? result : ComYahooSquidbDataTableModel_NO_ID);
  }
  return result;
}

- (ComYahooSquidbDataSquidCursor *)fetchItemByIdWithIOSClass:(IOSClass *)modelClass
                                                    withLong:(jlong)id_
                          withComYahooSquidbSqlPropertyArray:(IOSObjectArray *)properties {
  ComYahooSquidbSqlTable *table = ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
  return [self fetchFirstItemWithIOSClass:modelClass withComYahooSquidbSqlCriterion:[((ComYahooSquidbSqlProperty_LongProperty *) nil_chk([((ComYahooSquidbSqlTable *) nil_chk(table)) getRowIdProperty])) eqWithId:JavaLangLong_valueOfWithLong_(id_)] withComYahooSquidbSqlPropertyArray:properties];
}

- (ComYahooSquidbDataSquidCursor *)fetchFirstItemWithIOSClass:(IOSClass *)modelClass
                               withComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)criterion
                           withComYahooSquidbSqlPropertyArray:(IOSObjectArray *)properties {
  return [self fetchFirstItemWithIOSClass:modelClass withComYahooSquidbSqlQuery:[((ComYahooSquidbSqlQuery *) nil_chk(ComYahooSquidbSqlQuery_selectWithComYahooSquidbSqlFieldArray_(properties))) whereWithComYahooSquidbSqlCriterion:criterion]];
}

- (ComYahooSquidbDataSquidCursor *)fetchFirstItemWithIOSClass:(IOSClass *)modelClass
                                   withComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  jboolean immutableQuery = [((ComYahooSquidbSqlQuery *) nil_chk(query)) isImmutable];
  ComYahooSquidbSqlField *beforeLimit = [query getLimit];
  ComYahooSquidbSqlSqlTable *beforeTable = [query getTable];
  query = [query limitWithInt:1];
  ComYahooSquidbDataSquidCursor *cursor = [self queryWithIOSClass:modelClass withComYahooSquidbSqlQuery:query];
  if (!immutableQuery) {
    (void) [((ComYahooSquidbSqlQuery *) nil_chk([((ComYahooSquidbSqlQuery *) nil_chk(query)) fromWithComYahooSquidbSqlSqlTable:beforeTable])) limitWithComYahooSquidbSqlField:beforeLimit];
  }
  [((ComYahooSquidbDataSquidCursor *) nil_chk(cursor)) moveToFirst];
  return cursor;
}

- (jint)countWithIOSClass:(IOSClass *)modelClass
withComYahooSquidbSqlCriterion:(ComYahooSquidbSqlCriterion *)criterion {
  ComYahooSquidbSqlProperty_IntegerProperty *countProperty = ComYahooSquidbSqlProperty_IntegerProperty_countProperty();
  ComYahooSquidbSqlQuery *query = ComYahooSquidbSqlQuery_selectWithComYahooSquidbSqlFieldArray_([IOSObjectArray newArrayWithObjects:(id[]){ countProperty } count:1 type:ComYahooSquidbSqlField_class_()]);
  if (criterion != nil) {
    (void) [((ComYahooSquidbSqlQuery *) nil_chk(query)) whereWithComYahooSquidbSqlCriterion:criterion];
  }
  query = ComYahooSquidbDataSquidDatabase_inferTableForQueryWithIOSClass_withComYahooSquidbSqlQuery_(self, modelClass, query);
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlQuery *) nil_chk(query)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    return (jint) [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) simpleQueryForLongWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (jint)countAllWithIOSClass:(IOSClass *)modelClass {
  return [self countWithIOSClass:modelClass withComYahooSquidbSqlCriterion:nil];
}

- (void)registerDataChangedNotifierWithComYahooSquidbDataDataChangedNotifier:(ComYahooSquidbDataDataChangedNotifier *)notifier {
  if (notifier == nil) {
    return;
  }
  @synchronized(notifiersLock_) {
    id<JavaUtilCollection> tables = [notifier whichTables];
    if (tables == nil || [tables isEmpty]) {
      [((id<JavaUtilList>) nil_chk(globalNotifiers_)) addWithId:notifier];
    }
    else {
      for (ComYahooSquidbSqlSqlTable * __strong table in tables) {
        id<JavaUtilList> notifiersForTable = [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) getWithId:table];
        if (notifiersForTable == nil) {
          notifiersForTable = new_JavaUtilArrayList_init();
          (void) [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) putWithId:table withId:notifiersForTable];
        }
        [notifiersForTable addWithId:notifier];
      }
    }
  }
}

- (void)unregisterDataChangedNotifierWithComYahooSquidbDataDataChangedNotifier:(ComYahooSquidbDataDataChangedNotifier *)notifier {
  if (notifier == nil) {
    return;
  }
  @synchronized(notifiersLock_) {
    id<JavaUtilCollection> tables = [notifier whichTables];
    if (tables == nil || [tables isEmpty]) {
      [((id<JavaUtilList>) nil_chk(globalNotifiers_)) removeWithId:notifier];
    }
    else {
      for (ComYahooSquidbSqlSqlTable * __strong table in tables) {
        id<JavaUtilList> notifiersForTable = [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) getWithId:table];
        if (notifiersForTable != nil) {
          [notifiersForTable removeWithId:notifier];
        }
      }
    }
  }
}

- (void)unregisterAllDataChangedNotifiers {
  @synchronized(notifiersLock_) {
    [((id<JavaUtilList>) nil_chk(globalNotifiers_)) clear];
    [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) clear];
  }
}

- (void)setDataChangedNotificationsEnabledWithBoolean:(jboolean)enabled {
  dataChangedNotificationsEnabled_ = enabled;
}

- (jboolean)areDataChangedNotificationsEnabled {
  return dataChangedNotificationsEnabled_;
}

- (void)notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation:(ComYahooSquidbDataDataChangedNotifier_DBOperation *)op
                                        withComYahooSquidbDataAbstractModel:(ComYahooSquidbDataAbstractModel *)modelValues
                                              withComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table
                                                                   withLong:(jlong)rowId {
  ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, op, modelValues, table, rowId);
}

- (void)onDataChangedWithJavaUtilList:(id<JavaUtilList>)notifiers
withComYahooSquidbDataDataChangedNotifier_DBOperation:(ComYahooSquidbDataDataChangedNotifier_DBOperation *)op
  withComYahooSquidbDataAbstractModel:(ComYahooSquidbDataAbstractModel *)modelValues
        withComYahooSquidbSqlSqlTable:(ComYahooSquidbSqlSqlTable *)table
                             withLong:(jlong)rowId {
  ComYahooSquidbDataSquidDatabase_onDataChangedWithJavaUtilList_withComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, notifiers, op, modelValues, table, rowId);
}

- (void)flushAccumulatedNotificationsWithBoolean:(jboolean)transactionSuccess {
  ComYahooSquidbDataSquidDatabase_flushAccumulatedNotificationsWithBoolean_(self, transactionSuccess);
}

- (void)explainQueryPlanWithIOSClass:(IOSClass *)modelClass
          withComYahooSquidbSqlQuery:(ComYahooSquidbSqlQuery *)query {
  query = ComYahooSquidbDataSquidDatabase_inferTableForQueryWithIOSClass_withComYahooSquidbSqlQuery_(self, modelClass, query);
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlQuery *) nil_chk(query)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  id<ComYahooSquidbDataICursor> cursor = [self rawQueryWithNSString:JreStrcat("$$", @"EXPLAIN QUERY PLAN ", ((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_) withNSObjectArray:compiled->sqlArgs_];
  @try {
    ComYahooSquidbUtilityLogger_dWithNSString_withNSString_(ComYahooSquidbUtilityLogger_LOG_TAG, JreStrcat("$$", @"Query plan for: ", compiled->sql_));
    ComYahooSquidbUtilitySquidUtilities_dumpCursorWithComYahooSquidbDataICursor_withInt_(cursor, -1);
  }
  @finally {
    [((id<ComYahooSquidbDataICursor>) nil_chk(cursor)) close];
  }
}

- (jboolean)copyDatabaseWithJavaIoFile:(JavaIoFile *)toDir {
  [self acquireExclusiveLock];
  @try {
    return ComYahooSquidbDataSquidDatabase_copyDatabaseLockedWithJavaIoFile_(self, toDir);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (jboolean)copyDatabaseLockedWithJavaIoFile:(JavaIoFile *)toDir {
  return ComYahooSquidbDataSquidDatabase_copyDatabaseLockedWithJavaIoFile_(self, toDir);
}

- (jboolean)copyFileIfExistsWithJavaIoFile:(JavaIoFile *)inArg
                            withJavaIoFile:(JavaIoFile *)toDir {
  return ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, inArg, toDir);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LComYahooSquidbSqlTable;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LComYahooSquidbSqlView;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LComYahooSquidbSqlIndex;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, "LComYahooSquidbDataISQLiteOpenHelper;", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataISQLiteOpenHelper;", 0x404, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlSqlTable;", 0x14, 21, 22, -1, 23, -1, -1 },
    { NULL, "LComYahooSquidbSqlTable;", 0x14, 24, 22, -1, 25, -1, -1 },
    { NULL, "LComYahooSquidbDataISQLiteDatabase;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThreadLocal;", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSString;", 0x11, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 32, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 33, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataICursor;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 39, 38, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 40, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 39, 41, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 3, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbUtilityVersionCode;", 0x2, 54, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 55, 56, -1, 57, -1, -1 },
    { NULL, "Z", 0x2, 58, 56, -1, 57, -1, -1 },
    { NULL, "Z", 0x4, 59, 60, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 61, 60, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 62, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 64, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 65, 66, -1, -1, -1, -1 },
    { NULL, "Z", 0x84, 65, 67, -1, 68, -1, -1 },
    { NULL, "Z", 0x4, 69, 66, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 69, 70, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 71, 72, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 73, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 70, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 73, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 38, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbUtilityVersionCode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbSqlCompileContext;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 75, 76, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataISQLitePreparedStatement;", 0x1, 77, 70, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataSquidCursor;", 0x1, 78, 79, -1, 80, -1, -1 },
    { NULL, "LComYahooSquidbSqlQuery;", 0x2, 81, 79, -1, 82, -1, -1 },
    { NULL, "V", 0x2, 83, 70, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataTableModel;", 0x81, 84, 85, -1, 86, -1, -1 },
    { NULL, "LComYahooSquidbDataAbstractModel;", 0x81, 87, 88, -1, 89, -1, -1 },
    { NULL, "LComYahooSquidbDataAbstractModel;", 0x1, 90, 79, -1, 91, -1, -1 },
    { NULL, "LComYahooSquidbDataAbstractModel;", 0x4, 92, 93, -1, 94, -1, -1 },
    { NULL, "Z", 0x1, 95, 96, -1, 97, -1, -1 },
    { NULL, "I", 0x1, 98, 99, -1, 100, -1, -1 },
    { NULL, "I", 0x1, 101, 22, -1, 102, -1, -1 },
    { NULL, "I", 0x1, 95, 45, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 103, 104, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 105, 106, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 107, 108, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 109, 110, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 103, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 111, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 112, 110, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 113, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 114, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 115, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 115, 110, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 116, 117, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 118, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 118, 110, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 119, 43, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataSquidCursor;", 0x84, 120, 85, -1, 121, -1, -1 },
    { NULL, "LComYahooSquidbDataSquidCursor;", 0x84, 122, 88, -1, 123, -1, -1 },
    { NULL, "LComYahooSquidbDataSquidCursor;", 0x4, 122, 79, -1, 80, -1, -1 },
    { NULL, "I", 0x1, 124, 99, -1, 125, -1, -1 },
    { NULL, "I", 0x1, 126, 22, -1, 127, -1, -1 },
    { NULL, "V", 0x1, 128, 129, -1, 130, -1, -1 },
    { NULL, "V", 0x1, 131, 129, -1, 130, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 133, 134, -1, 135, -1, -1 },
    { NULL, "V", 0x2, 136, 137, -1, 138, -1, -1 },
    { NULL, "V", 0x2, 139, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 140, 79, -1, 141, -1, -1 },
    { NULL, "Z", 0x1, 142, 143, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 144, 143, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 145, 146, 147, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setShowSqlWithBoolean:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getVersion);
  methods[3].selector = @selector(getTables);
  methods[4].selector = @selector(getViews);
  methods[5].selector = @selector(getIndexes);
  methods[6].selector = @selector(onTablesCreatedWithComYahooSquidbDataISQLiteDatabase:);
  methods[7].selector = @selector(onUpgradeWithComYahooSquidbDataISQLiteDatabase:withInt:withInt:);
  methods[8].selector = @selector(onDowngradeWithComYahooSquidbDataISQLiteDatabase:withInt:withInt:);
  methods[9].selector = @selector(onMigrationFailedWithComYahooSquidbDataSquidDatabase_MigrationFailedException:);
  methods[10].selector = @selector(onDatabaseOpenFailedWithJavaLangRuntimeException:withInt:);
  methods[11].selector = @selector(onConfigureWithComYahooSquidbDataISQLiteDatabase:);
  methods[12].selector = @selector(onOpenWithComYahooSquidbDataISQLiteDatabase:);
  methods[13].selector = @selector(onCloseWithComYahooSquidbDataISQLiteDatabase:);
  methods[14].selector = @selector(onErrorWithNSString:withJavaLangThrowable:);
  methods[15].selector = @selector(init);
  methods[16].selector = @selector(registerTableModelsWithComYahooSquidbSqlSqlTableArray:);
  methods[17].selector = @selector(getOpenHelper);
  methods[18].selector = @selector(createOpenHelperWithNSString:withComYahooSquidbDataSquidDatabase_OpenHelperDelegate:withInt:);
  methods[19].selector = @selector(getDatabasePath);
  methods[20].selector = @selector(getSqlTableWithIOSClass:);
  methods[21].selector = @selector(getTableWithIOSClass:);
  methods[22].selector = @selector(getDatabase);
  methods[23].selector = @selector(openForWritingLocked);
  methods[24].selector = @selector(setPreparedInsertCacheEnabledWithBoolean:);
  methods[25].selector = @selector(newPreparedInsertCacheWithJavaUtilSet:);
  methods[26].selector = @selector(attachDatabaseWithComYahooSquidbDataSquidDatabase:);
  methods[27].selector = @selector(detachDatabaseWithComYahooSquidbDataSquidDatabase:);
  methods[28].selector = @selector(attachToWithComYahooSquidbDataSquidDatabase:);
  methods[29].selector = @selector(detachFromWithComYahooSquidbDataSquidDatabase:);
  methods[30].selector = @selector(getAttachedName);
  methods[31].selector = @selector(isOpen);
  methods[32].selector = @selector(close);
  methods[33].selector = @selector(clear);
  methods[34].selector = @selector(recreate);
  methods[35].selector = @selector(recreateLocked);
  methods[36].selector = @selector(closeLocked);
  methods[37].selector = @selector(closeAndDeleteLocked);
  methods[38].selector = @selector(closeAndDeleteInternalWithBoolean:);
  methods[39].selector = @selector(clearPreparedStatementCache);
  methods[40].selector = @selector(description);
  methods[41].selector = @selector(rawQueryWithNSString:withNSObjectArray:);
  methods[42].selector = @selector(simpleQueryForStringWithNSString:withNSObjectArray:);
  methods[43].selector = @selector(simpleQueryForLongWithNSString:withNSObjectArray:);
  methods[44].selector = @selector(simpleQueryForStringWithComYahooSquidbSqlQuery:);
  methods[45].selector = @selector(simpleQueryForLongWithComYahooSquidbSqlQuery:);
  methods[46].selector = @selector(insertInternalWithComYahooSquidbSqlInsert:);
  methods[47].selector = @selector(deleteInternalWithComYahooSquidbSqlDelete:);
  methods[48].selector = @selector(updateInternalWithComYahooSquidbSqlUpdate:);
  methods[49].selector = @selector(beginTransaction);
  methods[50].selector = @selector(beginTransactionNonExclusive);
  methods[51].selector = @selector(beginTransactionWithListenerWithComYahooSquidbDataSquidTransactionListener:);
  methods[52].selector = @selector(beginTransactionWithListenerNonExclusiveWithComYahooSquidbDataSquidTransactionListener:);
  methods[53].selector = @selector(setTransactionSuccessful);
  methods[54].selector = @selector(inTransaction);
  methods[55].selector = @selector(endTransaction);
  methods[56].selector = @selector(yieldIfContendedSafely);
  methods[57].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[58].selector = @selector(acquireExclusiveLock);
  methods[59].selector = @selector(releaseExclusiveLock);
  methods[60].selector = @selector(acquireNonExclusiveLock);
  methods[61].selector = @selector(releaseNonExclusiveLock);
  methods[62].selector = @selector(setDatabaseWithComYahooSquidbDataISQLiteDatabase:);
  methods[63].selector = @selector(readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase:);
  methods[64].selector = @selector(tryAddColumnWithComYahooSquidbSqlProperty:);
  methods[65].selector = @selector(propertyBelongsToTableWithComYahooSquidbSqlProperty:);
  methods[66].selector = @selector(tryCreateTableWithComYahooSquidbSqlTable:);
  methods[67].selector = @selector(tryDropTableWithComYahooSquidbSqlTable:);
  methods[68].selector = @selector(tryCreateViewWithComYahooSquidbSqlView:);
  methods[69].selector = @selector(tryDropViewWithComYahooSquidbSqlView:);
  methods[70].selector = @selector(tryCreateIndexWithComYahooSquidbSqlIndex:);
  methods[71].selector = @selector(tryCreateIndexWithNSString:withComYahooSquidbSqlTable:withBoolean:withComYahooSquidbSqlPropertyArray:);
  methods[72].selector = @selector(tryDropIndexWithComYahooSquidbSqlIndex:);
  methods[73].selector = @selector(tryDropIndexWithNSString:);
  methods[74].selector = @selector(tryExecStatementWithComYahooSquidbSqlSqlStatement:);
  methods[75].selector = @selector(tryExecSqlWithNSString:);
  methods[76].selector = @selector(execSqlOrThrowWithNSString:);
  methods[77].selector = @selector(tryExecSqlWithNSString:withNSObjectArray:);
  methods[78].selector = @selector(execSqlOrThrowWithNSString:withNSObjectArray:);
  methods[79].selector = @selector(getSqliteVersion);
  methods[80].selector = @selector(getCompileContext);
  methods[81].selector = @selector(buildCompileContextWithComYahooSquidbSqlCompileContext_Builder:);
  methods[82].selector = @selector(prepareStatementWithNSString:);
  methods[83].selector = @selector(queryWithIOSClass:withComYahooSquidbSqlQuery:);
  methods[84].selector = @selector(inferTableForQueryWithIOSClass:withComYahooSquidbSqlQuery:);
  methods[85].selector = @selector(ensureSqlCompilesWithNSString:);
  methods[86].selector = @selector(fetchWithIOSClass:withLong:withComYahooSquidbSqlPropertyArray:);
  methods[87].selector = @selector(fetchByCriterionWithIOSClass:withComYahooSquidbSqlCriterion:withComYahooSquidbSqlPropertyArray:);
  methods[88].selector = @selector(fetchByQueryWithIOSClass:withComYahooSquidbSqlQuery:);
  methods[89].selector = @selector(returnFetchResultWithIOSClass:withComYahooSquidbDataSquidCursor:);
  methods[90].selector = @selector(delete__WithIOSClass:withLong:);
  methods[91].selector = @selector(deleteWhereWithIOSClass:withComYahooSquidbSqlCriterion:);
  methods[92].selector = @selector(deleteAllWithIOSClass:);
  methods[93].selector = @selector(delete__WithComYahooSquidbSqlDelete:);
  methods[94].selector = @selector(updateWithComYahooSquidbSqlCriterion:withComYahooSquidbDataTableModel:);
  methods[95].selector = @selector(updateAllWithComYahooSquidbDataTableModel:);
  methods[96].selector = @selector(updateWithOnConflictWithComYahooSquidbSqlCriterion:withComYahooSquidbDataTableModel:withComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[97].selector = @selector(updateAllWithOnConflictWithComYahooSquidbDataTableModel:withComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[98].selector = @selector(updateWithComYahooSquidbSqlUpdate:);
  methods[99].selector = @selector(persistWithComYahooSquidbDataTableModel:);
  methods[100].selector = @selector(persistWithOnConflictWithComYahooSquidbDataTableModel:withComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[101].selector = @selector(createNewWithComYahooSquidbDataTableModel:);
  methods[102].selector = @selector(saveExistingWithComYahooSquidbDataTableModel:);
  methods[103].selector = @selector(insertRowWithComYahooSquidbDataTableModel:);
  methods[104].selector = @selector(insertRowWithComYahooSquidbDataTableModel:withComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[105].selector = @selector(insertRowLegacyWithComYahooSquidbDataTableModel:withComYahooSquidbSqlTable:withComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[106].selector = @selector(updateRowWithComYahooSquidbDataTableModel:);
  methods[107].selector = @selector(updateRowWithComYahooSquidbDataTableModel:withComYahooSquidbSqlTableStatement_ConflictAlgorithm:);
  methods[108].selector = @selector(insertWithComYahooSquidbSqlInsert:);
  methods[109].selector = @selector(fetchItemByIdWithIOSClass:withLong:withComYahooSquidbSqlPropertyArray:);
  methods[110].selector = @selector(fetchFirstItemWithIOSClass:withComYahooSquidbSqlCriterion:withComYahooSquidbSqlPropertyArray:);
  methods[111].selector = @selector(fetchFirstItemWithIOSClass:withComYahooSquidbSqlQuery:);
  methods[112].selector = @selector(countWithIOSClass:withComYahooSquidbSqlCriterion:);
  methods[113].selector = @selector(countAllWithIOSClass:);
  methods[114].selector = @selector(registerDataChangedNotifierWithComYahooSquidbDataDataChangedNotifier:);
  methods[115].selector = @selector(unregisterDataChangedNotifierWithComYahooSquidbDataDataChangedNotifier:);
  methods[116].selector = @selector(unregisterAllDataChangedNotifiers);
  methods[117].selector = @selector(setDataChangedNotificationsEnabledWithBoolean:);
  methods[118].selector = @selector(areDataChangedNotificationsEnabled);
  methods[119].selector = @selector(notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation:withComYahooSquidbDataAbstractModel:withComYahooSquidbSqlSqlTable:withLong:);
  methods[120].selector = @selector(onDataChangedWithJavaUtilList:withComYahooSquidbDataDataChangedNotifier_DBOperation:withComYahooSquidbDataAbstractModel:withComYahooSquidbSqlSqlTable:withLong:);
  methods[121].selector = @selector(flushAccumulatedNotificationsWithBoolean:);
  methods[122].selector = @selector(explainQueryPlanWithIOSClass:withComYahooSquidbSqlQuery:);
  methods[123].selector = @selector(copyDatabaseWithJavaIoFile:);
  methods[124].selector = @selector(copyDatabaseLockedWithJavaIoFile:);
  methods[125].selector = @selector(copyFileIfExistsWithJavaIoFile:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "showSql_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "STRING_BUILDER_INITIAL_CAPACITY", "I", .constantValue.asInt = ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "trackedPreparedInserts_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 148, -1 },
    { "preparedInsertCache_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 149, -1 },
    { "preparedInsertCacheEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attachedTo_", "LComYahooSquidbDataSquidDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readWriteLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "databaseInstanceLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "helper_", "LComYahooSquidbDataISQLiteOpenHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "database_", "LComYahooSquidbDataISQLiteDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sqliteVersion_", "LComYahooSquidbUtilityVersionCode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tableMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 150, -1 },
    { "isInMigration_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isInMigrationFailedHook_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "databaseOpenFailedRetryCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transactionSuccessState_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 151, -1 },
    { "notifiersLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dataChangedNotificationsEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "globalNotifiers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 152, -1 },
    { "tableNotifiers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 153, -1 },
    { "notifierAccumulator_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 154, -1 },
  };
  static const void *ptrTable[] = { "setShowSql", "Z", "onTablesCreated", "LComYahooSquidbDataISQLiteDatabase;", "onUpgrade", "LComYahooSquidbDataISQLiteDatabase;II", "onDowngrade", "onMigrationFailed", "LComYahooSquidbDataSquidDatabase_MigrationFailedException;", "onDatabaseOpenFailed", "LJavaLangRuntimeException;I", "onConfigure", "onOpen", "onClose", "onError", "LNSString;LJavaLangThrowable;", "registerTableModels", "[LComYahooSquidbSqlSqlTable;", "<T:Lcom/yahoo/squidb/sql/SqlTable<*>;>([TT;)V", "createOpenHelper", "LNSString;LComYahooSquidbDataSquidDatabase_OpenHelperDelegate;I", "getSqlTable", "LIOSClass;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;)Lcom/yahoo/squidb/sql/SqlTable<*>;", "getTable", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;)Lcom/yahoo/squidb/sql/Table;", "setPreparedInsertCacheEnabled", "newPreparedInsertCache", "LJavaUtilSet;", "(Ljava/util/Set<Lcom/yahoo/squidb/data/ISQLitePreparedStatement;>;)Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/PreparedInsertCache;>;", "attachDatabase", "LComYahooSquidbDataSquidDatabase;", "detachDatabase", "attachTo", "detachFrom", "closeAndDeleteInternal", "toString", "rawQuery", "LNSString;[LNSObject;", "simpleQueryForString", "simpleQueryForLong", "LComYahooSquidbSqlQuery;", "insertInternal", "LComYahooSquidbSqlInsert;", "deleteInternal", "LComYahooSquidbSqlDelete;", "updateInternal", "LComYahooSquidbSqlUpdate;", "beginTransactionWithListener", "LComYahooSquidbDataSquidTransactionListener;", "beginTransactionWithListenerNonExclusive", "yieldIfContendedSafely", "J", "setDatabase", "readSqliteVersionLocked", "tryAddColumn", "LComYahooSquidbSqlProperty;", "(Lcom/yahoo/squidb/sql/Property<*>;)Z", "propertyBelongsToTable", "tryCreateTable", "LComYahooSquidbSqlTable;", "tryDropTable", "tryCreateView", "LComYahooSquidbSqlView;", "tryDropView", "tryCreateIndex", "LComYahooSquidbSqlIndex;", "LNSString;LComYahooSquidbSqlTable;Z[LComYahooSquidbSqlProperty;", "(Ljava/lang/String;Lcom/yahoo/squidb/sql/Table;Z[Lcom/yahoo/squidb/sql/Property<*>;)Z", "tryDropIndex", "LNSString;", "tryExecStatement", "LComYahooSquidbSqlSqlStatement;", "tryExecSql", "execSqlOrThrow", "buildCompileContext", "LComYahooSquidbSqlCompileContext_Builder;", "prepareStatement", "query", "LIOSClass;LComYahooSquidbSqlQuery;", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Query;)Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;", "inferTableForQuery", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/Query;)Lcom/yahoo/squidb/sql/Query;", "ensureSqlCompiles", "fetch", "LIOSClass;J[LComYahooSquidbSqlProperty;", "<TYPE:Lcom/yahoo/squidb/data/TableModel;>(Ljava/lang/Class<TTYPE;>;J[Lcom/yahoo/squidb/sql/Property<*>;)TTYPE;", "fetchByCriterion", "LIOSClass;LComYahooSquidbSqlCriterion;[LComYahooSquidbSqlProperty;", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Criterion;[Lcom/yahoo/squidb/sql/Property<*>;)TTYPE;", "fetchByQuery", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Query;)TTYPE;", "returnFetchResult", "LIOSClass;LComYahooSquidbDataSquidCursor;", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;)TTYPE;", "delete", "LIOSClass;J", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;J)Z", "deleteWhere", "LIOSClass;LComYahooSquidbSqlCriterion;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;Lcom/yahoo/squidb/sql/Criterion;)I", "deleteAll", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;)I", "update", "LComYahooSquidbSqlCriterion;LComYahooSquidbDataTableModel;", "updateAll", "LComYahooSquidbDataTableModel;", "updateWithOnConflict", "LComYahooSquidbSqlCriterion;LComYahooSquidbDataTableModel;LComYahooSquidbSqlTableStatement_ConflictAlgorithm;", "updateAllWithOnConflict", "LComYahooSquidbDataTableModel;LComYahooSquidbSqlTableStatement_ConflictAlgorithm;", "persist", "persistWithOnConflict", "createNew", "saveExisting", "insertRow", "insertRowLegacy", "LComYahooSquidbDataTableModel;LComYahooSquidbSqlTable;LComYahooSquidbSqlTableStatement_ConflictAlgorithm;", "updateRow", "insert", "fetchItemById", "<TYPE:Lcom/yahoo/squidb/data/TableModel;>(Ljava/lang/Class<TTYPE;>;J[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;", "fetchFirstItem", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Criterion;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;", "count", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/Criterion;)I", "countAll", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;)I", "registerDataChangedNotifier", "LComYahooSquidbDataDataChangedNotifier;", "(Lcom/yahoo/squidb/data/DataChangedNotifier<*>;)V", "unregisterDataChangedNotifier", "setDataChangedNotificationsEnabled", "notifyForTable", "LComYahooSquidbDataDataChangedNotifier_DBOperation;LComYahooSquidbDataAbstractModel;LComYahooSquidbSqlSqlTable;J", "(Lcom/yahoo/squidb/data/DataChangedNotifier$DBOperation;Lcom/yahoo/squidb/data/AbstractModel;Lcom/yahoo/squidb/sql/SqlTable<*>;J)V", "onDataChanged", "LJavaUtilList;LComYahooSquidbDataDataChangedNotifier_DBOperation;LComYahooSquidbDataAbstractModel;LComYahooSquidbSqlSqlTable;J", "(Ljava/util/List<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;Lcom/yahoo/squidb/data/DataChangedNotifier$DBOperation;Lcom/yahoo/squidb/data/AbstractModel;Lcom/yahoo/squidb/sql/SqlTable<*>;J)V", "flushAccumulatedNotifications", "explainQueryPlan", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/Query;)V", "copyDatabase", "LJavaIoFile;", "copyDatabaseLocked", "copyFileIfExists", "LJavaIoFile;LJavaIoFile;", "LJavaIoIOException;", "Ljava/util/Set<Lcom/yahoo/squidb/data/ISQLitePreparedStatement;>;", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/PreparedInsertCache;>;", "Ljava/util/Map<Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/SqlTable<*>;>;", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/SquidDatabase$TransactionSuccessState;>;", "Ljava/util/List<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;", "Ljava/util/Map<Lcom/yahoo/squidb/sql/SqlTable<*>;Ljava/util/List<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;>;", "Ljava/lang/ThreadLocal<Ljava/util/Set<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;>;", "LComYahooSquidbDataSquidDatabase_TransactionSuccessState;LComYahooSquidbDataSquidDatabase_OpenHelperDelegate;LComYahooSquidbDataSquidDatabase_SqlConstructorVisitor;LComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException;LComYahooSquidbDataSquidDatabase_MigrationFailedException;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase = { "SquidDatabase", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x401, 126, 21, -1, 155, -1, -1, -1 };
  return &_ComYahooSquidbDataSquidDatabase;
}

@end

void ComYahooSquidbDataSquidDatabase_init(ComYahooSquidbDataSquidDatabase *self) {
  NSObject_init(self);
  self->showSql_ = false;
  self->trackedPreparedInserts_ = JavaUtilCollections_newSetFromMapWithJavaUtilMap_(new_JavaUtilConcurrentConcurrentHashMap_init());
  self->preparedInsertCache_ = ComYahooSquidbDataSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(self, self->trackedPreparedInserts_);
  self->preparedInsertCacheEnabled_ = false;
  self->attachedTo_ = nil;
  self->readWriteLock_ = new_JavaUtilConcurrentLocksReentrantReadWriteLock_init();
  self->databaseInstanceLock_ = new_NSObject_init();
  self->helper_ = nil;
  self->database_ = nil;
  self->sqliteVersion_ = nil;
  self->tableMap_ = new_JavaUtilHashMap_init();
  self->isInMigration_ = false;
  self->isInMigrationFailedHook_ = false;
  self->databaseOpenFailedRetryCount_ = 0;
  self->transactionSuccessState_ = new_ComYahooSquidbDataSquidDatabase_2_init();
  self->notifiersLock_ = new_NSObject_init();
  self->dataChangedNotificationsEnabled_ = true;
  self->globalNotifiers_ = new_JavaUtilArrayList_init();
  self->tableNotifiers_ = new_JavaUtilHashMap_init();
  self->notifierAccumulator_ = new_ComYahooSquidbDataSquidDatabase_3_init();
  ComYahooSquidbDataSquidDatabase_registerTableModelsWithComYahooSquidbSqlSqlTableArray_(self, [self getTables]);
  ComYahooSquidbDataSquidDatabase_registerTableModelsWithComYahooSquidbSqlSqlTableArray_(self, [self getViews]);
}

void ComYahooSquidbDataSquidDatabase_registerTableModelsWithComYahooSquidbSqlSqlTableArray_(ComYahooSquidbDataSquidDatabase *self, IOSObjectArray *tables) {
  if (tables != nil) {
    {
      IOSObjectArray *a__ = tables;
      ComYahooSquidbSqlSqlTable * const *b__ = a__->buffer_;
      ComYahooSquidbSqlSqlTable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComYahooSquidbSqlSqlTable *table = *b__++;
        if ([((ComYahooSquidbSqlSqlTable *) nil_chk(table)) getModelClass] != nil && ![((id<JavaUtilMap>) nil_chk(self->tableMap_)) containsKeyWithId:[table getModelClass]]) {
          (void) [((id<JavaUtilMap>) nil_chk(self->tableMap_)) putWithId:[table getModelClass] withId:table];
        }
      }
    }
  }
}

id<ComYahooSquidbDataISQLiteOpenHelper> ComYahooSquidbDataSquidDatabase_getOpenHelper(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self) {
    if (self->helper_ == nil) {
      self->helper_ = [self createOpenHelperWithNSString:[self getName] withComYahooSquidbDataSquidDatabase_OpenHelperDelegate:new_ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(self) withInt:[self getVersion]];
    }
    return self->helper_;
  }
}

ComYahooSquidbSqlSqlTable *ComYahooSquidbDataSquidDatabase_getSqlTableWithIOSClass_(ComYahooSquidbDataSquidDatabase *self, IOSClass *modelClass) {
  IOSClass *type = modelClass;
  ComYahooSquidbSqlSqlTable *table;
  while ((table = [((id<JavaUtilMap>) nil_chk(self->tableMap_)) getWithId:type]) == nil && type != ComYahooSquidbDataAbstractModel_class_() && type != NSObject_class_()) {
    type = [((IOSClass *) nil_chk(type)) getSuperclass];
  }
  if (table != nil) {
    return table;
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Unknown model class ", modelClass));
}

ComYahooSquidbSqlTable *ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(ComYahooSquidbDataSquidDatabase *self, IOSClass *modelClass) {
  return (ComYahooSquidbSqlTable *) cast_chk(ComYahooSquidbDataSquidDatabase_getSqlTableWithIOSClass_(self, modelClass), [ComYahooSquidbSqlTable class]);
}

id<ComYahooSquidbDataISQLiteDatabase> ComYahooSquidbDataSquidDatabase_getDatabase(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    if (self->database_ == nil) {
      ComYahooSquidbDataSquidDatabase_openForWritingLocked(self);
    }
    return self->database_;
  }
}

void ComYahooSquidbDataSquidDatabase_openForWritingLocked(ComYahooSquidbDataSquidDatabase *self) {
  jboolean areDataChangedNotificationsEnabled = [self areDataChangedNotificationsEnabled];
  [self setDataChangedNotificationsEnabledWithBoolean:false];
  @try {
    @try {
      id<ComYahooSquidbDataISQLiteDatabase> db = [((id<ComYahooSquidbDataISQLiteOpenHelper>) nil_chk(ComYahooSquidbDataSquidDatabase_getOpenHelper(self))) openForWriting];
      ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(self, db);
    }
    @catch (ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *recreate) {
      ComYahooSquidbDataSquidDatabase_recreateLocked(self);
    }
    @catch (ComYahooSquidbDataSquidDatabase_MigrationFailedException *fail) {
      [self onErrorWithNSString:[fail getMessage] withJavaLangThrowable:fail];
      self->isInMigrationFailedHook_ = true;
      @try {
        if (!ComYahooSquidbDataSquidDatabase_isOpen(self)) {
          ComYahooSquidbDataSquidDatabase_closeLocked(self);
        }
        [self onMigrationFailedWithComYahooSquidbDataSquidDatabase_MigrationFailedException:fail];
      }
      @finally {
        self->isInMigrationFailedHook_ = false;
      }
    }
    if (!ComYahooSquidbDataSquidDatabase_isOpen(self)) {
      ComYahooSquidbDataSquidDatabase_closeLocked(self);
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Failed to open database");
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:JreStrcat("$$", @"Failed to open database: ", [self getName]) withJavaLangThrowable:e];
    ComYahooSquidbDataSquidDatabase_closeLocked(self);
    jint retryCount = ++self->databaseOpenFailedRetryCount_;
    @try {
      [self onDatabaseOpenFailedWithJavaLangRuntimeException:e withInt:retryCount];
      if (!ComYahooSquidbDataSquidDatabase_isOpen(self)) {
        ComYahooSquidbDataSquidDatabase_closeLocked(self);
        @throw e;
      }
    }
    @finally {
      self->databaseOpenFailedRetryCount_ = 0;
    }
  }
  @finally {
    [self setDataChangedNotificationsEnabledWithBoolean:areDataChangedNotificationsEnabled];
  }
}

JavaLangThreadLocal *ComYahooSquidbDataSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(ComYahooSquidbDataSquidDatabase *self, id<JavaUtilSet> openStatementTracking) {
  return new_ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(openStatementTracking);
}

NSString *ComYahooSquidbDataSquidDatabase_attachToWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataSquidDatabase *attachTo) {
  if (self->attachedTo_ != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Database ", [self getName], @" is already attached to ", [((ComYahooSquidbDataSquidDatabase *) nil_chk(self->attachedTo_)) getName]));
  }
  if (ComYahooSquidbDataSquidDatabase_inTransaction(self)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$$$$", @"Cannot attach database ", [self getName], @" to ", [((ComYahooSquidbDataSquidDatabase *) nil_chk(attachTo)) getName], @" -- ", [self getName], @" is in a transaction on the calling thread"));
  }
  [self acquireExclusiveLock];
  NSString *attachedAs = ComYahooSquidbDataSquidDatabase_getAttachedName(self);
  if (![((ComYahooSquidbDataSquidDatabase *) nil_chk(attachTo)) tryExecSqlWithNSString:JreStrcat("$$$$C", @"ATTACH '", [self getDatabasePath], @"' AS '", attachedAs, '\'')]) {
    [self releaseExclusiveLock];
    return nil;
  }
  else {
    self->attachedTo_ = attachTo;
    return attachedAs;
  }
}

jboolean ComYahooSquidbDataSquidDatabase_detachFromWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataSquidDatabase *detachFrom) {
  if ([((ComYahooSquidbDataSquidDatabase *) nil_chk(detachFrom)) tryExecSqlWithNSString:JreStrcat("$$C", @"DETACH '", ComYahooSquidbDataSquidDatabase_getAttachedName(self), '\'')]) {
    self->attachedTo_ = nil;
    [self releaseExclusiveLock];
    return true;
  }
  return false;
}

NSString *ComYahooSquidbDataSquidDatabase_getAttachedName(ComYahooSquidbDataSquidDatabase *self) {
  return [((NSString *) nil_chk([self getName])) java_replace:'.' withChar:'_'];
}

jboolean ComYahooSquidbDataSquidDatabase_isOpen(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    return self->database_ != nil && [self->database_ isOpen];
  }
}

void ComYahooSquidbDataSquidDatabase_recreateLocked(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    ComYahooSquidbDataSquidDatabase_closeAndDeleteLocked(self);
    (void) ComYahooSquidbDataSquidDatabase_getDatabase(self);
  }
}

void ComYahooSquidbDataSquidDatabase_closeLocked(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    ComYahooSquidbDataSquidDatabase_closeAndDeleteInternalWithBoolean_(self, false);
  }
}

void ComYahooSquidbDataSquidDatabase_closeAndDeleteLocked(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    ComYahooSquidbDataSquidDatabase_closeAndDeleteInternalWithBoolean_(self, true);
  }
}

void ComYahooSquidbDataSquidDatabase_closeAndDeleteInternalWithBoolean_(ComYahooSquidbDataSquidDatabase *self, jboolean deleteAfterClose) {
  ComYahooSquidbDataSquidDatabase_clearPreparedStatementCache(self);
  if (ComYahooSquidbDataSquidDatabase_isOpen(self)) {
    [self onCloseWithComYahooSquidbDataISQLiteDatabase:self->database_];
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(self->database_)) close];
  }
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(self, nil);
  if (deleteAfterClose) {
    [((id<ComYahooSquidbDataISQLiteOpenHelper>) nil_chk(ComYahooSquidbDataSquidDatabase_getOpenHelper(self))) deleteDatabase];
  }
  self->helper_ = nil;
}

void ComYahooSquidbDataSquidDatabase_clearPreparedStatementCache(ComYahooSquidbDataSquidDatabase *self) {
  for (id<ComYahooSquidbDataISQLitePreparedStatement> __strong statement in nil_chk(self->trackedPreparedInserts_)) {
    [((id<ComYahooSquidbDataISQLitePreparedStatement>) nil_chk(statement)) close];
  }
  [self->trackedPreparedInserts_ clear];
  self->preparedInsertCache_ = ComYahooSquidbDataSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(self, self->trackedPreparedInserts_);
}

jlong ComYahooSquidbDataSquidDatabase_insertInternalWithComYahooSquidbSqlInsert_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlInsert *insert) {
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlInsert *) nil_chk(insert)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) executeInsertWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jint ComYahooSquidbDataSquidDatabase_deleteInternalWithComYahooSquidbSqlDelete_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlDelete *delete_) {
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlDelete *) nil_chk(delete_)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) executeUpdateDeleteWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jint ComYahooSquidbDataSquidDatabase_updateInternalWithComYahooSquidbSqlUpdate_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlUpdate *update) {
  ComYahooSquidbSqlCompiledStatement *compiled = [((ComYahooSquidbSqlUpdate *) nil_chk(update)) compileWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    return [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) executeUpdateDeleteWithNSString:((ComYahooSquidbSqlCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jboolean ComYahooSquidbDataSquidDatabase_inTransaction(ComYahooSquidbDataSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    return self->database_ != nil && [self->database_ inTransaction];
  }
}

void ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(ComYahooSquidbDataSquidDatabase *self, id<ComYahooSquidbDataISQLiteDatabase> db) {
  @synchronized(self->databaseInstanceLock_) {
    if (self->database_ != nil && db != nil && [db getWrappedObject] == [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(self->database_)) getWrappedObject]) {
      return;
    }
    self->sqliteVersion_ = db != nil ? ComYahooSquidbDataSquidDatabase_readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase_(self, db) : nil;
    self->database_ = db;
  }
}

ComYahooSquidbUtilityVersionCode *ComYahooSquidbDataSquidDatabase_readSqliteVersionLockedWithComYahooSquidbDataISQLiteDatabase_(ComYahooSquidbDataSquidDatabase *self, id<ComYahooSquidbDataISQLiteDatabase> db) {
  @try {
    NSString *versionString = [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(db)) simpleQueryForStringWithNSString:@"select sqlite_version()" withNSObjectArray:nil];
    return ComYahooSquidbUtilityVersionCode_parseWithNSString_(versionString);
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:@"Failed to read sqlite version" withJavaLangThrowable:e];
    @throw e;
  }
}

jboolean ComYahooSquidbDataSquidDatabase_propertyBelongsToTableWithComYahooSquidbSqlProperty_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbSqlProperty *property) {
  return ((ComYahooSquidbSqlTableModelName *) nil_chk(((ComYahooSquidbSqlProperty *) nil_chk(property))->tableModelName_))->modelClass_ != nil && [ComYahooSquidbDataTableModel_class_() isAssignableFrom:property->tableModelName_->modelClass_] && !ComYahooSquidbSqlSqlUtils_isEmptyWithNSString_(property->tableModelName_->tableName_);
}

ComYahooSquidbSqlCompileContext *ComYahooSquidbDataSquidDatabase_getCompileContext(ComYahooSquidbDataSquidDatabase *self) {
  ComYahooSquidbSqlCompileContext_Builder *builder = new_ComYahooSquidbSqlCompileContext_Builder_initWithComYahooSquidbUtilityVersionCode_([self getSqliteVersion]);
  [self buildCompileContextWithComYahooSquidbSqlCompileContext_Builder:builder];
  return [builder build];
}

ComYahooSquidbSqlQuery *ComYahooSquidbDataSquidDatabase_inferTableForQueryWithIOSClass_withComYahooSquidbSqlQuery_(ComYahooSquidbDataSquidDatabase *self, IOSClass *modelClass, ComYahooSquidbSqlQuery *query) {
  if (![((ComYahooSquidbSqlQuery *) nil_chk(query)) hasTable] && modelClass != nil) {
    ComYahooSquidbSqlSqlTable *table = ComYahooSquidbDataSquidDatabase_getSqlTableWithIOSClass_(self, modelClass);
    if (table == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Query has no FROM clause and model class ", [modelClass getSimpleName], @" has no associated table"));
    }
    query = [query fromWithComYahooSquidbSqlSqlTable:table];
  }
  return query;
}

void ComYahooSquidbDataSquidDatabase_ensureSqlCompilesWithNSString_(ComYahooSquidbDataSquidDatabase *self, NSString *sql) {
  [self acquireNonExclusiveLock];
  @try {
    [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(ComYahooSquidbDataSquidDatabase_getDatabase(self))) ensureSqlCompilesWithNSString:sql];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jboolean ComYahooSquidbDataSquidDatabase_insertRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataTableModel *item, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm) {
  IOSClass *modelClass = [((ComYahooSquidbDataTableModel *) nil_chk(item)) java_getClass];
  ComYahooSquidbSqlTable *table = ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
  jlong newRow;
  if (self->preparedInsertCacheEnabled_) {
    [self acquireNonExclusiveLock];
    @try {
      ComYahooSquidbDataPreparedInsertCache *insertCache = [((JavaLangThreadLocal *) nil_chk(self->preparedInsertCache_)) get];
      id<ComYahooSquidbDataISQLitePreparedStatement> preparedStatement = [((ComYahooSquidbDataPreparedInsertCache *) nil_chk(insertCache)) getPreparedInsertWithComYahooSquidbDataSquidDatabase:self withComYahooSquidbSqlTable:table withComYahooSquidbSqlTableStatement_ConflictAlgorithm:conflictAlgorithm];
      [item bindValuesForInsertWithComYahooSquidbSqlTable:table withComYahooSquidbDataISQLitePreparedStatement:preparedStatement];
      newRow = [((id<ComYahooSquidbDataISQLitePreparedStatement>) nil_chk(preparedStatement)) executeInsert];
    }
    @finally {
      [self releaseNonExclusiveLock];
    }
  }
  else {
    newRow = ComYahooSquidbDataSquidDatabase_insertRowLegacyWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTable_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(self, item, table, conflictAlgorithm);
  }
  jboolean result = newRow > 0;
  if (result) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, INSERT), item, table, newRow);
    (void) [item setRowIdWithLong:newRow];
    [item markSaved];
  }
  return result;
}

jlong ComYahooSquidbDataSquidDatabase_insertRowLegacyWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTable_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataTableModel *item, ComYahooSquidbSqlTable *table, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm) {
  ComYahooSquidbDataValuesStorage *mergedValues = [((ComYahooSquidbDataTableModel *) nil_chk(item)) getMergedValues];
  if ([((ComYahooSquidbDataValuesStorage *) nil_chk(mergedValues)) size] == 0) {
    return -1;
  }
  ComYahooSquidbSqlInsert *insert = [((ComYahooSquidbSqlInsert *) nil_chk(ComYahooSquidbSqlInsert_intoWithComYahooSquidbSqlTable_(table))) fromValuesWithComYahooSquidbDataValuesStorage:mergedValues];
  if (conflictAlgorithm != nil) {
    (void) [((ComYahooSquidbSqlInsert *) nil_chk(insert)) onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:conflictAlgorithm];
  }
  return ComYahooSquidbDataSquidDatabase_insertInternalWithComYahooSquidbSqlInsert_(self, insert);
}

jboolean ComYahooSquidbDataSquidDatabase_updateRowWithComYahooSquidbDataTableModel_withComYahooSquidbSqlTableStatement_ConflictAlgorithm_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataTableModel *item, ComYahooSquidbSqlTableStatement_ConflictAlgorithm *conflictAlgorithm) {
  if (![((ComYahooSquidbDataTableModel *) nil_chk(item)) isModified]) {
    return true;
  }
  if (![item isSaved]) {
    return false;
  }
  IOSClass *modelClass = [item java_getClass];
  ComYahooSquidbSqlTable *table = ComYahooSquidbDataSquidDatabase_getTableWithIOSClass_(self, modelClass);
  ComYahooSquidbSqlUpdate *update = [((ComYahooSquidbSqlUpdate *) nil_chk([((ComYahooSquidbSqlUpdate *) nil_chk(ComYahooSquidbSqlUpdate_tableWithComYahooSquidbSqlTable_(table))) fromTemplateWithComYahooSquidbDataAbstractModel:item])) whereWithComYahooSquidbSqlCriterion:[((ComYahooSquidbSqlProperty_LongProperty *) nil_chk([((ComYahooSquidbSqlTable *) nil_chk(table)) getRowIdProperty])) eqWithId:JavaLangLong_valueOfWithLong_([item getRowId])]];
  if (conflictAlgorithm != nil) {
    (void) [((ComYahooSquidbSqlUpdate *) nil_chk(update)) onConflictWithComYahooSquidbSqlTableStatement_ConflictAlgorithm:conflictAlgorithm];
  }
  jboolean result = ComYahooSquidbDataSquidDatabase_updateInternalWithComYahooSquidbSqlUpdate_(self, update) > 0;
  if (result) {
    ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, JreLoadEnum(ComYahooSquidbDataDataChangedNotifier_DBOperation, UPDATE), item, table, [item getRowId]);
    [item markSaved];
  }
  return result;
}

void ComYahooSquidbDataSquidDatabase_notifyForTableWithComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(ComYahooSquidbDataSquidDatabase *self, ComYahooSquidbDataDataChangedNotifier_DBOperation *op, ComYahooSquidbDataAbstractModel *modelValues, ComYahooSquidbSqlSqlTable *table, jlong rowId) {
  if (!self->dataChangedNotificationsEnabled_) {
    return;
  }
  @synchronized(self->notifiersLock_) {
    ComYahooSquidbDataSquidDatabase_onDataChangedWithJavaUtilList_withComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, self->globalNotifiers_, op, modelValues, table, rowId);
    ComYahooSquidbDataSquidDatabase_onDataChangedWithJavaUtilList_withComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(self, [((id<JavaUtilMap>) nil_chk(self->tableNotifiers_)) getWithId:table], op, modelValues, table, rowId);
  }
  if (!ComYahooSquidbDataSquidDatabase_inTransaction(self)) {
    ComYahooSquidbDataSquidDatabase_flushAccumulatedNotificationsWithBoolean_(self, true);
  }
}

void ComYahooSquidbDataSquidDatabase_onDataChangedWithJavaUtilList_withComYahooSquidbDataDataChangedNotifier_DBOperation_withComYahooSquidbDataAbstractModel_withComYahooSquidbSqlSqlTable_withLong_(ComYahooSquidbDataSquidDatabase *self, id<JavaUtilList> notifiers, ComYahooSquidbDataDataChangedNotifier_DBOperation *op, ComYahooSquidbDataAbstractModel *modelValues, ComYahooSquidbSqlSqlTable *table, jlong rowId) {
  if (notifiers != nil) {
    for (ComYahooSquidbDataDataChangedNotifier * __strong notifier in notifiers) {
      if ([((ComYahooSquidbDataDataChangedNotifier *) nil_chk(notifier)) onDataChangedWithComYahooSquidbSqlSqlTable:table withComYahooSquidbDataSquidDatabase:self withComYahooSquidbDataDataChangedNotifier_DBOperation:op withComYahooSquidbDataAbstractModel:modelValues withLong:rowId]) {
        [((id<JavaUtilSet>) nil_chk([((JavaLangThreadLocal *) nil_chk(self->notifierAccumulator_)) get])) addWithId:notifier];
      }
    }
  }
}

void ComYahooSquidbDataSquidDatabase_flushAccumulatedNotificationsWithBoolean_(ComYahooSquidbDataSquidDatabase *self, jboolean transactionSuccess) {
  id<JavaUtilSet> accumulatedNotifiers = [((JavaLangThreadLocal *) nil_chk(self->notifierAccumulator_)) get];
  if (![((id<JavaUtilSet>) nil_chk(accumulatedNotifiers)) isEmpty]) {
    for (ComYahooSquidbDataDataChangedNotifier * __strong notifier in accumulatedNotifiers) {
      [((ComYahooSquidbDataDataChangedNotifier *) nil_chk(notifier)) flushAccumulatedNotificationsWithComYahooSquidbDataSquidDatabase:self withBoolean:transactionSuccess && self->dataChangedNotificationsEnabled_];
    }
    [accumulatedNotifiers clear];
  }
}

jboolean ComYahooSquidbDataSquidDatabase_copyDatabaseLockedWithJavaIoFile_(ComYahooSquidbDataSquidDatabase *self, JavaIoFile *toDir) {
  if (!([((JavaIoFile *) nil_chk(toDir)) mkdirs] || [toDir isDirectory])) {
    ComYahooSquidbUtilityLogger_eWithNSString_withNSString_(ComYahooSquidbUtilityLogger_LOG_TAG, @"Error creating directories for database copy");
    return false;
  }
  JavaIoFile *dbFile = new_JavaIoFile_initWithNSString_([self getDatabasePath]);
  @try {
    if (ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, dbFile, toDir)) {
      ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, new_JavaIoFile_initWithNSString_(JreStrcat("$$", [dbFile getPath], @"-journal")), toDir);
      ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, new_JavaIoFile_initWithNSString_(JreStrcat("$$", [dbFile getPath], @"-shm")), toDir);
      ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, new_JavaIoFile_initWithNSString_(JreStrcat("$$", [dbFile getPath], @"-wal")), toDir);
    }
    else {
      ComYahooSquidbUtilityLogger_eWithNSString_withNSString_(ComYahooSquidbUtilityLogger_LOG_TAG, JreStrcat("$$$", @"Attempted to copy database ", [self getName], @" but it doesn't exist yet"));
      return false;
    }
  }
  @catch (JavaIoIOException *e) {
    ComYahooSquidbUtilityLogger_eWithNSString_withNSString_withJavaLangThrowable_(ComYahooSquidbUtilityLogger_LOG_TAG, JreStrcat("$$", @"Error copying database ", [self getName]), e);
    return false;
  }
  return true;
}

jboolean ComYahooSquidbDataSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(ComYahooSquidbDataSquidDatabase *self, JavaIoFile *inArg, JavaIoFile *toDir) {
  if ([((JavaIoFile *) nil_chk(inArg)) exists]) {
    ComYahooSquidbUtilitySquidUtilities_copyFileWithJavaIoFile_withJavaIoFile_(inArg, new_JavaIoFile_initWithNSString_(JreStrcat("$$$", [((JavaIoFile *) nil_chk(toDir)) getAbsolutePath], JreLoadStatic(JavaIoFile, separator), [inArg getName])));
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataSquidDatabase)

@implementation ComYahooSquidbDataSquidDatabase_1

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0 {
  ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(self, capture$0);
  return self;
}

- (ComYahooSquidbDataPreparedInsertCache *)initialValue {
  return new_ComYahooSquidbDataPreparedInsertCache_initWithJavaUtilSet_(val$openStatementTracking_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataPreparedInsertCache;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$openStatementTracking_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Set<Lcom/yahoo/squidb/data/ISQLitePreparedStatement;>;", "LComYahooSquidbDataSquidDatabase;", "newPreparedInsertCacheWithJavaUtilSet:", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/PreparedInsertCache;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_1 = { "", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, 3, -1 };
  return &_ComYahooSquidbDataSquidDatabase_1;
}

@end

void ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(ComYahooSquidbDataSquidDatabase_1 *self, id<JavaUtilSet> capture$0) {
  self->val$openStatementTracking_ = capture$0;
  JavaLangThreadLocal_init(self);
}

ComYahooSquidbDataSquidDatabase_1 *new_ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_1, initWithJavaUtilSet_, capture$0)
}

ComYahooSquidbDataSquidDatabase_1 *create_ComYahooSquidbDataSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_1, initWithJavaUtilSet_, capture$0)
}

@implementation ComYahooSquidbDataSquidDatabase_TransactionSuccessState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)beginTransaction {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(self);
}

- (jboolean)inTransaction {
  return ComYahooSquidbDataSquidDatabase_TransactionSuccessState_inTransaction(self);
}

- (void)setTransactionSuccessful {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_setTransactionSuccessful(self);
}

- (void)unsetTransactionSuccessful {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(self);
}

- (void)endTransaction {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_endTransaction(self);
}

- (void)reset {
  ComYahooSquidbDataSquidDatabase_TransactionSuccessState_reset(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(beginTransaction);
  methods[2].selector = @selector(inTransaction);
  methods[3].selector = @selector(setTransactionSuccessful);
  methods[4].selector = @selector(unsetTransactionSuccessful);
  methods[5].selector = @selector(endTransaction);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nestedSuccessStack_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x0, -1, -1, 0, -1 },
    { "outerTransactionSuccess_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Deque<Ljava/lang/Boolean;>;", "LComYahooSquidbDataSquidDatabase;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_TransactionSuccessState = { "TransactionSuccessState", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0xa, 7, 2, 1, -1, -1, -1, -1 };
  return &_ComYahooSquidbDataSquidDatabase_TransactionSuccessState;
}

@end

void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  NSObject_init(self);
  self->nestedSuccessStack_ = new_JavaUtilLinkedList_init();
  self->outerTransactionSuccess_ = true;
}

ComYahooSquidbDataSquidDatabase_TransactionSuccessState *new_ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init() {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_TransactionSuccessState, init)
}

ComYahooSquidbDataSquidDatabase_TransactionSuccessState *create_ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init() {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_TransactionSuccessState, init)
}

void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_beginTransaction(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pushWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
}

jboolean ComYahooSquidbDataSquidDatabase_TransactionSuccessState_inTransaction(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  return [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) size] > 0;
}

void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_setTransactionSuccessful(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  (void) [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pop];
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pushWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
}

void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  (void) [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pop];
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pushWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
}

void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_endTransaction(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  JavaLangBoolean *mostRecentTransactionSuccess = [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pop];
  if (![((JavaLangBoolean *) nil_chk(mostRecentTransactionSuccess)) booleanValue]) {
    self->outerTransactionSuccess_ = false;
  }
}

void ComYahooSquidbDataSquidDatabase_TransactionSuccessState_reset(ComYahooSquidbDataSquidDatabase_TransactionSuccessState *self) {
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) clear];
  self->outerTransactionSuccess_ = true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataSquidDatabase_TransactionSuccessState)

@implementation ComYahooSquidbDataSquidDatabase_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataSquidDatabase_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComYahooSquidbDataSquidDatabase_TransactionSuccessState *)initialValue {
  return new_ComYahooSquidbDataSquidDatabase_TransactionSuccessState_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYahooSquidbDataSquidDatabase_TransactionSuccessState;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComYahooSquidbDataSquidDatabase;", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/SquidDatabase$TransactionSuccessState;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_2 = { "", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_ComYahooSquidbDataSquidDatabase_2;
}

@end

void ComYahooSquidbDataSquidDatabase_2_init(ComYahooSquidbDataSquidDatabase_2 *self) {
  JavaLangThreadLocal_init(self);
}

ComYahooSquidbDataSquidDatabase_2 *new_ComYahooSquidbDataSquidDatabase_2_init() {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_2, init)
}

ComYahooSquidbDataSquidDatabase_2 *create_ComYahooSquidbDataSquidDatabase_2_init() {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_2, init)
}

@implementation ComYahooSquidbDataSquidDatabase_OpenHelperDelegate

- (instancetype)initWithComYahooSquidbDataSquidDatabase:(ComYahooSquidbDataSquidDatabase *)outer$ {
  ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(self, outer$);
  return self;
}

- (void)onCreateWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(this$0_, db);
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(ComYahooSquidbDataSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *sqlVisitor = new_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init();
  IOSObjectArray *tables = [this$0_ getTables];
  if (tables != nil) {
    {
      IOSObjectArray *a__ = tables;
      ComYahooSquidbSqlTable * const *b__ = a__->buffer_;
      ComYahooSquidbSqlTable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComYahooSquidbSqlTable *table = *b__++;
        [((ComYahooSquidbSqlTable *) nil_chk(table)) appendCreateTableSqlWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(this$0_) withJavaLangStringBuilder:sql withComYahooSquidbSqlProperty_PropertyVisitor:sqlVisitor];
        [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(db)) execSQLWithNSString:[sql description]];
        [sql setLengthWithInt:0];
      }
    }
  }
  IOSObjectArray *views = [this$0_ getViews];
  if (views != nil) {
    {
      IOSObjectArray *a__ = views;
      ComYahooSquidbSqlView * const *b__ = a__->buffer_;
      ComYahooSquidbSqlView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComYahooSquidbSqlView *view = *b__++;
        [((ComYahooSquidbSqlView *) nil_chk(view)) createViewSqlWithComYahooSquidbSqlCompileContext:ComYahooSquidbDataSquidDatabase_getCompileContext(this$0_) withJavaLangStringBuilder:sql];
        [((id<ComYahooSquidbDataISQLiteDatabase>) nil_chk(db)) execSQLWithNSString:[sql description]];
        [sql setLengthWithInt:0];
      }
    }
  }
  IOSObjectArray *indexes = [this$0_ getIndexes];
  if (indexes != nil) {
    {
      IOSObjectArray *a__ = indexes;
      ComYahooSquidbSqlIndex * const *b__ = a__->buffer_;
      ComYahooSquidbSqlIndex * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComYahooSquidbSqlIndex *idx = *b__++;
        [this$0_ tryCreateIndexWithComYahooSquidbSqlIndex:idx];
      }
    }
  }
  [this$0_ onTablesCreatedWithComYahooSquidbDataISQLiteDatabase:db];
}

- (void)onUpgradeWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db
                                               withInt:(jint)oldVersion
                                               withInt:(jint)newVersion {
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(this$0_, db);
  jboolean success = false;
  JavaLangException *thrown = nil;
  this$0_->isInMigration_ = true;
  @try {
    success = [this$0_ onUpgradeWithComYahooSquidbDataISQLiteDatabase:db withInt:oldVersion withInt:newVersion];
  }
  @catch (JavaLangException *e) {
    thrown = e;
    success = false;
  }
  @finally {
    this$0_->isInMigration_ = false;
  }
  if ([thrown isKindOfClass:[ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException class]]) {
    @throw nil_chk((ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *) cast_chk(thrown, [ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException class]));
  }
  else if ([thrown isKindOfClass:[ComYahooSquidbDataSquidDatabase_MigrationFailedException class]]) {
    @throw nil_chk((ComYahooSquidbDataSquidDatabase_MigrationFailedException *) cast_chk(thrown, [ComYahooSquidbDataSquidDatabase_MigrationFailedException class]));
  }
  else if (!success) {
    @throw new_ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_([this$0_ getName], oldVersion, newVersion, thrown);
  }
}

- (void)onDowngradeWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db
                                                 withInt:(jint)oldVersion
                                                 withInt:(jint)newVersion {
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(this$0_, db);
  jboolean success = false;
  JavaLangException *thrown = nil;
  this$0_->isInMigration_ = true;
  @try {
    success = [this$0_ onDowngradeWithComYahooSquidbDataISQLiteDatabase:db withInt:oldVersion withInt:newVersion];
  }
  @catch (JavaLangException *e) {
    thrown = e;
    success = false;
  }
  @finally {
    this$0_->isInMigration_ = false;
  }
  if ([thrown isKindOfClass:[ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException class]]) {
    @throw nil_chk((ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *) cast_chk(thrown, [ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException class]));
  }
  else if ([thrown isKindOfClass:[ComYahooSquidbDataSquidDatabase_MigrationFailedException class]]) {
    @throw nil_chk((ComYahooSquidbDataSquidDatabase_MigrationFailedException *) cast_chk(thrown, [ComYahooSquidbDataSquidDatabase_MigrationFailedException class]));
  }
  else if (!success) {
    @throw new_ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_([this$0_ getName], oldVersion, newVersion, thrown);
  }
}

- (void)onConfigureWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(this$0_, db);
  [this$0_ onConfigureWithComYahooSquidbDataISQLiteDatabase:db];
}

- (void)onOpenWithComYahooSquidbDataISQLiteDatabase:(id<ComYahooSquidbDataISQLiteDatabase>)db {
  ComYahooSquidbDataSquidDatabase_setDatabaseWithComYahooSquidbDataISQLiteDatabase_(this$0_, db);
  [this$0_ onOpenWithComYahooSquidbDataISQLiteDatabase:db];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComYahooSquidbDataSquidDatabase:);
  methods[1].selector = @selector(onCreateWithComYahooSquidbDataISQLiteDatabase:);
  methods[2].selector = @selector(onUpgradeWithComYahooSquidbDataISQLiteDatabase:withInt:withInt:);
  methods[3].selector = @selector(onDowngradeWithComYahooSquidbDataISQLiteDatabase:withInt:withInt:);
  methods[4].selector = @selector(onConfigureWithComYahooSquidbDataISQLiteDatabase:);
  methods[5].selector = @selector(onOpenWithComYahooSquidbDataISQLiteDatabase:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComYahooSquidbDataSquidDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onCreate", "LComYahooSquidbDataISQLiteDatabase;", "onUpgrade", "LComYahooSquidbDataISQLiteDatabase;II", "onDowngrade", "onConfigure", "onOpen", "LComYahooSquidbDataSquidDatabase;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_OpenHelperDelegate = { "OpenHelperDelegate", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x11, 6, 1, 7, -1, -1, -1, -1 };
  return &_ComYahooSquidbDataSquidDatabase_OpenHelperDelegate;
}

@end

void ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *self, ComYahooSquidbDataSquidDatabase *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *new_ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *outer$) {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_OpenHelperDelegate, initWithComYahooSquidbDataSquidDatabase_, outer$)
}

ComYahooSquidbDataSquidDatabase_OpenHelperDelegate *create_ComYahooSquidbDataSquidDatabase_OpenHelperDelegate_initWithComYahooSquidbDataSquidDatabase_(ComYahooSquidbDataSquidDatabase *outer$) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_OpenHelperDelegate, initWithComYahooSquidbDataSquidDatabase_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataSquidDatabase_OpenHelperDelegate)

@implementation ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangVoid *)appendColumnDefinitionWithNSString:(NSString *)type
                       withComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, type, property, sql);
}

- (JavaLangVoid *)visitDoubleWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                    withId:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, @"REAL", property, sql);
}

- (JavaLangVoid *)visitIntegerWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                     withId:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, @"INTEGER", property, sql);
}

- (JavaLangVoid *)visitLongWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                  withId:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, @"INTEGER", property, sql);
}

- (JavaLangVoid *)visitStringWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                    withId:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, @"TEXT", property, sql);
}

- (JavaLangVoid *)visitBooleanWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                     withId:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, @"INTEGER", property, sql);
}

- (JavaLangVoid *)visitBlobWithComYahooSquidbSqlProperty:(ComYahooSquidbSqlProperty *)property
                                                  withId:(JavaLangStringBuilder *)sql {
  return ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(self, @"BLOB", property, sql);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x2, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 8, 4, -1, 9, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 10, 4, -1, 11, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 12, 4, -1, 13, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 14, 4, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(appendColumnDefinitionWithNSString:withComYahooSquidbSqlProperty:withJavaLangStringBuilder:);
  methods[2].selector = @selector(visitDoubleWithComYahooSquidbSqlProperty:withId:);
  methods[3].selector = @selector(visitIntegerWithComYahooSquidbSqlProperty:withId:);
  methods[4].selector = @selector(visitLongWithComYahooSquidbSqlProperty:withId:);
  methods[5].selector = @selector(visitStringWithComYahooSquidbSqlProperty:withId:);
  methods[6].selector = @selector(visitBooleanWithComYahooSquidbSqlProperty:withId:);
  methods[7].selector = @selector(visitBlobWithComYahooSquidbSqlProperty:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "appendColumnDefinition", "LNSString;LComYahooSquidbSqlProperty;LJavaLangStringBuilder;", "(Ljava/lang/String;Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitDouble", "LComYahooSquidbSqlProperty;LJavaLangStringBuilder;", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Double;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitInteger", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Integer;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitLong", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Long;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitString", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/String;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitBoolean", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Boolean;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitBlob", "(Lcom/yahoo/squidb/sql/Property<[B>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "LComYahooSquidbDataSquidDatabase;", "Ljava/lang/Object;Lcom/yahoo/squidb/sql/Property$PropertyVisitor<Ljava/lang/Void;Ljava/lang/StringBuilder;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor = { "SqlConstructorVisitor", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0xa, 8, 0, 16, -1, -1, 17, -1 };
  return &_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor;
}

@end

void ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *self) {
  NSObject_init(self);
}

ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *new_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init() {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor, init)
}

ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *create_ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_init() {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor, init)
}

JavaLangVoid *ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withComYahooSquidbSqlProperty_withJavaLangStringBuilder_(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor *self, NSString *type, ComYahooSquidbSqlProperty *property, JavaLangStringBuilder *sql) {
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:[((ComYahooSquidbSqlProperty *) nil_chk(property)) getName]])) appendWithNSString:@" "])) appendWithNSString:type];
  if (!ComYahooSquidbSqlSqlUtils_isEmptyWithNSString_([property getColumnDefinition])) {
    (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@" "])) appendWithNSString:[property getColumnDefinition]];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataSquidDatabase_SqlConstructorVisitor)

@implementation ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComYahooSquidbDataSquidDatabase;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException = { "RecreateDuringMigrationException", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException;
}

@end

void ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *self) {
  JavaLangRuntimeException_init(self);
}

ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *new_ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init() {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException, init)
}

ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException *create_ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException_init() {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataSquidDatabase_RecreateDuringMigrationException)

@implementation ComYahooSquidbDataSquidDatabase_MigrationFailedException

- (instancetype)initWithNSString:(NSString *)dbName
                         withInt:(jint)oldVersion
                         withInt:(jint)newVersion {
  ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(self, dbName, oldVersion, newVersion);
  return self;
}

- (instancetype)initWithNSString:(NSString *)dbName
                         withInt:(jint)oldVersion
                         withInt:(jint)newVersion
           withJavaLangThrowable:(JavaLangThrowable *)throwable {
  ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(self, dbName, oldVersion, newVersion, throwable);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withInt:);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComYahooSquidbDataSquidDatabase_MigrationFailedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "dbName_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "oldVersion_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "newVersion_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;II", "LNSString;IILJavaLangThrowable;", "LComYahooSquidbDataSquidDatabase;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_MigrationFailedException = { "MigrationFailedException", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x9, 2, 4, 2, -1, -1, -1, -1 };
  return &_ComYahooSquidbDataSquidDatabase_MigrationFailedException;
}

@end

void ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(ComYahooSquidbDataSquidDatabase_MigrationFailedException *self, NSString *dbName, jint oldVersion, jint newVersion) {
  ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(self, dbName, oldVersion, newVersion, nil);
}

ComYahooSquidbDataSquidDatabase_MigrationFailedException *new_ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(NSString *dbName, jint oldVersion, jint newVersion) {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_, dbName, oldVersion, newVersion)
}

ComYahooSquidbDataSquidDatabase_MigrationFailedException *create_ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(NSString *dbName, jint oldVersion, jint newVersion) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_, dbName, oldVersion, newVersion)
}

void ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(ComYahooSquidbDataSquidDatabase_MigrationFailedException *self, NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) {
  JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, JreStrcat("$$$I$I", @"Failed to migrate db ", dbName, @" from version ", oldVersion, @" to ", newVersion), throwable);
  self->dbName_ = dbName;
  self->oldVersion_ = oldVersion;
  self->newVersion_ = newVersion;
}

ComYahooSquidbDataSquidDatabase_MigrationFailedException *new_ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_withJavaLangThrowable_, dbName, oldVersion, newVersion, throwable)
}

ComYahooSquidbDataSquidDatabase_MigrationFailedException *create_ComYahooSquidbDataSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_withJavaLangThrowable_, dbName, oldVersion, newVersion, throwable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYahooSquidbDataSquidDatabase_MigrationFailedException)

@implementation ComYahooSquidbDataSquidDatabase_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYahooSquidbDataSquidDatabase_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilSet>)initialValue {
  return new_JavaUtilHashSet_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Set<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;", "LComYahooSquidbDataSquidDatabase;", "Ljava/lang/ThreadLocal<Ljava/util/Set<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;>;" };
  static const J2ObjcClassInfo _ComYahooSquidbDataSquidDatabase_3 = { "", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, 2, -1 };
  return &_ComYahooSquidbDataSquidDatabase_3;
}

@end

void ComYahooSquidbDataSquidDatabase_3_init(ComYahooSquidbDataSquidDatabase_3 *self) {
  JavaLangThreadLocal_init(self);
}

ComYahooSquidbDataSquidDatabase_3 *new_ComYahooSquidbDataSquidDatabase_3_init() {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_3, init)
}

ComYahooSquidbDataSquidDatabase_3 *create_ComYahooSquidbDataSquidDatabase_3_init() {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_3, init)
}

J2OBJC_INITIALIZED_DEFN(ComYahooSquidbDataSquidDatabase_$Lambda$1)

@implementation ComYahooSquidbDataSquidDatabase_$Lambda$1

- (id)applyWithId:(id)x {
  return x != nil ? [x description] : @"";
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [ComYahooSquidbDataSquidDatabase_$Lambda$1 class]) {
    ComYahooSquidbDataSquidDatabase_$Lambda$1_instance = new_ComYahooSquidbDataSquidDatabase_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(ComYahooSquidbDataSquidDatabase_$Lambda$1)
  }
}

@end

void ComYahooSquidbDataSquidDatabase_$Lambda$1_init(ComYahooSquidbDataSquidDatabase_$Lambda$1 *self) {
  NSObject_init(self);
}

ComYahooSquidbDataSquidDatabase_$Lambda$1 *new_ComYahooSquidbDataSquidDatabase_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(ComYahooSquidbDataSquidDatabase_$Lambda$1, init)
}

ComYahooSquidbDataSquidDatabase_$Lambda$1 *create_ComYahooSquidbDataSquidDatabase_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(ComYahooSquidbDataSquidDatabase_$Lambda$1, init)
}
