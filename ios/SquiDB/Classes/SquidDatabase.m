//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SquidDatabase.java
//

#include "AbstractModel.h"
#include "CompileContext.h"
#include "CompiledStatement.h"
#include "Criterion.h"
#include "DataChangedNotifier.h"
#include "Delete.h"
#include "Field.h"
#include "ICursor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "ISQLiteDatabase.h"
#include "ISQLiteOpenHelper.h"
#include "ISQLitePreparedStatement.h"
#include "Index.h"
#include "Insert.h"
#include "J2ObjC_source.h"
#include "Logger.h"
#include "PreparedInsertCache.h"
#include "Property.h"
#include "Query.h"
#include "SqlStatement.h"
#include "SqlTable.h"
#include "SqlUtils.h"
#include "SquidCursor.h"
#include "SquidDatabase.h"
#include "SquidTransactionListener.h"
#include "SquidUtilities.h"
#include "Table.h"
#include "TableModel.h"
#include "TableModelName.h"
#include "TableStatement.h"
#include "Update.h"
#include "ValuesStorage.h"
#include "VersionCode.h"
#include "View.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Deque.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "java/util/function/Function.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface SquiDBSquidDatabase () {
 @public
  id<JavaUtilSet> trackedPreparedInserts_;
  JavaLangThreadLocal *preparedInsertCache_;
  jboolean preparedInsertCacheEnabled_;
  SquiDBSquidDatabase *attachedTo_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *readWriteLock_;
  id databaseInstanceLock_;
  id<SquiDBISQLiteOpenHelper> helper_;
  id<SquiDBISQLiteDatabase> database_;
  SquiDBVersionCode *sqliteVersion_;
  id<JavaUtilMap> tableMap_;
  jboolean isInMigration_;
  jboolean isInMigrationFailedHook_;
  jint databaseOpenFailedRetryCount_;
  JavaLangThreadLocal *transactionSuccessState_;
  id notifiersLock_;
  jboolean dataChangedNotificationsEnabled_;
  id<JavaUtilList> globalNotifiers_;
  id<JavaUtilMap> tableNotifiers_;
  JavaLangThreadLocal *notifierAccumulator_;
}

- (void)registerTableModelsWithSquiDBSqlTableArray:(IOSObjectArray *)tables;

- (id<SquiDBISQLiteOpenHelper>)getOpenHelper;

- (void)openForWritingLocked;

- (JavaLangThreadLocal *)newPreparedInsertCacheWithJavaUtilSet:(id<JavaUtilSet>)openStatementTracking OBJC_METHOD_FAMILY_NONE;

- (NSString *)attachToWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)attachTo;

- (jboolean)detachFromWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)detachFrom;

- (NSString *)getAttachedName;

- (void)recreateLocked;

- (void)closeLocked;

- (void)closeAndDeleteLocked;

- (void)closeAndDeleteInternalWithBoolean:(jboolean)deleteAfterClose;

- (void)clearPreparedStatementCache;

- (void)onShowSqlWithNSString:(NSString *)sql
            withNSObjectArray:(IOSObjectArray *)sqlArgs;

- (jlong)insertInternalWithSquiDBInsert:(SquiDBInsert *)insert;

- (jint)deleteInternalWithSquiDBDelete:(SquiDBDelete *)delete_;

- (jint)updateInternalWithSquiDBUpdate:(SquiDBUpdate *)update;

- (void)setDatabaseWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (SquiDBVersionCode *)readSqliteVersionLockedWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db;

- (jboolean)propertyBelongsToTableWithSquiDBProperty:(SquiDBProperty *)property;

- (SquiDBQuery *)inferTableForQueryWithIOSClass:(IOSClass *)modelClass
                                withSquiDBQuery:(SquiDBQuery *)query;

- (void)ensureSqlCompilesWithNSString:(NSString *)sql;

- (jlong)insertRowLegacyWithSquiDBTableModel:(SquiDBTableModel *)item
                             withSquiDBTable:(SquiDBTable *)table
  withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm;

- (void)notifyForTableWithSquiDBDataChangedNotifier_DBOperation:(SquiDBDataChangedNotifier_DBOperation *)op
                                        withSquiDBAbstractModel:(SquiDBAbstractModel *)modelValues
                                             withSquiDBSqlTable:(SquiDBSqlTable *)table
                                                       withLong:(jlong)rowId;

- (void)onDataChangedWithJavaUtilList:(id<JavaUtilList>)notifiers
withSquiDBDataChangedNotifier_DBOperation:(SquiDBDataChangedNotifier_DBOperation *)op
              withSquiDBAbstractModel:(SquiDBAbstractModel *)modelValues
                   withSquiDBSqlTable:(SquiDBSqlTable *)table
                             withLong:(jlong)rowId;

- (void)flushAccumulatedNotificationsWithBoolean:(jboolean)transactionSuccess;

- (jboolean)copyDatabaseLockedWithJavaIoFile:(JavaIoFile *)toDir OBJC_METHOD_FAMILY_NONE;

- (jboolean)copyFileIfExistsWithJavaIoFile:(JavaIoFile *)inArg
                            withJavaIoFile:(JavaIoFile *)toDir OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, trackedPreparedInserts_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, preparedInsertCache_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, attachedTo_, SquiDBSquidDatabase *)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, readWriteLock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, databaseInstanceLock_, id)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, helper_, id<SquiDBISQLiteOpenHelper>)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, database_, id<SquiDBISQLiteDatabase>)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, sqliteVersion_, SquiDBVersionCode *)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, tableMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, transactionSuccessState_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, notifiersLock_, id)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, globalNotifiers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, tableNotifiers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(SquiDBSquidDatabase, notifierAccumulator_, JavaLangThreadLocal *)

inline jint SquiDBSquidDatabase_get_STRING_BUILDER_INITIAL_CAPACITY(void);
#define SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY 128
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSquidDatabase, STRING_BUILDER_INITIAL_CAPACITY, jint)

__attribute__((unused)) static void SquiDBSquidDatabase_registerTableModelsWithSquiDBSqlTableArray_(SquiDBSquidDatabase *self, IOSObjectArray *tables);

__attribute__((unused)) static id<SquiDBISQLiteOpenHelper> SquiDBSquidDatabase_getOpenHelper(SquiDBSquidDatabase *self);

__attribute__((unused)) static SquiDBSqlTable *SquiDBSquidDatabase_getSqlTableWithIOSClass_(SquiDBSquidDatabase *self, IOSClass *modelClass);

__attribute__((unused)) static SquiDBTable *SquiDBSquidDatabase_getTableWithIOSClass_(SquiDBSquidDatabase *self, IOSClass *modelClass);

__attribute__((unused)) static id<SquiDBISQLiteDatabase> SquiDBSquidDatabase_getDatabase(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_openForWritingLocked(SquiDBSquidDatabase *self);

__attribute__((unused)) static JavaLangThreadLocal *SquiDBSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(SquiDBSquidDatabase *self, id<JavaUtilSet> openStatementTracking);

__attribute__((unused)) static NSString *SquiDBSquidDatabase_attachToWithSquiDBSquidDatabase_(SquiDBSquidDatabase *self, SquiDBSquidDatabase *attachTo);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_detachFromWithSquiDBSquidDatabase_(SquiDBSquidDatabase *self, SquiDBSquidDatabase *detachFrom);

__attribute__((unused)) static NSString *SquiDBSquidDatabase_getAttachedName(SquiDBSquidDatabase *self);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_isOpen(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_recreateLocked(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_closeLocked(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_closeAndDeleteLocked(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_closeAndDeleteInternalWithBoolean_(SquiDBSquidDatabase *self, jboolean deleteAfterClose);

__attribute__((unused)) static void SquiDBSquidDatabase_clearPreparedStatementCache(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(SquiDBSquidDatabase *self, NSString *sql, IOSObjectArray *sqlArgs);

__attribute__((unused)) static jlong SquiDBSquidDatabase_insertInternalWithSquiDBInsert_(SquiDBSquidDatabase *self, SquiDBInsert *insert);

__attribute__((unused)) static jint SquiDBSquidDatabase_deleteInternalWithSquiDBDelete_(SquiDBSquidDatabase *self, SquiDBDelete *delete_);

__attribute__((unused)) static jint SquiDBSquidDatabase_updateInternalWithSquiDBUpdate_(SquiDBSquidDatabase *self, SquiDBUpdate *update);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_inTransaction(SquiDBSquidDatabase *self);

__attribute__((unused)) static void SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(SquiDBSquidDatabase *self, id<SquiDBISQLiteDatabase> db);

__attribute__((unused)) static SquiDBVersionCode *SquiDBSquidDatabase_readSqliteVersionLockedWithSquiDBISQLiteDatabase_(SquiDBSquidDatabase *self, id<SquiDBISQLiteDatabase> db);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_propertyBelongsToTableWithSquiDBProperty_(SquiDBSquidDatabase *self, SquiDBProperty *property);

__attribute__((unused)) static SquiDBCompileContext *SquiDBSquidDatabase_getCompileContext(SquiDBSquidDatabase *self);

__attribute__((unused)) static SquiDBQuery *SquiDBSquidDatabase_inferTableForQueryWithIOSClass_withSquiDBQuery_(SquiDBSquidDatabase *self, IOSClass *modelClass, SquiDBQuery *query);

__attribute__((unused)) static void SquiDBSquidDatabase_ensureSqlCompilesWithNSString_(SquiDBSquidDatabase *self, NSString *sql);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_insertRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(SquiDBSquidDatabase *self, SquiDBTableModel *item, SquiDBTableStatement_ConflictAlgorithm *conflictAlgorithm);

__attribute__((unused)) static jlong SquiDBSquidDatabase_insertRowLegacyWithSquiDBTableModel_withSquiDBTable_withSquiDBTableStatement_ConflictAlgorithm_(SquiDBSquidDatabase *self, SquiDBTableModel *item, SquiDBTable *table, SquiDBTableStatement_ConflictAlgorithm *conflictAlgorithm);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_updateRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(SquiDBSquidDatabase *self, SquiDBTableModel *item, SquiDBTableStatement_ConflictAlgorithm *conflictAlgorithm);

__attribute__((unused)) static void SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(SquiDBSquidDatabase *self, SquiDBDataChangedNotifier_DBOperation *op, SquiDBAbstractModel *modelValues, SquiDBSqlTable *table, jlong rowId);

__attribute__((unused)) static void SquiDBSquidDatabase_onDataChangedWithJavaUtilList_withSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(SquiDBSquidDatabase *self, id<JavaUtilList> notifiers, SquiDBDataChangedNotifier_DBOperation *op, SquiDBAbstractModel *modelValues, SquiDBSqlTable *table, jlong rowId);

__attribute__((unused)) static void SquiDBSquidDatabase_flushAccumulatedNotificationsWithBoolean_(SquiDBSquidDatabase *self, jboolean transactionSuccess);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_copyDatabaseLockedWithJavaIoFile_(SquiDBSquidDatabase *self, JavaIoFile *toDir);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(SquiDBSquidDatabase *self, JavaIoFile *inArg, JavaIoFile *toDir);

@interface SquiDBSquidDatabase_1 : JavaLangThreadLocal {
 @public
  id<JavaUtilSet> val$openStatementTracking_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0;

- (SquiDBPreparedInsertCache *)initialValue OBJC_METHOD_FAMILY_NONE;

- (SquiDBPreparedInsertCache *)get;

- (SquiDBPreparedInsertCache *)childValueWithId:(SquiDBPreparedInsertCache *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_1)

__attribute__((unused)) static void SquiDBSquidDatabase_1_initWithJavaUtilSet_(SquiDBSquidDatabase_1 *self, id<JavaUtilSet> capture$0);

__attribute__((unused)) static SquiDBSquidDatabase_1 *new_SquiDBSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_1 *create_SquiDBSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0);

@interface SquiDBSquidDatabase_TransactionSuccessState : NSObject {
 @public
  id<JavaUtilDeque> nestedSuccessStack_;
  jboolean outerTransactionSuccess_;
}

- (instancetype)init;

- (void)beginTransaction;

- (jboolean)inTransaction;

- (void)setTransactionSuccessful;

- (void)unsetTransactionSuccessful;

- (void)endTransaction;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_TransactionSuccessState)

J2OBJC_FIELD_SETTER(SquiDBSquidDatabase_TransactionSuccessState, nestedSuccessStack_, id<JavaUtilDeque>)

__attribute__((unused)) static void SquiDBSquidDatabase_TransactionSuccessState_init(SquiDBSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static SquiDBSquidDatabase_TransactionSuccessState *new_SquiDBSquidDatabase_TransactionSuccessState_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_TransactionSuccessState *create_SquiDBSquidDatabase_TransactionSuccessState_init(void);

__attribute__((unused)) static void SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(SquiDBSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static jboolean SquiDBSquidDatabase_TransactionSuccessState_inTransaction(SquiDBSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void SquiDBSquidDatabase_TransactionSuccessState_setTransactionSuccessful(SquiDBSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void SquiDBSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(SquiDBSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void SquiDBSquidDatabase_TransactionSuccessState_endTransaction(SquiDBSquidDatabase_TransactionSuccessState *self);

__attribute__((unused)) static void SquiDBSquidDatabase_TransactionSuccessState_reset(SquiDBSquidDatabase_TransactionSuccessState *self);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSquidDatabase_TransactionSuccessState)

@interface SquiDBSquidDatabase_2 : JavaLangThreadLocal

- (instancetype)init;

- (SquiDBSquidDatabase_TransactionSuccessState *)initialValue OBJC_METHOD_FAMILY_NONE;

- (SquiDBSquidDatabase_TransactionSuccessState *)get;

- (SquiDBSquidDatabase_TransactionSuccessState *)childValueWithId:(SquiDBSquidDatabase_TransactionSuccessState *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_2)

__attribute__((unused)) static void SquiDBSquidDatabase_2_init(SquiDBSquidDatabase_2 *self);

__attribute__((unused)) static SquiDBSquidDatabase_2 *new_SquiDBSquidDatabase_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_2 *create_SquiDBSquidDatabase_2_init(void);

@interface SquiDBSquidDatabase_OpenHelperDelegate () {
 @public
  SquiDBSquidDatabase *this$0_;
}

- (instancetype)initWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)outer$;

@end

__attribute__((unused)) static void SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(SquiDBSquidDatabase_OpenHelperDelegate *self, SquiDBSquidDatabase *outer$);

__attribute__((unused)) static SquiDBSquidDatabase_OpenHelperDelegate *new_SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(SquiDBSquidDatabase *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_OpenHelperDelegate *create_SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(SquiDBSquidDatabase *outer$);

@interface SquiDBSquidDatabase_SqlConstructorVisitor : NSObject < SquiDBProperty_PropertyVisitor >

- (instancetype)init;

- (JavaLangVoid *)appendColumnDefinitionWithNSString:(NSString *)type
                                  withSquiDBProperty:(SquiDBProperty *)property
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(JavaLangStringBuilder *)sql;

- (JavaLangVoid *)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(JavaLangStringBuilder *)sql;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_SqlConstructorVisitor)

__attribute__((unused)) static void SquiDBSquidDatabase_SqlConstructorVisitor_init(SquiDBSquidDatabase_SqlConstructorVisitor *self);

__attribute__((unused)) static SquiDBSquidDatabase_SqlConstructorVisitor *new_SquiDBSquidDatabase_SqlConstructorVisitor_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_SqlConstructorVisitor *create_SquiDBSquidDatabase_SqlConstructorVisitor_init(void);

__attribute__((unused)) static JavaLangVoid *SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(SquiDBSquidDatabase_SqlConstructorVisitor *self, NSString *type, SquiDBProperty *property, JavaLangStringBuilder *sql);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSquidDatabase_SqlConstructorVisitor)

@interface SquiDBSquidDatabase_RecreateDuringMigrationException : JavaLangRuntimeException

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_RecreateDuringMigrationException)

inline jlong SquiDBSquidDatabase_RecreateDuringMigrationException_get_serialVersionUID(void);
#define SquiDBSquidDatabase_RecreateDuringMigrationException_serialVersionUID 480910684116077495LL
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSquidDatabase_RecreateDuringMigrationException, serialVersionUID, jlong)

__attribute__((unused)) static void SquiDBSquidDatabase_RecreateDuringMigrationException_init(SquiDBSquidDatabase_RecreateDuringMigrationException *self);

__attribute__((unused)) static SquiDBSquidDatabase_RecreateDuringMigrationException *new_SquiDBSquidDatabase_RecreateDuringMigrationException_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_RecreateDuringMigrationException *create_SquiDBSquidDatabase_RecreateDuringMigrationException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSquidDatabase_RecreateDuringMigrationException)

inline jlong SquiDBSquidDatabase_MigrationFailedException_get_serialVersionUID(void);
#define SquiDBSquidDatabase_MigrationFailedException_serialVersionUID 2949995666882182744LL
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSquidDatabase_MigrationFailedException, serialVersionUID, jlong)

@interface SquiDBSquidDatabase_3 : JavaLangThreadLocal

- (instancetype)init;

- (id<JavaUtilSet>)initialValue OBJC_METHOD_FAMILY_NONE;

- (id<JavaUtilSet>)get;

- (id<JavaUtilSet>)childValueWithId:(id<JavaUtilSet>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSquidDatabase_3)

__attribute__((unused)) static void SquiDBSquidDatabase_3_init(SquiDBSquidDatabase_3 *self);

__attribute__((unused)) static SquiDBSquidDatabase_3 *new_SquiDBSquidDatabase_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_3 *create_SquiDBSquidDatabase_3_init(void);

@interface SquiDBSquidDatabase_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id)x;

@end

J2OBJC_STATIC_INIT(SquiDBSquidDatabase_$Lambda$1)

inline SquiDBSquidDatabase_$Lambda$1 *SquiDBSquidDatabase_$Lambda$1_get_instance(void);
static SquiDBSquidDatabase_$Lambda$1 *SquiDBSquidDatabase_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBSquidDatabase_$Lambda$1, instance, SquiDBSquidDatabase_$Lambda$1 *)

__attribute__((unused)) static void SquiDBSquidDatabase_$Lambda$1_init(SquiDBSquidDatabase_$Lambda$1 *self);

__attribute__((unused)) static SquiDBSquidDatabase_$Lambda$1 *new_SquiDBSquidDatabase_$Lambda$1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static SquiDBSquidDatabase_$Lambda$1 *create_SquiDBSquidDatabase_$Lambda$1_init(void);

@implementation SquiDBSquidDatabase

- (void)setShowSqlWithBoolean:(jboolean)showSql {
  self->showSql_ = showSql;
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getTables {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getViews {
  return nil;
}

- (IOSObjectArray *)getIndexes {
  return nil;
}

- (void)onTablesCreatedWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
}

- (jboolean)onUpgradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                       withInt:(jint)oldVersion
                                       withInt:(jint)newVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)onDowngradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                         withInt:(jint)oldVersion
                                         withInt:(jint)newVersion {
  return true;
}

- (void)onMigrationFailedWithSquiDBSquidDatabase_MigrationFailedException:(SquiDBSquidDatabase_MigrationFailedException *)failure {
  @throw nil_chk(failure);
}

- (void)onDatabaseOpenFailedWithJavaLangRuntimeException:(JavaLangRuntimeException *)failure
                                                 withInt:(jint)openFailureCount {
  @throw nil_chk(failure);
}

- (void)onConfigureWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
}

- (void)onOpenWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
}

- (void)onCloseWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
}

- (void)onErrorWithNSString:(NSString *)message
      withJavaLangThrowable:(JavaLangThrowable *)error {
  SquiDBLogger_eWithNSString_withNSString_withJavaLangThrowable_(SquiDBLogger_LOG_TAG, JreStrcat("$$$", [[self java_getClass] getSimpleName], @" -- ", message), error);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSquidDatabase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)registerTableModelsWithSquiDBSqlTableArray:(IOSObjectArray *)tables {
  SquiDBSquidDatabase_registerTableModelsWithSquiDBSqlTableArray_(self, tables);
}

- (id<SquiDBISQLiteOpenHelper>)getOpenHelper {
  return SquiDBSquidDatabase_getOpenHelper(self);
}

- (id<SquiDBISQLiteOpenHelper>)createOpenHelperWithNSString:(NSString *)databaseName
                 withSquiDBSquidDatabase_OpenHelperDelegate:(SquiDBSquidDatabase_OpenHelperDelegate *)delegate
                                                    withInt:(jint)version_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDatabasePath {
  return [((id<SquiDBISQLiteOpenHelper>) nil_chk(SquiDBSquidDatabase_getOpenHelper(self))) getDatabasePath];
}

- (SquiDBSqlTable *)getSqlTableWithIOSClass:(IOSClass *)modelClass {
  return SquiDBSquidDatabase_getSqlTableWithIOSClass_(self, modelClass);
}

- (SquiDBTable *)getTableWithIOSClass:(IOSClass *)modelClass {
  return SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
}

- (id<SquiDBISQLiteDatabase>)getDatabase {
  return SquiDBSquidDatabase_getDatabase(self);
}

- (void)openForWritingLocked {
  SquiDBSquidDatabase_openForWritingLocked(self);
}

- (void)setPreparedInsertCacheEnabledWithBoolean:(jboolean)enabled {
  preparedInsertCacheEnabled_ = enabled;
}

- (JavaLangThreadLocal *)newPreparedInsertCacheWithJavaUtilSet:(id<JavaUtilSet>)openStatementTracking {
  return SquiDBSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(self, openStatementTracking);
}

- (NSString *)attachDatabaseWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)other {
  if (attachedTo_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Can't attach a database to a database that is itself attached");
  }
  if (SquiDBSquidDatabase_inTransaction(self)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Can't attach a database while in a transaction on the current thread");
  }
  [self acquireExclusiveLock];
  @try {
    return SquiDBSquidDatabase_attachToWithSquiDBSquidDatabase_(nil_chk(other), self);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (jboolean)detachDatabaseWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)other {
  if (((SquiDBSquidDatabase *) nil_chk(other))->attachedTo_ != self) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Database ", [other getName], @" is not attached to ", [self getName]));
  }
  return SquiDBSquidDatabase_detachFromWithSquiDBSquidDatabase_(other, self);
}

- (NSString *)attachToWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)attachTo {
  return SquiDBSquidDatabase_attachToWithSquiDBSquidDatabase_(self, attachTo);
}

- (jboolean)detachFromWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)detachFrom {
  return SquiDBSquidDatabase_detachFromWithSquiDBSquidDatabase_(self, detachFrom);
}

- (NSString *)getAttachedName {
  return SquiDBSquidDatabase_getAttachedName(self);
}

- (jboolean)isOpen {
  return SquiDBSquidDatabase_isOpen(self);
}

- (void)close {
  [self acquireExclusiveLock];
  @try {
    SquiDBSquidDatabase_closeLocked(self);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (void)clear {
  [self acquireExclusiveLock];
  @try {
    SquiDBSquidDatabase_closeAndDeleteLocked(self);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (void)recreate {
  if (isInMigration_) {
    @throw new_SquiDBSquidDatabase_RecreateDuringMigrationException_init();
  }
  else if (isInMigrationFailedHook_ || databaseOpenFailedRetryCount_ > 0) {
    SquiDBSquidDatabase_recreateLocked(self);
  }
  else {
    [self acquireExclusiveLock];
    @try {
      SquiDBSquidDatabase_recreateLocked(self);
    }
    @finally {
      [self releaseExclusiveLock];
    }
  }
}

- (void)recreateLocked {
  SquiDBSquidDatabase_recreateLocked(self);
}

- (void)closeLocked {
  SquiDBSquidDatabase_closeLocked(self);
}

- (void)closeAndDeleteLocked {
  SquiDBSquidDatabase_closeAndDeleteLocked(self);
}

- (void)closeAndDeleteInternalWithBoolean:(jboolean)deleteAfterClose {
  SquiDBSquidDatabase_closeAndDeleteInternalWithBoolean_(self, deleteAfterClose);
}

- (void)clearPreparedStatementCache {
  SquiDBSquidDatabase_clearPreparedStatementCache(self);
}

- (NSString *)description {
  return JreStrcat("$$", @"DB:", [self getName]);
}

- (id<SquiDBICursor>)rawQueryWithNSString:(NSString *)sql
                        withNSObjectArray:(IOSObjectArray *)sqlArgs {
  [self acquireNonExclusiveLock];
  @try {
    if (self->showSql_) {
      SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(self, sql, sqlArgs);
    }
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) rawQueryWithNSString:sql withNSObjectArray:sqlArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (void)onShowSqlWithNSString:(NSString *)sql
            withNSObjectArray:(IOSObjectArray *)sqlArgs {
  SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(self, sql, sqlArgs);
}

- (NSString *)simpleQueryForStringWithNSString:(NSString *)sql
                             withNSObjectArray:(IOSObjectArray *)sqlArgs {
  [self acquireNonExclusiveLock];
  @try {
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) simpleQueryForStringWithNSString:sql withNSObjectArray:sqlArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (jlong)simpleQueryForLongWithNSString:(NSString *)sql
                      withNSObjectArray:(IOSObjectArray *)sqlArgs {
  [self acquireNonExclusiveLock];
  @try {
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) simpleQueryForLongWithNSString:sql withNSObjectArray:sqlArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (NSString *)simpleQueryForStringWithSquiDBQuery:(SquiDBQuery *)query {
  SquiDBCompiledStatement *compiled = [((SquiDBQuery *) nil_chk(query)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  return [self simpleQueryForStringWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
}

- (jlong)simpleQueryForLongWithSquiDBQuery:(SquiDBQuery *)query {
  SquiDBCompiledStatement *compiled = [((SquiDBQuery *) nil_chk(query)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  return [self simpleQueryForLongWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
}

- (jlong)insertInternalWithSquiDBInsert:(SquiDBInsert *)insert {
  return SquiDBSquidDatabase_insertInternalWithSquiDBInsert_(self, insert);
}

- (jint)deleteInternalWithSquiDBDelete:(SquiDBDelete *)delete_ {
  return SquiDBSquidDatabase_deleteInternalWithSquiDBDelete_(self, delete_);
}

- (jint)updateInternalWithSquiDBUpdate:(SquiDBUpdate *)update {
  return SquiDBSquidDatabase_updateInternalWithSquiDBUpdate_(self, update);
}

- (void)beginTransaction {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) beginTransaction];
    SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)beginTransactionNonExclusive {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) beginTransactionNonExclusive];
    SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)beginTransactionWithListenerWithSquiDBSquidTransactionListener:(id<SquiDBSquidTransactionListener>)listener {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) beginTransactionWithListenerWithSquiDBSquidTransactionListener:listener];
    SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)beginTransactionWithListenerNonExclusiveWithSquiDBSquidTransactionListener:(id<SquiDBSquidTransactionListener>)listener {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) beginTransactionWithListenerNonExclusiveWithSquiDBSquidTransactionListener:listener];
    SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
  }
  @catch (JavaLangRuntimeException *e) {
    [self releaseNonExclusiveLock];
    @throw e;
  }
}

- (void)setTransactionSuccessful {
  [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) setTransactionSuccessful];
  SquiDBSquidDatabase_TransactionSuccessState_setTransactionSuccessful(nil_chk([((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get]));
}

- (jboolean)inTransaction {
  return SquiDBSquidDatabase_inTransaction(self);
}

- (void)endTransaction {
  SquiDBSquidDatabase_TransactionSuccessState *successState = [((JavaLangThreadLocal *) nil_chk(transactionSuccessState_)) get];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) endTransaction];
  }
  @catch (JavaLangRuntimeException *e) {
    SquiDBSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(nil_chk(successState));
    @throw e;
  }
  @finally {
    [self releaseNonExclusiveLock];
    SquiDBSquidDatabase_TransactionSuccessState_endTransaction(nil_chk(successState));
    if (!SquiDBSquidDatabase_TransactionSuccessState_inTransaction(successState)) {
      SquiDBSquidDatabase_flushAccumulatedNotificationsWithBoolean_(self, successState->outerTransactionSuccess_);
      SquiDBSquidDatabase_TransactionSuccessState_reset(successState);
    }
  }
}

- (jboolean)yieldIfContendedSafely {
  return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) yieldIfContendedSafely];
}

- (jboolean)yieldIfContendedSafelyWithLong:(jlong)sleepAfterYieldDelay {
  return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) yieldIfContendedSafelyWithLong:sleepAfterYieldDelay];
}

- (void)acquireExclusiveLock {
  if ([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) getReadHoldCount] > 0 && [readWriteLock_ getWriteHoldCount] == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Can't acquire an exclusive lock when the calling thread is in a transaction or otherwise holds a non-exclusive lock and not the exclusive lock");
  }
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([readWriteLock_ writeLock])) lock];
}

- (void)releaseExclusiveLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) writeLock])) unlock];
}

- (void)acquireNonExclusiveLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) readLock])) lock];
}

- (void)releaseNonExclusiveLock {
  [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(readWriteLock_)) readLock])) unlock];
}

- (void)setDatabaseWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(self, db);
}

- (SquiDBVersionCode *)readSqliteVersionLockedWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
  return SquiDBSquidDatabase_readSqliteVersionLockedWithSquiDBISQLiteDatabase_(self, db);
}

- (jboolean)tryAddColumnWithSquiDBProperty:(SquiDBProperty *)property {
  if (!SquiDBSquidDatabase_propertyBelongsToTableWithSquiDBProperty_(self, property)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't alter table: property does not belong to a Table");
  }
  SquiDBSquidDatabase_SqlConstructorVisitor *visitor = new_SquiDBSquidDatabase_SqlConstructorVisitor_init();
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@"ALTER TABLE "])) appendWithNSString:((SquiDBTableModelName *) nil_chk(((SquiDBProperty *) nil_chk(property))->tableModelName_))->tableName_])) appendWithNSString:@" ADD "];
  (void) [property acceptWithSquiDBProperty_PropertyVisitor:visitor withId:sql];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)propertyBelongsToTableWithSquiDBProperty:(SquiDBProperty *)property {
  return SquiDBSquidDatabase_propertyBelongsToTableWithSquiDBProperty_(self, property);
}

- (jboolean)tryCreateTableWithSquiDBTable:(SquiDBTable *)table {
  SquiDBSquidDatabase_SqlConstructorVisitor *sqlVisitor = new_SquiDBSquidDatabase_SqlConstructorVisitor_init();
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  [((SquiDBTable *) nil_chk(table)) appendCreateTableSqlWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self) withJavaLangStringBuilder:sql withSquiDBProperty_PropertyVisitor:sqlVisitor];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)tryDropTableWithSquiDBTable:(SquiDBTable *)table {
  return [self tryExecSqlWithNSString:JreStrcat("$$", @"DROP TABLE IF EXISTS ", [((SquiDBTable *) nil_chk(table)) getExpression])];
}

- (jboolean)tryCreateViewWithSquiDBView:(SquiDBView *)view {
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  [((SquiDBView *) nil_chk(view)) createViewSqlWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self) withJavaLangStringBuilder:sql];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)tryDropViewWithSquiDBView:(SquiDBView *)view {
  return [self tryExecSqlWithNSString:JreStrcat("$$", @"DROP VIEW IF EXISTS ", [((SquiDBView *) nil_chk(view)) getExpression])];
}

- (jboolean)tryCreateIndexWithSquiDBIndex:(SquiDBIndex *)index {
  return [self tryCreateIndexWithNSString:[((SquiDBIndex *) nil_chk(index)) getName] withSquiDBTable:[index getTable] withBoolean:[index isUnique] withSquiDBPropertyArray:[index getProperties]];
}

- (jboolean)tryCreateIndexWithNSString:(NSString *)indexName
                       withSquiDBTable:(SquiDBTable *)table
                           withBoolean:(jboolean)unique
               withSquiDBPropertyArray:(IOSObjectArray *)properties {
  if (properties == nil || properties->size_ == 0) {
    [self onErrorWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"Cannot create index %s: no properties specified", [IOSObjectArray newArrayWithObjects:(id[]){ indexName } count:1 type:NSObject_class_()]) withJavaLangThrowable:nil];
    return false;
  }
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  (void) [sql appendWithNSString:@"CREATE "];
  if (unique) {
    (void) [sql appendWithNSString:@"UNIQUE "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@"INDEX IF NOT EXISTS "])) appendWithNSString:indexName])) appendWithNSString:@" ON "])) appendWithNSString:[((SquiDBTable *) nil_chk(table)) getExpression]])) appendWithNSString:@"("];
  {
    IOSObjectArray *a__ = properties;
    SquiDBProperty * const *b__ = a__->buffer_;
    SquiDBProperty * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      SquiDBProperty *p = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:[((SquiDBProperty *) nil_chk(p)) getName]])) appendWithNSString:@","];
    }
  }
  (void) [sql deleteCharAtWithInt:[sql java_length] - 1];
  (void) [sql appendWithNSString:@")"];
  return [self tryExecSqlWithNSString:[sql description]];
}

- (jboolean)tryDropIndexWithSquiDBIndex:(SquiDBIndex *)index {
  return [self tryDropIndexWithNSString:[((SquiDBIndex *) nil_chk(index)) getName]];
}

- (jboolean)tryDropIndexWithNSString:(NSString *)indexName {
  return [self tryExecSqlWithNSString:JreStrcat("$$", @"DROP INDEX IF EXISTS ", indexName)];
}

- (jboolean)tryExecStatementWithSquiDBSqlStatement:(id<SquiDBSqlStatement>)statement {
  SquiDBCompiledStatement *compiled = [((id<SquiDBSqlStatement>) nil_chk(statement)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  return [self tryExecSqlWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
}

- (jboolean)tryExecSqlWithNSString:(NSString *)sql {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) execSQLWithNSString:sql];
    return true;
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:JreStrcat("$$", @"Failed to execute statement: ", sql) withJavaLangThrowable:e];
    return false;
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (void)execSqlOrThrowWithNSString:(NSString *)sql {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) execSQLWithNSString:sql];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (jboolean)tryExecSqlWithNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) execSQLWithNSString:sql withNSObjectArray:bindArgs];
    return true;
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:JreStrcat("$$", @"Failed to execute statement: ", sql) withJavaLangThrowable:e];
    return false;
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (void)execSqlOrThrowWithNSString:(NSString *)sql
                 withNSObjectArray:(IOSObjectArray *)bindArgs {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) execSQLWithNSString:sql withNSObjectArray:bindArgs];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (SquiDBVersionCode *)getSqliteVersion {
  SquiDBVersionCode *toReturn = sqliteVersion_;
  if (toReturn == nil) {
    [self acquireNonExclusiveLock];
    @try {
      @synchronized(databaseInstanceLock_) {
        (void) SquiDBSquidDatabase_getDatabase(self);
        return sqliteVersion_;
      }
    }
    @finally {
      [self releaseNonExclusiveLock];
    }
  }
  return toReturn;
}

- (SquiDBCompileContext *)getCompileContext {
  return SquiDBSquidDatabase_getCompileContext(self);
}

- (void)buildCompileContextWithSquiDBCompileContext_Builder:(SquiDBCompileContext_Builder *)builder {
}

- (id<SquiDBISQLitePreparedStatement>)prepareStatementWithNSString:(NSString *)sql {
  [self acquireNonExclusiveLock];
  @try {
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) prepareStatementWithNSString:sql];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (SquiDBSquidCursor *)queryWithIOSClass:(IOSClass *)modelClass
                         withSquiDBQuery:(SquiDBQuery *)query {
  query = SquiDBSquidDatabase_inferTableForQueryWithIOSClass_withSquiDBQuery_(self, modelClass, query);
  SquiDBCompiledStatement *compiled = [((SquiDBQuery *) nil_chk(query)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  if (((SquiDBCompiledStatement *) nil_chk(compiled))->needsValidation_) {
    NSString *validateSql = [query sqlForValidationWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
    SquiDBSquidDatabase_ensureSqlCompilesWithNSString_(self, validateSql);
  }
  id<SquiDBICursor> cursor = [self rawQueryWithNSString:compiled->sql_ withNSObjectArray:compiled->sqlArgs_];
  return new_SquiDBSquidCursor_initWithSquiDBICursor_withIOSClass_withJavaUtilList_(cursor, modelClass, [query getFields]);
}

- (SquiDBQuery *)inferTableForQueryWithIOSClass:(IOSClass *)modelClass
                                withSquiDBQuery:(SquiDBQuery *)query {
  return SquiDBSquidDatabase_inferTableForQueryWithIOSClass_withSquiDBQuery_(self, modelClass, query);
}

- (void)ensureSqlCompilesWithNSString:(NSString *)sql {
  SquiDBSquidDatabase_ensureSqlCompilesWithNSString_(self, sql);
}

- (SquiDBTableModel *)fetchWithIOSClass:(IOSClass *)modelClass
                               withLong:(jlong)id_
                withSquiDBPropertyArray:(IOSObjectArray *)properties {
  SquiDBSquidCursor *cursor = [self fetchItemByIdWithIOSClass:modelClass withLong:id_ withSquiDBPropertyArray:properties];
  return ((SquiDBTableModel *) [self returnFetchResultWithIOSClass:modelClass withSquiDBSquidCursor:cursor]);
}

- (SquiDBAbstractModel *)fetchByCriterionWithIOSClass:(IOSClass *)modelClass
                                  withSquiDBCriterion:(SquiDBCriterion *)criterion
                              withSquiDBPropertyArray:(IOSObjectArray *)properties {
  SquiDBSquidCursor *cursor = [self fetchFirstItemWithIOSClass:modelClass withSquiDBCriterion:criterion withSquiDBPropertyArray:properties];
  return [self returnFetchResultWithIOSClass:modelClass withSquiDBSquidCursor:cursor];
}

- (SquiDBAbstractModel *)fetchByQueryWithIOSClass:(IOSClass *)modelClass
                                  withSquiDBQuery:(SquiDBQuery *)query {
  SquiDBSquidCursor *cursor = [self fetchFirstItemWithIOSClass:modelClass withSquiDBQuery:query];
  return [self returnFetchResultWithIOSClass:modelClass withSquiDBSquidCursor:cursor];
}

- (SquiDBAbstractModel *)returnFetchResultWithIOSClass:(IOSClass *)modelClass
                                 withSquiDBSquidCursor:(SquiDBSquidCursor *)cursor {
  @try {
    if ([((SquiDBSquidCursor *) nil_chk(cursor)) getCount] == 0) {
      return nil;
    }
    SquiDBAbstractModel *toReturn = [((IOSClass *) nil_chk(modelClass)) newInstance];
    [((SquiDBAbstractModel *) nil_chk(toReturn)) readPropertiesFromCursorWithSquiDBSquidCursor:cursor];
    return toReturn;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @finally {
    [cursor close];
  }
}

- (jboolean)delete__WithIOSClass:(IOSClass *)modelClass
                        withLong:(jlong)id_ {
  SquiDBTable *table = SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
  jint rowsUpdated = SquiDBSquidDatabase_deleteInternalWithSquiDBDelete_(self, [((SquiDBDelete *) nil_chk(SquiDBDelete_fromWithSquiDBTable_(table))) whereWithSquiDBCriterion:[((SquiDBProperty_LongProperty *) nil_chk([((SquiDBTable *) nil_chk(table)) getRowIdProperty])) eqWithId:JavaLangLong_valueOfWithLong_(id_)]]);
  if (rowsUpdated > 0) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, DELETE), nil, table, id_);
  }
  return rowsUpdated > 0;
}

- (jint)deleteWhereWithIOSClass:(IOSClass *)modelClass
            withSquiDBCriterion:(SquiDBCriterion *)where {
  SquiDBTable *table = SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
  SquiDBDelete *delete_ = SquiDBDelete_fromWithSquiDBTable_(table);
  if (where != nil) {
    (void) [((SquiDBDelete *) nil_chk(delete_)) whereWithSquiDBCriterion:where];
  }
  jint rowsUpdated = SquiDBSquidDatabase_deleteInternalWithSquiDBDelete_(self, delete_);
  if (rowsUpdated > 0) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, DELETE), nil, table, SquiDBTableModel_NO_ID);
  }
  return rowsUpdated;
}

- (jint)deleteAllWithIOSClass:(IOSClass *)modelClass {
  return [self deleteWhereWithIOSClass:modelClass withSquiDBCriterion:nil];
}

- (jint)delete__WithSquiDBDelete:(SquiDBDelete *)delete_ {
  jint result = SquiDBSquidDatabase_deleteInternalWithSquiDBDelete_(self, delete_);
  if (result > 0) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, DELETE), nil, [((SquiDBDelete *) nil_chk(delete_)) getTable], SquiDBTableModel_NO_ID);
  }
  return result;
}

- (jint)updateWithSquiDBCriterion:(SquiDBCriterion *)where
             withSquiDBTableModel:(SquiDBTableModel *)template_ {
  return [self updateWithOnConflictWithSquiDBCriterion:where withSquiDBTableModel:template_ withSquiDBTableStatement_ConflictAlgorithm:nil];
}

- (jint)updateAllWithSquiDBTableModel:(SquiDBTableModel *)template_ {
  return [self updateWithSquiDBCriterion:nil withSquiDBTableModel:template_];
}

- (jint)updateWithOnConflictWithSquiDBCriterion:(SquiDBCriterion *)where
                           withSquiDBTableModel:(SquiDBTableModel *)template_
     withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  IOSClass *modelClass = [((SquiDBTableModel *) nil_chk(template_)) java_getClass];
  SquiDBTable *table = SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
  SquiDBUpdate *update = [((SquiDBUpdate *) nil_chk(SquiDBUpdate_tableWithSquiDBTable_(table))) fromTemplateWithSquiDBAbstractModel:template_];
  if (where != nil) {
    (void) [((SquiDBUpdate *) nil_chk(update)) whereWithSquiDBCriterion:where];
  }
  if (conflictAlgorithm != nil) {
    (void) [((SquiDBUpdate *) nil_chk(update)) onConflictWithSquiDBTableStatement_ConflictAlgorithm:conflictAlgorithm];
  }
  jint rowsUpdated = SquiDBSquidDatabase_updateInternalWithSquiDBUpdate_(self, update);
  if (rowsUpdated > 0) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, UPDATE), template_, table, SquiDBTableModel_NO_ID);
  }
  return rowsUpdated;
}

- (jint)updateAllWithOnConflictWithSquiDBTableModel:(SquiDBTableModel *)template_
         withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return [self updateWithOnConflictWithSquiDBCriterion:nil withSquiDBTableModel:template_ withSquiDBTableStatement_ConflictAlgorithm:conflictAlgorithm];
}

- (jint)updateWithSquiDBUpdate:(SquiDBUpdate *)update {
  jint result = SquiDBSquidDatabase_updateInternalWithSquiDBUpdate_(self, update);
  if (result > 0) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, UPDATE), nil, [((SquiDBUpdate *) nil_chk(update)) getTable], SquiDBTableModel_NO_ID);
  }
  return result;
}

- (jboolean)persistWithSquiDBTableModel:(SquiDBTableModel *)item {
  return [self persistWithOnConflictWithSquiDBTableModel:item withSquiDBTableStatement_ConflictAlgorithm:nil];
}

- (jboolean)persistWithOnConflictWithSquiDBTableModel:(SquiDBTableModel *)item
           withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  if (![((SquiDBTableModel *) nil_chk(item)) isSaved]) {
    return SquiDBSquidDatabase_insertRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
  }
  if (![item isModified]) {
    return true;
  }
  return SquiDBSquidDatabase_updateRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
}

- (jboolean)createNewWithSquiDBTableModel:(SquiDBTableModel *)item {
  (void) [((SquiDBTableModel *) nil_chk(item)) setRowIdWithLong:SquiDBTableModel_NO_ID];
  return SquiDBSquidDatabase_insertRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)saveExistingWithSquiDBTableModel:(SquiDBTableModel *)item {
  return SquiDBSquidDatabase_updateRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)insertRowWithSquiDBTableModel:(SquiDBTableModel *)item {
  return SquiDBSquidDatabase_insertRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)insertRowWithSquiDBTableModel:(SquiDBTableModel *)item
withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return SquiDBSquidDatabase_insertRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
}

- (jlong)insertRowLegacyWithSquiDBTableModel:(SquiDBTableModel *)item
                             withSquiDBTable:(SquiDBTable *)table
  withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return SquiDBSquidDatabase_insertRowLegacyWithSquiDBTableModel_withSquiDBTable_withSquiDBTableStatement_ConflictAlgorithm_(self, item, table, conflictAlgorithm);
}

- (jboolean)updateRowWithSquiDBTableModel:(SquiDBTableModel *)item {
  return SquiDBSquidDatabase_updateRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, nil);
}

- (jboolean)updateRowWithSquiDBTableModel:(SquiDBTableModel *)item
withSquiDBTableStatement_ConflictAlgorithm:(SquiDBTableStatement_ConflictAlgorithm *)conflictAlgorithm {
  return SquiDBSquidDatabase_updateRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(self, item, conflictAlgorithm);
}

- (jlong)insertWithSquiDBInsert:(SquiDBInsert *)insert {
  jlong result = SquiDBSquidDatabase_insertInternalWithSquiDBInsert_(self, insert);
  if (result > SquiDBTableModel_NO_ID) {
    jint numInserted = [((SquiDBInsert *) nil_chk(insert)) getNumRows];
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, INSERT), nil, [insert getTable], numInserted == 1 ? result : SquiDBTableModel_NO_ID);
  }
  return result;
}

- (SquiDBSquidCursor *)fetchItemByIdWithIOSClass:(IOSClass *)modelClass
                                        withLong:(jlong)id_
                         withSquiDBPropertyArray:(IOSObjectArray *)properties {
  SquiDBTable *table = SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
  return [self fetchFirstItemWithIOSClass:modelClass withSquiDBCriterion:[((SquiDBProperty_LongProperty *) nil_chk([((SquiDBTable *) nil_chk(table)) getRowIdProperty])) eqWithId:JavaLangLong_valueOfWithLong_(id_)] withSquiDBPropertyArray:properties];
}

- (SquiDBSquidCursor *)fetchFirstItemWithIOSClass:(IOSClass *)modelClass
                              withSquiDBCriterion:(SquiDBCriterion *)criterion
                          withSquiDBPropertyArray:(IOSObjectArray *)properties {
  return [self fetchFirstItemWithIOSClass:modelClass withSquiDBQuery:[((SquiDBQuery *) nil_chk(SquiDBQuery_selectWithSquiDBFieldArray_(properties))) whereWithSquiDBCriterion:criterion]];
}

- (SquiDBSquidCursor *)fetchFirstItemWithIOSClass:(IOSClass *)modelClass
                                  withSquiDBQuery:(SquiDBQuery *)query {
  jboolean immutableQuery = [((SquiDBQuery *) nil_chk(query)) isImmutable];
  SquiDBField *beforeLimit = [query getLimit];
  SquiDBSqlTable *beforeTable = [query getTable];
  query = [query limitWithInt:1];
  SquiDBSquidCursor *cursor = [self queryWithIOSClass:modelClass withSquiDBQuery:query];
  if (!immutableQuery) {
    (void) [((SquiDBQuery *) nil_chk([((SquiDBQuery *) nil_chk(query)) fromWithSquiDBSqlTable:beforeTable])) limitWithSquiDBField:beforeLimit];
  }
  [((SquiDBSquidCursor *) nil_chk(cursor)) moveToFirst];
  return cursor;
}

- (jint)countWithIOSClass:(IOSClass *)modelClass
      withSquiDBCriterion:(SquiDBCriterion *)criterion {
  SquiDBProperty_IntegerProperty *countProperty = SquiDBProperty_IntegerProperty_countProperty();
  SquiDBQuery *query = SquiDBQuery_selectWithSquiDBFieldArray_([IOSObjectArray newArrayWithObjects:(id[]){ countProperty } count:1 type:SquiDBField_class_()]);
  if (criterion != nil) {
    (void) [((SquiDBQuery *) nil_chk(query)) whereWithSquiDBCriterion:criterion];
  }
  query = SquiDBSquidDatabase_inferTableForQueryWithIOSClass_withSquiDBQuery_(self, modelClass, query);
  SquiDBCompiledStatement *compiled = [((SquiDBQuery *) nil_chk(query)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    return (jint) [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) simpleQueryForLongWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

- (jint)countAllWithIOSClass:(IOSClass *)modelClass {
  return [self countWithIOSClass:modelClass withSquiDBCriterion:nil];
}

- (void)registerDataChangedNotifierWithSquiDBDataChangedNotifier:(SquiDBDataChangedNotifier *)notifier {
  if (notifier == nil) {
    return;
  }
  @synchronized(notifiersLock_) {
    id<JavaUtilCollection> tables = [notifier whichTables];
    if (tables == nil || [tables isEmpty]) {
      [((id<JavaUtilList>) nil_chk(globalNotifiers_)) addWithId:notifier];
    }
    else {
      for (SquiDBSqlTable * __strong table in tables) {
        id<JavaUtilList> notifiersForTable = [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) getWithId:table];
        if (notifiersForTable == nil) {
          notifiersForTable = new_JavaUtilArrayList_init();
          (void) [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) putWithId:table withId:notifiersForTable];
        }
        [notifiersForTable addWithId:notifier];
      }
    }
  }
}

- (void)unregisterDataChangedNotifierWithSquiDBDataChangedNotifier:(SquiDBDataChangedNotifier *)notifier {
  if (notifier == nil) {
    return;
  }
  @synchronized(notifiersLock_) {
    id<JavaUtilCollection> tables = [notifier whichTables];
    if (tables == nil || [tables isEmpty]) {
      [((id<JavaUtilList>) nil_chk(globalNotifiers_)) removeWithId:notifier];
    }
    else {
      for (SquiDBSqlTable * __strong table in tables) {
        id<JavaUtilList> notifiersForTable = [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) getWithId:table];
        if (notifiersForTable != nil) {
          [notifiersForTable removeWithId:notifier];
        }
      }
    }
  }
}

- (void)unregisterAllDataChangedNotifiers {
  @synchronized(notifiersLock_) {
    [((id<JavaUtilList>) nil_chk(globalNotifiers_)) clear];
    [((id<JavaUtilMap>) nil_chk(tableNotifiers_)) clear];
  }
}

- (void)setDataChangedNotificationsEnabledWithBoolean:(jboolean)enabled {
  dataChangedNotificationsEnabled_ = enabled;
}

- (jboolean)areDataChangedNotificationsEnabled {
  return dataChangedNotificationsEnabled_;
}

- (void)notifyForTableWithSquiDBDataChangedNotifier_DBOperation:(SquiDBDataChangedNotifier_DBOperation *)op
                                        withSquiDBAbstractModel:(SquiDBAbstractModel *)modelValues
                                             withSquiDBSqlTable:(SquiDBSqlTable *)table
                                                       withLong:(jlong)rowId {
  SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, op, modelValues, table, rowId);
}

- (void)onDataChangedWithJavaUtilList:(id<JavaUtilList>)notifiers
withSquiDBDataChangedNotifier_DBOperation:(SquiDBDataChangedNotifier_DBOperation *)op
              withSquiDBAbstractModel:(SquiDBAbstractModel *)modelValues
                   withSquiDBSqlTable:(SquiDBSqlTable *)table
                             withLong:(jlong)rowId {
  SquiDBSquidDatabase_onDataChangedWithJavaUtilList_withSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, notifiers, op, modelValues, table, rowId);
}

- (void)flushAccumulatedNotificationsWithBoolean:(jboolean)transactionSuccess {
  SquiDBSquidDatabase_flushAccumulatedNotificationsWithBoolean_(self, transactionSuccess);
}

- (void)explainQueryPlanWithIOSClass:(IOSClass *)modelClass
                     withSquiDBQuery:(SquiDBQuery *)query {
  query = SquiDBSquidDatabase_inferTableForQueryWithIOSClass_withSquiDBQuery_(self, modelClass, query);
  SquiDBCompiledStatement *compiled = [((SquiDBQuery *) nil_chk(query)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  id<SquiDBICursor> cursor = [self rawQueryWithNSString:JreStrcat("$$", @"EXPLAIN QUERY PLAN ", ((SquiDBCompiledStatement *) nil_chk(compiled))->sql_) withNSObjectArray:compiled->sqlArgs_];
  @try {
    SquiDBLogger_dWithNSString_withNSString_(SquiDBLogger_LOG_TAG, JreStrcat("$$", @"Query plan for: ", compiled->sql_));
    SquiDBSquidUtilities_dumpCursorWithSquiDBICursor_withInt_(cursor, -1);
  }
  @finally {
    [((id<SquiDBICursor>) nil_chk(cursor)) close];
  }
}

- (jboolean)copyDatabaseWithJavaIoFile:(JavaIoFile *)toDir {
  [self acquireExclusiveLock];
  @try {
    return SquiDBSquidDatabase_copyDatabaseLockedWithJavaIoFile_(self, toDir);
  }
  @finally {
    [self releaseExclusiveLock];
  }
}

- (jboolean)copyDatabaseLockedWithJavaIoFile:(JavaIoFile *)toDir {
  return SquiDBSquidDatabase_copyDatabaseLockedWithJavaIoFile_(self, toDir);
}

- (jboolean)copyFileIfExistsWithJavaIoFile:(JavaIoFile *)inArg
                            withJavaIoFile:(JavaIoFile *)toDir {
  return SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, inArg, toDir);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LSquiDBTable;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LSquiDBView;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LSquiDBIndex;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, "LSquiDBISQLiteOpenHelper;", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBISQLiteOpenHelper;", 0x404, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBSqlTable;", 0x14, 21, 22, -1, 23, -1, -1 },
    { NULL, "LSquiDBTable;", 0x14, 24, 22, -1, 25, -1, -1 },
    { NULL, "LSquiDBISQLiteDatabase;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThreadLocal;", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSString;", 0x11, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 32, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 33, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 40, 38, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 41, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 40, 42, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 3, -1, -1, -1, -1 },
    { NULL, "LSquiDBVersionCode;", 0x2, 55, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 56, 57, -1, 58, -1, -1 },
    { NULL, "Z", 0x2, 59, 57, -1, 58, -1, -1 },
    { NULL, "Z", 0x4, 60, 61, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 62, 61, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 65, 64, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 66, 67, -1, -1, -1, -1 },
    { NULL, "Z", 0x84, 66, 68, -1, 69, -1, -1 },
    { NULL, "Z", 0x4, 70, 67, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 70, 71, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 74, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 71, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 74, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 38, -1, -1, -1, -1 },
    { NULL, "LSquiDBVersionCode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBCompileContext;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 76, 77, -1, -1, -1, -1 },
    { NULL, "LSquiDBISQLitePreparedStatement;", 0x1, 78, 71, -1, -1, -1, -1 },
    { NULL, "LSquiDBSquidCursor;", 0x1, 79, 80, -1, 81, -1, -1 },
    { NULL, "LSquiDBQuery;", 0x2, 82, 80, -1, 83, -1, -1 },
    { NULL, "V", 0x2, 84, 71, -1, -1, -1, -1 },
    { NULL, "LSquiDBTableModel;", 0x81, 85, 86, -1, 87, -1, -1 },
    { NULL, "LSquiDBAbstractModel;", 0x81, 88, 89, -1, 90, -1, -1 },
    { NULL, "LSquiDBAbstractModel;", 0x1, 91, 80, -1, 92, -1, -1 },
    { NULL, "LSquiDBAbstractModel;", 0x4, 93, 94, -1, 95, -1, -1 },
    { NULL, "Z", 0x1, 96, 97, -1, 98, -1, -1 },
    { NULL, "I", 0x1, 99, 100, -1, 101, -1, -1 },
    { NULL, "I", 0x1, 102, 22, -1, 103, -1, -1 },
    { NULL, "I", 0x1, 96, 46, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 104, 105, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 106, 107, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 108, 109, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 110, 111, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 104, 48, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 112, 107, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 113, 111, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 114, 107, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 115, 107, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 116, 107, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 116, 111, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 117, 118, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 119, 107, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 119, 111, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 120, 44, -1, -1, -1, -1 },
    { NULL, "LSquiDBSquidCursor;", 0x84, 121, 86, -1, 122, -1, -1 },
    { NULL, "LSquiDBSquidCursor;", 0x84, 123, 89, -1, 124, -1, -1 },
    { NULL, "LSquiDBSquidCursor;", 0x4, 123, 80, -1, 81, -1, -1 },
    { NULL, "I", 0x1, 125, 100, -1, 126, -1, -1 },
    { NULL, "I", 0x1, 127, 22, -1, 128, -1, -1 },
    { NULL, "V", 0x1, 129, 130, -1, 131, -1, -1 },
    { NULL, "V", 0x1, 132, 130, -1, 131, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 133, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 134, 135, -1, 136, -1, -1 },
    { NULL, "V", 0x2, 137, 138, -1, 139, -1, -1 },
    { NULL, "V", 0x2, 140, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 141, 80, -1, 142, -1, -1 },
    { NULL, "Z", 0x1, 143, 144, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 145, 144, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 146, 147, 148, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setShowSqlWithBoolean:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getVersion);
  methods[3].selector = @selector(getTables);
  methods[4].selector = @selector(getViews);
  methods[5].selector = @selector(getIndexes);
  methods[6].selector = @selector(onTablesCreatedWithSquiDBISQLiteDatabase:);
  methods[7].selector = @selector(onUpgradeWithSquiDBISQLiteDatabase:withInt:withInt:);
  methods[8].selector = @selector(onDowngradeWithSquiDBISQLiteDatabase:withInt:withInt:);
  methods[9].selector = @selector(onMigrationFailedWithSquiDBSquidDatabase_MigrationFailedException:);
  methods[10].selector = @selector(onDatabaseOpenFailedWithJavaLangRuntimeException:withInt:);
  methods[11].selector = @selector(onConfigureWithSquiDBISQLiteDatabase:);
  methods[12].selector = @selector(onOpenWithSquiDBISQLiteDatabase:);
  methods[13].selector = @selector(onCloseWithSquiDBISQLiteDatabase:);
  methods[14].selector = @selector(onErrorWithNSString:withJavaLangThrowable:);
  methods[15].selector = @selector(init);
  methods[16].selector = @selector(registerTableModelsWithSquiDBSqlTableArray:);
  methods[17].selector = @selector(getOpenHelper);
  methods[18].selector = @selector(createOpenHelperWithNSString:withSquiDBSquidDatabase_OpenHelperDelegate:withInt:);
  methods[19].selector = @selector(getDatabasePath);
  methods[20].selector = @selector(getSqlTableWithIOSClass:);
  methods[21].selector = @selector(getTableWithIOSClass:);
  methods[22].selector = @selector(getDatabase);
  methods[23].selector = @selector(openForWritingLocked);
  methods[24].selector = @selector(setPreparedInsertCacheEnabledWithBoolean:);
  methods[25].selector = @selector(newPreparedInsertCacheWithJavaUtilSet:);
  methods[26].selector = @selector(attachDatabaseWithSquiDBSquidDatabase:);
  methods[27].selector = @selector(detachDatabaseWithSquiDBSquidDatabase:);
  methods[28].selector = @selector(attachToWithSquiDBSquidDatabase:);
  methods[29].selector = @selector(detachFromWithSquiDBSquidDatabase:);
  methods[30].selector = @selector(getAttachedName);
  methods[31].selector = @selector(isOpen);
  methods[32].selector = @selector(close);
  methods[33].selector = @selector(clear);
  methods[34].selector = @selector(recreate);
  methods[35].selector = @selector(recreateLocked);
  methods[36].selector = @selector(closeLocked);
  methods[37].selector = @selector(closeAndDeleteLocked);
  methods[38].selector = @selector(closeAndDeleteInternalWithBoolean:);
  methods[39].selector = @selector(clearPreparedStatementCache);
  methods[40].selector = @selector(description);
  methods[41].selector = @selector(rawQueryWithNSString:withNSObjectArray:);
  methods[42].selector = @selector(onShowSqlWithNSString:withNSObjectArray:);
  methods[43].selector = @selector(simpleQueryForStringWithNSString:withNSObjectArray:);
  methods[44].selector = @selector(simpleQueryForLongWithNSString:withNSObjectArray:);
  methods[45].selector = @selector(simpleQueryForStringWithSquiDBQuery:);
  methods[46].selector = @selector(simpleQueryForLongWithSquiDBQuery:);
  methods[47].selector = @selector(insertInternalWithSquiDBInsert:);
  methods[48].selector = @selector(deleteInternalWithSquiDBDelete:);
  methods[49].selector = @selector(updateInternalWithSquiDBUpdate:);
  methods[50].selector = @selector(beginTransaction);
  methods[51].selector = @selector(beginTransactionNonExclusive);
  methods[52].selector = @selector(beginTransactionWithListenerWithSquiDBSquidTransactionListener:);
  methods[53].selector = @selector(beginTransactionWithListenerNonExclusiveWithSquiDBSquidTransactionListener:);
  methods[54].selector = @selector(setTransactionSuccessful);
  methods[55].selector = @selector(inTransaction);
  methods[56].selector = @selector(endTransaction);
  methods[57].selector = @selector(yieldIfContendedSafely);
  methods[58].selector = @selector(yieldIfContendedSafelyWithLong:);
  methods[59].selector = @selector(acquireExclusiveLock);
  methods[60].selector = @selector(releaseExclusiveLock);
  methods[61].selector = @selector(acquireNonExclusiveLock);
  methods[62].selector = @selector(releaseNonExclusiveLock);
  methods[63].selector = @selector(setDatabaseWithSquiDBISQLiteDatabase:);
  methods[64].selector = @selector(readSqliteVersionLockedWithSquiDBISQLiteDatabase:);
  methods[65].selector = @selector(tryAddColumnWithSquiDBProperty:);
  methods[66].selector = @selector(propertyBelongsToTableWithSquiDBProperty:);
  methods[67].selector = @selector(tryCreateTableWithSquiDBTable:);
  methods[68].selector = @selector(tryDropTableWithSquiDBTable:);
  methods[69].selector = @selector(tryCreateViewWithSquiDBView:);
  methods[70].selector = @selector(tryDropViewWithSquiDBView:);
  methods[71].selector = @selector(tryCreateIndexWithSquiDBIndex:);
  methods[72].selector = @selector(tryCreateIndexWithNSString:withSquiDBTable:withBoolean:withSquiDBPropertyArray:);
  methods[73].selector = @selector(tryDropIndexWithSquiDBIndex:);
  methods[74].selector = @selector(tryDropIndexWithNSString:);
  methods[75].selector = @selector(tryExecStatementWithSquiDBSqlStatement:);
  methods[76].selector = @selector(tryExecSqlWithNSString:);
  methods[77].selector = @selector(execSqlOrThrowWithNSString:);
  methods[78].selector = @selector(tryExecSqlWithNSString:withNSObjectArray:);
  methods[79].selector = @selector(execSqlOrThrowWithNSString:withNSObjectArray:);
  methods[80].selector = @selector(getSqliteVersion);
  methods[81].selector = @selector(getCompileContext);
  methods[82].selector = @selector(buildCompileContextWithSquiDBCompileContext_Builder:);
  methods[83].selector = @selector(prepareStatementWithNSString:);
  methods[84].selector = @selector(queryWithIOSClass:withSquiDBQuery:);
  methods[85].selector = @selector(inferTableForQueryWithIOSClass:withSquiDBQuery:);
  methods[86].selector = @selector(ensureSqlCompilesWithNSString:);
  methods[87].selector = @selector(fetchWithIOSClass:withLong:withSquiDBPropertyArray:);
  methods[88].selector = @selector(fetchByCriterionWithIOSClass:withSquiDBCriterion:withSquiDBPropertyArray:);
  methods[89].selector = @selector(fetchByQueryWithIOSClass:withSquiDBQuery:);
  methods[90].selector = @selector(returnFetchResultWithIOSClass:withSquiDBSquidCursor:);
  methods[91].selector = @selector(delete__WithIOSClass:withLong:);
  methods[92].selector = @selector(deleteWhereWithIOSClass:withSquiDBCriterion:);
  methods[93].selector = @selector(deleteAllWithIOSClass:);
  methods[94].selector = @selector(delete__WithSquiDBDelete:);
  methods[95].selector = @selector(updateWithSquiDBCriterion:withSquiDBTableModel:);
  methods[96].selector = @selector(updateAllWithSquiDBTableModel:);
  methods[97].selector = @selector(updateWithOnConflictWithSquiDBCriterion:withSquiDBTableModel:withSquiDBTableStatement_ConflictAlgorithm:);
  methods[98].selector = @selector(updateAllWithOnConflictWithSquiDBTableModel:withSquiDBTableStatement_ConflictAlgorithm:);
  methods[99].selector = @selector(updateWithSquiDBUpdate:);
  methods[100].selector = @selector(persistWithSquiDBTableModel:);
  methods[101].selector = @selector(persistWithOnConflictWithSquiDBTableModel:withSquiDBTableStatement_ConflictAlgorithm:);
  methods[102].selector = @selector(createNewWithSquiDBTableModel:);
  methods[103].selector = @selector(saveExistingWithSquiDBTableModel:);
  methods[104].selector = @selector(insertRowWithSquiDBTableModel:);
  methods[105].selector = @selector(insertRowWithSquiDBTableModel:withSquiDBTableStatement_ConflictAlgorithm:);
  methods[106].selector = @selector(insertRowLegacyWithSquiDBTableModel:withSquiDBTable:withSquiDBTableStatement_ConflictAlgorithm:);
  methods[107].selector = @selector(updateRowWithSquiDBTableModel:);
  methods[108].selector = @selector(updateRowWithSquiDBTableModel:withSquiDBTableStatement_ConflictAlgorithm:);
  methods[109].selector = @selector(insertWithSquiDBInsert:);
  methods[110].selector = @selector(fetchItemByIdWithIOSClass:withLong:withSquiDBPropertyArray:);
  methods[111].selector = @selector(fetchFirstItemWithIOSClass:withSquiDBCriterion:withSquiDBPropertyArray:);
  methods[112].selector = @selector(fetchFirstItemWithIOSClass:withSquiDBQuery:);
  methods[113].selector = @selector(countWithIOSClass:withSquiDBCriterion:);
  methods[114].selector = @selector(countAllWithIOSClass:);
  methods[115].selector = @selector(registerDataChangedNotifierWithSquiDBDataChangedNotifier:);
  methods[116].selector = @selector(unregisterDataChangedNotifierWithSquiDBDataChangedNotifier:);
  methods[117].selector = @selector(unregisterAllDataChangedNotifiers);
  methods[118].selector = @selector(setDataChangedNotificationsEnabledWithBoolean:);
  methods[119].selector = @selector(areDataChangedNotificationsEnabled);
  methods[120].selector = @selector(notifyForTableWithSquiDBDataChangedNotifier_DBOperation:withSquiDBAbstractModel:withSquiDBSqlTable:withLong:);
  methods[121].selector = @selector(onDataChangedWithJavaUtilList:withSquiDBDataChangedNotifier_DBOperation:withSquiDBAbstractModel:withSquiDBSqlTable:withLong:);
  methods[122].selector = @selector(flushAccumulatedNotificationsWithBoolean:);
  methods[123].selector = @selector(explainQueryPlanWithIOSClass:withSquiDBQuery:);
  methods[124].selector = @selector(copyDatabaseWithJavaIoFile:);
  methods[125].selector = @selector(copyDatabaseLockedWithJavaIoFile:);
  methods[126].selector = @selector(copyFileIfExistsWithJavaIoFile:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "showSql_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "STRING_BUILDER_INITIAL_CAPACITY", "I", .constantValue.asInt = SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "trackedPreparedInserts_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 149, -1 },
    { "preparedInsertCache_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 150, -1 },
    { "preparedInsertCacheEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attachedTo_", "LSquiDBSquidDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readWriteLock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "databaseInstanceLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "helper_", "LSquiDBISQLiteOpenHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "database_", "LSquiDBISQLiteDatabase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sqliteVersion_", "LSquiDBVersionCode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tableMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 151, -1 },
    { "isInMigration_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isInMigrationFailedHook_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "databaseOpenFailedRetryCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transactionSuccessState_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 152, -1 },
    { "notifiersLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dataChangedNotificationsEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "globalNotifiers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 153, -1 },
    { "tableNotifiers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 154, -1 },
    { "notifierAccumulator_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 155, -1 },
  };
  static const void *ptrTable[] = { "setShowSql", "Z", "onTablesCreated", "LSquiDBISQLiteDatabase;", "onUpgrade", "LSquiDBISQLiteDatabase;II", "onDowngrade", "onMigrationFailed", "LSquiDBSquidDatabase_MigrationFailedException;", "onDatabaseOpenFailed", "LJavaLangRuntimeException;I", "onConfigure", "onOpen", "onClose", "onError", "LNSString;LJavaLangThrowable;", "registerTableModels", "[LSquiDBSqlTable;", "<T:Lcom/yahoo/squidb/sql/SqlTable<*>;>([TT;)V", "createOpenHelper", "LNSString;LSquiDBSquidDatabase_OpenHelperDelegate;I", "getSqlTable", "LIOSClass;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;)Lcom/yahoo/squidb/sql/SqlTable<*>;", "getTable", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;)Lcom/yahoo/squidb/sql/Table;", "setPreparedInsertCacheEnabled", "newPreparedInsertCache", "LJavaUtilSet;", "(Ljava/util/Set<Lcom/yahoo/squidb/data/ISQLitePreparedStatement;>;)Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/PreparedInsertCache;>;", "attachDatabase", "LSquiDBSquidDatabase;", "detachDatabase", "attachTo", "detachFrom", "closeAndDeleteInternal", "toString", "rawQuery", "LNSString;[LNSObject;", "onShowSql", "simpleQueryForString", "simpleQueryForLong", "LSquiDBQuery;", "insertInternal", "LSquiDBInsert;", "deleteInternal", "LSquiDBDelete;", "updateInternal", "LSquiDBUpdate;", "beginTransactionWithListener", "LSquiDBSquidTransactionListener;", "beginTransactionWithListenerNonExclusive", "yieldIfContendedSafely", "J", "setDatabase", "readSqliteVersionLocked", "tryAddColumn", "LSquiDBProperty;", "(Lcom/yahoo/squidb/sql/Property<*>;)Z", "propertyBelongsToTable", "tryCreateTable", "LSquiDBTable;", "tryDropTable", "tryCreateView", "LSquiDBView;", "tryDropView", "tryCreateIndex", "LSquiDBIndex;", "LNSString;LSquiDBTable;Z[LSquiDBProperty;", "(Ljava/lang/String;Lcom/yahoo/squidb/sql/Table;Z[Lcom/yahoo/squidb/sql/Property<*>;)Z", "tryDropIndex", "LNSString;", "tryExecStatement", "LSquiDBSqlStatement;", "tryExecSql", "execSqlOrThrow", "buildCompileContext", "LSquiDBCompileContext_Builder;", "prepareStatement", "query", "LIOSClass;LSquiDBQuery;", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Query;)Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;", "inferTableForQuery", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/Query;)Lcom/yahoo/squidb/sql/Query;", "ensureSqlCompiles", "fetch", "LIOSClass;J[LSquiDBProperty;", "<TYPE:Lcom/yahoo/squidb/data/TableModel;>(Ljava/lang/Class<TTYPE;>;J[Lcom/yahoo/squidb/sql/Property<*>;)TTYPE;", "fetchByCriterion", "LIOSClass;LSquiDBCriterion;[LSquiDBProperty;", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Criterion;[Lcom/yahoo/squidb/sql/Property<*>;)TTYPE;", "fetchByQuery", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Query;)TTYPE;", "returnFetchResult", "LIOSClass;LSquiDBSquidCursor;", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;)TTYPE;", "delete", "LIOSClass;J", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;J)Z", "deleteWhere", "LIOSClass;LSquiDBCriterion;", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;Lcom/yahoo/squidb/sql/Criterion;)I", "deleteAll", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/TableModel;>;)I", "update", "LSquiDBCriterion;LSquiDBTableModel;", "updateAll", "LSquiDBTableModel;", "updateWithOnConflict", "LSquiDBCriterion;LSquiDBTableModel;LSquiDBTableStatement_ConflictAlgorithm;", "updateAllWithOnConflict", "LSquiDBTableModel;LSquiDBTableStatement_ConflictAlgorithm;", "persist", "persistWithOnConflict", "createNew", "saveExisting", "insertRow", "insertRowLegacy", "LSquiDBTableModel;LSquiDBTable;LSquiDBTableStatement_ConflictAlgorithm;", "updateRow", "insert", "fetchItemById", "<TYPE:Lcom/yahoo/squidb/data/TableModel;>(Ljava/lang/Class<TTYPE;>;J[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;", "fetchFirstItem", "<TYPE:Lcom/yahoo/squidb/data/AbstractModel;>(Ljava/lang/Class<TTYPE;>;Lcom/yahoo/squidb/sql/Criterion;[Lcom/yahoo/squidb/sql/Property<*>;)Lcom/yahoo/squidb/data/SquidCursor<TTYPE;>;", "count", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/Criterion;)I", "countAll", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;)I", "registerDataChangedNotifier", "LSquiDBDataChangedNotifier;", "(Lcom/yahoo/squidb/data/DataChangedNotifier<*>;)V", "unregisterDataChangedNotifier", "setDataChangedNotificationsEnabled", "notifyForTable", "LSquiDBDataChangedNotifier_DBOperation;LSquiDBAbstractModel;LSquiDBSqlTable;J", "(Lcom/yahoo/squidb/data/DataChangedNotifier$DBOperation;Lcom/yahoo/squidb/data/AbstractModel;Lcom/yahoo/squidb/sql/SqlTable<*>;J)V", "onDataChanged", "LJavaUtilList;LSquiDBDataChangedNotifier_DBOperation;LSquiDBAbstractModel;LSquiDBSqlTable;J", "(Ljava/util/List<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;Lcom/yahoo/squidb/data/DataChangedNotifier$DBOperation;Lcom/yahoo/squidb/data/AbstractModel;Lcom/yahoo/squidb/sql/SqlTable<*>;J)V", "flushAccumulatedNotifications", "explainQueryPlan", "(Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/Query;)V", "copyDatabase", "LJavaIoFile;", "copyDatabaseLocked", "copyFileIfExists", "LJavaIoFile;LJavaIoFile;", "LJavaIoIOException;", "Ljava/util/Set<Lcom/yahoo/squidb/data/ISQLitePreparedStatement;>;", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/PreparedInsertCache;>;", "Ljava/util/Map<Ljava/lang/Class<+Lcom/yahoo/squidb/data/AbstractModel;>;Lcom/yahoo/squidb/sql/SqlTable<*>;>;", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/SquidDatabase$TransactionSuccessState;>;", "Ljava/util/List<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;", "Ljava/util/Map<Lcom/yahoo/squidb/sql/SqlTable<*>;Ljava/util/List<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;>;", "Ljava/lang/ThreadLocal<Ljava/util/Set<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;>;", "LSquiDBSquidDatabase_TransactionSuccessState;LSquiDBSquidDatabase_OpenHelperDelegate;LSquiDBSquidDatabase_SqlConstructorVisitor;LSquiDBSquidDatabase_RecreateDuringMigrationException;LSquiDBSquidDatabase_MigrationFailedException;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase = { "SquidDatabase", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x401, 127, 21, -1, 156, -1, -1, -1 };
  return &_SquiDBSquidDatabase;
}

@end

void SquiDBSquidDatabase_init(SquiDBSquidDatabase *self) {
  NSObject_init(self);
  self->showSql_ = false;
  self->trackedPreparedInserts_ = JavaUtilCollections_newSetFromMapWithJavaUtilMap_(new_JavaUtilConcurrentConcurrentHashMap_init());
  self->preparedInsertCache_ = SquiDBSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(self, self->trackedPreparedInserts_);
  self->preparedInsertCacheEnabled_ = false;
  self->attachedTo_ = nil;
  self->readWriteLock_ = new_JavaUtilConcurrentLocksReentrantReadWriteLock_init();
  self->databaseInstanceLock_ = new_NSObject_init();
  self->helper_ = nil;
  self->database_ = nil;
  self->sqliteVersion_ = nil;
  self->tableMap_ = new_JavaUtilHashMap_init();
  self->isInMigration_ = false;
  self->isInMigrationFailedHook_ = false;
  self->databaseOpenFailedRetryCount_ = 0;
  self->transactionSuccessState_ = new_SquiDBSquidDatabase_2_init();
  self->notifiersLock_ = new_NSObject_init();
  self->dataChangedNotificationsEnabled_ = true;
  self->globalNotifiers_ = new_JavaUtilArrayList_init();
  self->tableNotifiers_ = new_JavaUtilHashMap_init();
  self->notifierAccumulator_ = new_SquiDBSquidDatabase_3_init();
  SquiDBSquidDatabase_registerTableModelsWithSquiDBSqlTableArray_(self, [self getTables]);
  SquiDBSquidDatabase_registerTableModelsWithSquiDBSqlTableArray_(self, [self getViews]);
}

void SquiDBSquidDatabase_registerTableModelsWithSquiDBSqlTableArray_(SquiDBSquidDatabase *self, IOSObjectArray *tables) {
  if (tables != nil) {
    {
      IOSObjectArray *a__ = tables;
      SquiDBSqlTable * const *b__ = a__->buffer_;
      SquiDBSqlTable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        SquiDBSqlTable *table = *b__++;
        if ([((SquiDBSqlTable *) nil_chk(table)) getModelClass] != nil && ![((id<JavaUtilMap>) nil_chk(self->tableMap_)) containsKeyWithId:[table getModelClass]]) {
          (void) [((id<JavaUtilMap>) nil_chk(self->tableMap_)) putWithId:[table getModelClass] withId:table];
        }
      }
    }
  }
}

id<SquiDBISQLiteOpenHelper> SquiDBSquidDatabase_getOpenHelper(SquiDBSquidDatabase *self) {
  @synchronized(self) {
    if (self->helper_ == nil) {
      self->helper_ = [self createOpenHelperWithNSString:[self getName] withSquiDBSquidDatabase_OpenHelperDelegate:new_SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(self) withInt:[self getVersion]];
    }
    return self->helper_;
  }
}

SquiDBSqlTable *SquiDBSquidDatabase_getSqlTableWithIOSClass_(SquiDBSquidDatabase *self, IOSClass *modelClass) {
  IOSClass *type = modelClass;
  SquiDBSqlTable *table;
  while ((table = [((id<JavaUtilMap>) nil_chk(self->tableMap_)) getWithId:type]) == nil && type != SquiDBAbstractModel_class_() && type != NSObject_class_()) {
    type = [((IOSClass *) nil_chk(type)) getSuperclass];
  }
  if (table != nil) {
    return table;
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Unknown model class ", modelClass));
}

SquiDBTable *SquiDBSquidDatabase_getTableWithIOSClass_(SquiDBSquidDatabase *self, IOSClass *modelClass) {
  return (SquiDBTable *) cast_chk(SquiDBSquidDatabase_getSqlTableWithIOSClass_(self, modelClass), [SquiDBTable class]);
}

id<SquiDBISQLiteDatabase> SquiDBSquidDatabase_getDatabase(SquiDBSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    if (self->database_ == nil) {
      SquiDBSquidDatabase_openForWritingLocked(self);
    }
    return self->database_;
  }
}

void SquiDBSquidDatabase_openForWritingLocked(SquiDBSquidDatabase *self) {
  jboolean areDataChangedNotificationsEnabled = [self areDataChangedNotificationsEnabled];
  [self setDataChangedNotificationsEnabledWithBoolean:false];
  @try {
    @try {
      id<SquiDBISQLiteDatabase> db = [((id<SquiDBISQLiteOpenHelper>) nil_chk(SquiDBSquidDatabase_getOpenHelper(self))) openForWriting];
      SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(self, db);
    }
    @catch (SquiDBSquidDatabase_RecreateDuringMigrationException *recreate) {
      SquiDBSquidDatabase_recreateLocked(self);
    }
    @catch (SquiDBSquidDatabase_MigrationFailedException *fail) {
      [self onErrorWithNSString:[fail getMessage] withJavaLangThrowable:fail];
      self->isInMigrationFailedHook_ = true;
      @try {
        if (!SquiDBSquidDatabase_isOpen(self)) {
          SquiDBSquidDatabase_closeLocked(self);
        }
        [self onMigrationFailedWithSquiDBSquidDatabase_MigrationFailedException:fail];
      }
      @finally {
        self->isInMigrationFailedHook_ = false;
      }
    }
    if (!SquiDBSquidDatabase_isOpen(self)) {
      SquiDBSquidDatabase_closeLocked(self);
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Failed to open database");
    }
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:JreStrcat("$$", @"Failed to open database: ", [self getName]) withJavaLangThrowable:e];
    SquiDBSquidDatabase_closeLocked(self);
    jint retryCount = ++self->databaseOpenFailedRetryCount_;
    @try {
      [self onDatabaseOpenFailedWithJavaLangRuntimeException:e withInt:retryCount];
      if (!SquiDBSquidDatabase_isOpen(self)) {
        SquiDBSquidDatabase_closeLocked(self);
        @throw e;
      }
    }
    @finally {
      self->databaseOpenFailedRetryCount_ = 0;
    }
  }
  @finally {
    [self setDataChangedNotificationsEnabledWithBoolean:areDataChangedNotificationsEnabled];
  }
}

JavaLangThreadLocal *SquiDBSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(SquiDBSquidDatabase *self, id<JavaUtilSet> openStatementTracking) {
  return new_SquiDBSquidDatabase_1_initWithJavaUtilSet_(openStatementTracking);
}

NSString *SquiDBSquidDatabase_attachToWithSquiDBSquidDatabase_(SquiDBSquidDatabase *self, SquiDBSquidDatabase *attachTo) {
  if (self->attachedTo_ != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Database ", [self getName], @" is already attached to ", [((SquiDBSquidDatabase *) nil_chk(self->attachedTo_)) getName]));
  }
  if (SquiDBSquidDatabase_inTransaction(self)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$$$$", @"Cannot attach database ", [self getName], @" to ", [((SquiDBSquidDatabase *) nil_chk(attachTo)) getName], @" -- ", [self getName], @" is in a transaction on the calling thread"));
  }
  [self acquireExclusiveLock];
  NSString *attachedAs = SquiDBSquidDatabase_getAttachedName(self);
  if (![((SquiDBSquidDatabase *) nil_chk(attachTo)) tryExecSqlWithNSString:JreStrcat("$$$$C", @"ATTACH '", [self getDatabasePath], @"' AS '", attachedAs, '\'')]) {
    [self releaseExclusiveLock];
    return nil;
  }
  else {
    self->attachedTo_ = attachTo;
    return attachedAs;
  }
}

jboolean SquiDBSquidDatabase_detachFromWithSquiDBSquidDatabase_(SquiDBSquidDatabase *self, SquiDBSquidDatabase *detachFrom) {
  if ([((SquiDBSquidDatabase *) nil_chk(detachFrom)) tryExecSqlWithNSString:JreStrcat("$$C", @"DETACH '", SquiDBSquidDatabase_getAttachedName(self), '\'')]) {
    self->attachedTo_ = nil;
    [self releaseExclusiveLock];
    return true;
  }
  return false;
}

NSString *SquiDBSquidDatabase_getAttachedName(SquiDBSquidDatabase *self) {
  return [((NSString *) nil_chk([self getName])) java_replace:'.' withChar:'_'];
}

jboolean SquiDBSquidDatabase_isOpen(SquiDBSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    return self->database_ != nil && [self->database_ isOpen];
  }
}

void SquiDBSquidDatabase_recreateLocked(SquiDBSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    SquiDBSquidDatabase_closeAndDeleteLocked(self);
    (void) SquiDBSquidDatabase_getDatabase(self);
  }
}

void SquiDBSquidDatabase_closeLocked(SquiDBSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    SquiDBSquidDatabase_closeAndDeleteInternalWithBoolean_(self, false);
  }
}

void SquiDBSquidDatabase_closeAndDeleteLocked(SquiDBSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    SquiDBSquidDatabase_closeAndDeleteInternalWithBoolean_(self, true);
  }
}

void SquiDBSquidDatabase_closeAndDeleteInternalWithBoolean_(SquiDBSquidDatabase *self, jboolean deleteAfterClose) {
  SquiDBSquidDatabase_clearPreparedStatementCache(self);
  if (SquiDBSquidDatabase_isOpen(self)) {
    [self onCloseWithSquiDBISQLiteDatabase:self->database_];
    [((id<SquiDBISQLiteDatabase>) nil_chk(self->database_)) close];
  }
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(self, nil);
  if (deleteAfterClose) {
    [((id<SquiDBISQLiteOpenHelper>) nil_chk(SquiDBSquidDatabase_getOpenHelper(self))) deleteDatabase];
  }
  self->helper_ = nil;
}

void SquiDBSquidDatabase_clearPreparedStatementCache(SquiDBSquidDatabase *self) {
  for (id<SquiDBISQLitePreparedStatement> __strong statement in nil_chk(self->trackedPreparedInserts_)) {
    [((id<SquiDBISQLitePreparedStatement>) nil_chk(statement)) close];
  }
  [self->trackedPreparedInserts_ clear];
  self->preparedInsertCache_ = SquiDBSquidDatabase_newPreparedInsertCacheWithJavaUtilSet_(self, self->trackedPreparedInserts_);
}

void SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(SquiDBSquidDatabase *self, NSString *sql, IOSObjectArray *sqlArgs) {
  NSString *argsAsList = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(sqlArgs))) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(SquiDBSquidDatabase_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_joiningWithJavaLangCharSequence_(@",")];
  SquiDBLogger_dWithNSString_withNSString_(SquiDBLogger_LOG_TAG, JreStrcat("$$$$C", @"SQL: ", sql, @" [", argsAsList, ']'));
}

jlong SquiDBSquidDatabase_insertInternalWithSquiDBInsert_(SquiDBSquidDatabase *self, SquiDBInsert *insert) {
  SquiDBCompiledStatement *compiled = [((SquiDBInsert *) nil_chk(insert)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    if (self->showSql_) {
      SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(self, ((SquiDBCompiledStatement *) nil_chk(compiled))->sql_, compiled->sqlArgs_);
    }
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) executeInsertWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jint SquiDBSquidDatabase_deleteInternalWithSquiDBDelete_(SquiDBSquidDatabase *self, SquiDBDelete *delete_) {
  SquiDBCompiledStatement *compiled = [((SquiDBDelete *) nil_chk(delete_)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    if (self->showSql_) {
      SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(self, ((SquiDBCompiledStatement *) nil_chk(compiled))->sql_, compiled->sqlArgs_);
    }
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) executeUpdateDeleteWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jint SquiDBSquidDatabase_updateInternalWithSquiDBUpdate_(SquiDBSquidDatabase *self, SquiDBUpdate *update) {
  SquiDBCompiledStatement *compiled = [((SquiDBUpdate *) nil_chk(update)) compileWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(self)];
  [self acquireNonExclusiveLock];
  @try {
    if (self->showSql_) {
      SquiDBSquidDatabase_onShowSqlWithNSString_withNSObjectArray_(self, ((SquiDBCompiledStatement *) nil_chk(compiled))->sql_, compiled->sqlArgs_);
    }
    return [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) executeUpdateDeleteWithNSString:((SquiDBCompiledStatement *) nil_chk(compiled))->sql_ withNSObjectArray:compiled->sqlArgs_];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jboolean SquiDBSquidDatabase_inTransaction(SquiDBSquidDatabase *self) {
  @synchronized(self->databaseInstanceLock_) {
    return self->database_ != nil && [self->database_ inTransaction];
  }
}

void SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(SquiDBSquidDatabase *self, id<SquiDBISQLiteDatabase> db) {
  @synchronized(self->databaseInstanceLock_) {
    if (self->database_ != nil && db != nil && [db getWrappedObject] == [((id<SquiDBISQLiteDatabase>) nil_chk(self->database_)) getWrappedObject]) {
      return;
    }
    self->sqliteVersion_ = db != nil ? SquiDBSquidDatabase_readSqliteVersionLockedWithSquiDBISQLiteDatabase_(self, db) : nil;
    self->database_ = db;
  }
}

SquiDBVersionCode *SquiDBSquidDatabase_readSqliteVersionLockedWithSquiDBISQLiteDatabase_(SquiDBSquidDatabase *self, id<SquiDBISQLiteDatabase> db) {
  @try {
    NSString *versionString = [((id<SquiDBISQLiteDatabase>) nil_chk(db)) simpleQueryForStringWithNSString:@"select sqlite_version()" withNSObjectArray:nil];
    return SquiDBVersionCode_parseWithNSString_(versionString);
  }
  @catch (JavaLangRuntimeException *e) {
    [self onErrorWithNSString:@"Failed to read sqlite version" withJavaLangThrowable:e];
    @throw e;
  }
}

jboolean SquiDBSquidDatabase_propertyBelongsToTableWithSquiDBProperty_(SquiDBSquidDatabase *self, SquiDBProperty *property) {
  return ((SquiDBTableModelName *) nil_chk(((SquiDBProperty *) nil_chk(property))->tableModelName_))->modelClass_ != nil && [SquiDBTableModel_class_() isAssignableFrom:property->tableModelName_->modelClass_] && !SquiDBSqlUtils_isEmptyWithNSString_(property->tableModelName_->tableName_);
}

SquiDBCompileContext *SquiDBSquidDatabase_getCompileContext(SquiDBSquidDatabase *self) {
  SquiDBCompileContext_Builder *builder = new_SquiDBCompileContext_Builder_initWithSquiDBVersionCode_([self getSqliteVersion]);
  [self buildCompileContextWithSquiDBCompileContext_Builder:builder];
  return [builder build];
}

SquiDBQuery *SquiDBSquidDatabase_inferTableForQueryWithIOSClass_withSquiDBQuery_(SquiDBSquidDatabase *self, IOSClass *modelClass, SquiDBQuery *query) {
  if (![((SquiDBQuery *) nil_chk(query)) hasTable] && modelClass != nil) {
    SquiDBSqlTable *table = SquiDBSquidDatabase_getSqlTableWithIOSClass_(self, modelClass);
    if (table == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Query has no FROM clause and model class ", [modelClass getSimpleName], @" has no associated table"));
    }
    query = [query fromWithSquiDBSqlTable:table];
  }
  return query;
}

void SquiDBSquidDatabase_ensureSqlCompilesWithNSString_(SquiDBSquidDatabase *self, NSString *sql) {
  [self acquireNonExclusiveLock];
  @try {
    [((id<SquiDBISQLiteDatabase>) nil_chk(SquiDBSquidDatabase_getDatabase(self))) ensureSqlCompilesWithNSString:sql];
  }
  @finally {
    [self releaseNonExclusiveLock];
  }
}

jboolean SquiDBSquidDatabase_insertRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(SquiDBSquidDatabase *self, SquiDBTableModel *item, SquiDBTableStatement_ConflictAlgorithm *conflictAlgorithm) {
  IOSClass *modelClass = [((SquiDBTableModel *) nil_chk(item)) java_getClass];
  SquiDBTable *table = SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
  jlong newRow;
  if (self->preparedInsertCacheEnabled_) {
    [self acquireNonExclusiveLock];
    @try {
      SquiDBPreparedInsertCache *insertCache = [((JavaLangThreadLocal *) nil_chk(self->preparedInsertCache_)) get];
      id<SquiDBISQLitePreparedStatement> preparedStatement = [((SquiDBPreparedInsertCache *) nil_chk(insertCache)) getPreparedInsertWithSquiDBSquidDatabase:self withSquiDBTable:table withSquiDBTableStatement_ConflictAlgorithm:conflictAlgorithm];
      [item bindValuesForInsertWithSquiDBTable:table withSquiDBISQLitePreparedStatement:preparedStatement];
      newRow = [((id<SquiDBISQLitePreparedStatement>) nil_chk(preparedStatement)) executeInsert];
    }
    @finally {
      [self releaseNonExclusiveLock];
    }
  }
  else {
    newRow = SquiDBSquidDatabase_insertRowLegacyWithSquiDBTableModel_withSquiDBTable_withSquiDBTableStatement_ConflictAlgorithm_(self, item, table, conflictAlgorithm);
  }
  jboolean result = newRow > 0;
  if (result) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, INSERT), item, table, newRow);
    (void) [item setRowIdWithLong:newRow];
    [item markSaved];
  }
  return result;
}

jlong SquiDBSquidDatabase_insertRowLegacyWithSquiDBTableModel_withSquiDBTable_withSquiDBTableStatement_ConflictAlgorithm_(SquiDBSquidDatabase *self, SquiDBTableModel *item, SquiDBTable *table, SquiDBTableStatement_ConflictAlgorithm *conflictAlgorithm) {
  SquiDBValuesStorage *mergedValues = [((SquiDBTableModel *) nil_chk(item)) getMergedValues];
  if ([((SquiDBValuesStorage *) nil_chk(mergedValues)) size] == 0) {
    return -1;
  }
  SquiDBInsert *insert = [((SquiDBInsert *) nil_chk(SquiDBInsert_intoWithSquiDBTable_(table))) fromValuesWithSquiDBValuesStorage:mergedValues];
  if (conflictAlgorithm != nil) {
    (void) [((SquiDBInsert *) nil_chk(insert)) onConflictWithSquiDBTableStatement_ConflictAlgorithm:conflictAlgorithm];
  }
  return SquiDBSquidDatabase_insertInternalWithSquiDBInsert_(self, insert);
}

jboolean SquiDBSquidDatabase_updateRowWithSquiDBTableModel_withSquiDBTableStatement_ConflictAlgorithm_(SquiDBSquidDatabase *self, SquiDBTableModel *item, SquiDBTableStatement_ConflictAlgorithm *conflictAlgorithm) {
  if (![((SquiDBTableModel *) nil_chk(item)) isModified]) {
    return true;
  }
  if (![item isSaved]) {
    return false;
  }
  IOSClass *modelClass = [item java_getClass];
  SquiDBTable *table = SquiDBSquidDatabase_getTableWithIOSClass_(self, modelClass);
  SquiDBUpdate *update = [((SquiDBUpdate *) nil_chk([((SquiDBUpdate *) nil_chk(SquiDBUpdate_tableWithSquiDBTable_(table))) fromTemplateWithSquiDBAbstractModel:item])) whereWithSquiDBCriterion:[((SquiDBProperty_LongProperty *) nil_chk([((SquiDBTable *) nil_chk(table)) getRowIdProperty])) eqWithId:JavaLangLong_valueOfWithLong_([item getRowId])]];
  if (conflictAlgorithm != nil) {
    (void) [((SquiDBUpdate *) nil_chk(update)) onConflictWithSquiDBTableStatement_ConflictAlgorithm:conflictAlgorithm];
  }
  jboolean result = SquiDBSquidDatabase_updateInternalWithSquiDBUpdate_(self, update) > 0;
  if (result) {
    SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, JreLoadEnum(SquiDBDataChangedNotifier_DBOperation, UPDATE), item, table, [item getRowId]);
    [item markSaved];
  }
  return result;
}

void SquiDBSquidDatabase_notifyForTableWithSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(SquiDBSquidDatabase *self, SquiDBDataChangedNotifier_DBOperation *op, SquiDBAbstractModel *modelValues, SquiDBSqlTable *table, jlong rowId) {
  if (!self->dataChangedNotificationsEnabled_) {
    return;
  }
  @synchronized(self->notifiersLock_) {
    SquiDBSquidDatabase_onDataChangedWithJavaUtilList_withSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, self->globalNotifiers_, op, modelValues, table, rowId);
    SquiDBSquidDatabase_onDataChangedWithJavaUtilList_withSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(self, [((id<JavaUtilMap>) nil_chk(self->tableNotifiers_)) getWithId:table], op, modelValues, table, rowId);
  }
  if (!SquiDBSquidDatabase_inTransaction(self)) {
    SquiDBSquidDatabase_flushAccumulatedNotificationsWithBoolean_(self, true);
  }
}

void SquiDBSquidDatabase_onDataChangedWithJavaUtilList_withSquiDBDataChangedNotifier_DBOperation_withSquiDBAbstractModel_withSquiDBSqlTable_withLong_(SquiDBSquidDatabase *self, id<JavaUtilList> notifiers, SquiDBDataChangedNotifier_DBOperation *op, SquiDBAbstractModel *modelValues, SquiDBSqlTable *table, jlong rowId) {
  if (notifiers != nil) {
    for (SquiDBDataChangedNotifier * __strong notifier in notifiers) {
      if ([((SquiDBDataChangedNotifier *) nil_chk(notifier)) onDataChangedWithSquiDBSqlTable:table withSquiDBSquidDatabase:self withSquiDBDataChangedNotifier_DBOperation:op withSquiDBAbstractModel:modelValues withLong:rowId]) {
        [((id<JavaUtilSet>) nil_chk([((JavaLangThreadLocal *) nil_chk(self->notifierAccumulator_)) get])) addWithId:notifier];
      }
    }
  }
}

void SquiDBSquidDatabase_flushAccumulatedNotificationsWithBoolean_(SquiDBSquidDatabase *self, jboolean transactionSuccess) {
  id<JavaUtilSet> accumulatedNotifiers = [((JavaLangThreadLocal *) nil_chk(self->notifierAccumulator_)) get];
  if (![((id<JavaUtilSet>) nil_chk(accumulatedNotifiers)) isEmpty]) {
    for (SquiDBDataChangedNotifier * __strong notifier in accumulatedNotifiers) {
      [((SquiDBDataChangedNotifier *) nil_chk(notifier)) flushAccumulatedNotificationsWithSquiDBSquidDatabase:self withBoolean:transactionSuccess && self->dataChangedNotificationsEnabled_];
    }
    [accumulatedNotifiers clear];
  }
}

jboolean SquiDBSquidDatabase_copyDatabaseLockedWithJavaIoFile_(SquiDBSquidDatabase *self, JavaIoFile *toDir) {
  if (!([((JavaIoFile *) nil_chk(toDir)) mkdirs] || [toDir isDirectory])) {
    SquiDBLogger_eWithNSString_withNSString_(SquiDBLogger_LOG_TAG, @"Error creating directories for database copy");
    return false;
  }
  JavaIoFile *dbFile = new_JavaIoFile_initWithNSString_([self getDatabasePath]);
  @try {
    if (SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, dbFile, toDir)) {
      SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, new_JavaIoFile_initWithNSString_(JreStrcat("$$", [dbFile getPath], @"-journal")), toDir);
      SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, new_JavaIoFile_initWithNSString_(JreStrcat("$$", [dbFile getPath], @"-shm")), toDir);
      SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(self, new_JavaIoFile_initWithNSString_(JreStrcat("$$", [dbFile getPath], @"-wal")), toDir);
    }
    else {
      SquiDBLogger_eWithNSString_withNSString_(SquiDBLogger_LOG_TAG, JreStrcat("$$$", @"Attempted to copy database ", [self getName], @" but it doesn't exist yet"));
      return false;
    }
  }
  @catch (JavaIoIOException *e) {
    SquiDBLogger_eWithNSString_withNSString_withJavaLangThrowable_(SquiDBLogger_LOG_TAG, JreStrcat("$$", @"Error copying database ", [self getName]), e);
    return false;
  }
  return true;
}

jboolean SquiDBSquidDatabase_copyFileIfExistsWithJavaIoFile_withJavaIoFile_(SquiDBSquidDatabase *self, JavaIoFile *inArg, JavaIoFile *toDir) {
  if ([((JavaIoFile *) nil_chk(inArg)) exists]) {
    SquiDBSquidUtilities_copyFileWithJavaIoFile_withJavaIoFile_(inArg, new_JavaIoFile_initWithNSString_(JreStrcat("$$$", [((JavaIoFile *) nil_chk(toDir)) getAbsolutePath], JreLoadStatic(JavaIoFile, separator), [inArg getName])));
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSquidDatabase)

J2OBJC_NAME_MAPPING(SquiDBSquidDatabase, "com.yahoo.squidb.data", "SquiDB")

@implementation SquiDBSquidDatabase_1

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0 {
  SquiDBSquidDatabase_1_initWithJavaUtilSet_(self, capture$0);
  return self;
}

- (SquiDBPreparedInsertCache *)initialValue {
  return new_SquiDBPreparedInsertCache_initPackagePrivateWithJavaUtilSet_(val$openStatementTracking_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBPreparedInsertCache;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$openStatementTracking_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;", "Ljava/util/Set<Lcom/yahoo/squidb/data/ISQLitePreparedStatement;>;", "LSquiDBSquidDatabase;", "newPreparedInsertCacheWithJavaUtilSet:", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/PreparedInsertCache;>;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_1 = { "", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, 4, -1 };
  return &_SquiDBSquidDatabase_1;
}

@end

void SquiDBSquidDatabase_1_initWithJavaUtilSet_(SquiDBSquidDatabase_1 *self, id<JavaUtilSet> capture$0) {
  self->val$openStatementTracking_ = capture$0;
  JavaLangThreadLocal_init(self);
}

SquiDBSquidDatabase_1 *new_SquiDBSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_1, initWithJavaUtilSet_, capture$0)
}

SquiDBSquidDatabase_1 *create_SquiDBSquidDatabase_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_1, initWithJavaUtilSet_, capture$0)
}

@implementation SquiDBSquidDatabase_TransactionSuccessState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSquidDatabase_TransactionSuccessState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)beginTransaction {
  SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(self);
}

- (jboolean)inTransaction {
  return SquiDBSquidDatabase_TransactionSuccessState_inTransaction(self);
}

- (void)setTransactionSuccessful {
  SquiDBSquidDatabase_TransactionSuccessState_setTransactionSuccessful(self);
}

- (void)unsetTransactionSuccessful {
  SquiDBSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(self);
}

- (void)endTransaction {
  SquiDBSquidDatabase_TransactionSuccessState_endTransaction(self);
}

- (void)reset {
  SquiDBSquidDatabase_TransactionSuccessState_reset(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(beginTransaction);
  methods[2].selector = @selector(inTransaction);
  methods[3].selector = @selector(setTransactionSuccessful);
  methods[4].selector = @selector(unsetTransactionSuccessful);
  methods[5].selector = @selector(endTransaction);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nestedSuccessStack_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x0, -1, -1, 0, -1 },
    { "outerTransactionSuccess_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Deque<Ljava/lang/Boolean;>;", "LSquiDBSquidDatabase;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_TransactionSuccessState = { "TransactionSuccessState", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0xa, 7, 2, 1, -1, -1, -1, -1 };
  return &_SquiDBSquidDatabase_TransactionSuccessState;
}

@end

void SquiDBSquidDatabase_TransactionSuccessState_init(SquiDBSquidDatabase_TransactionSuccessState *self) {
  NSObject_init(self);
  self->nestedSuccessStack_ = new_JavaUtilLinkedList_init();
  self->outerTransactionSuccess_ = true;
}

SquiDBSquidDatabase_TransactionSuccessState *new_SquiDBSquidDatabase_TransactionSuccessState_init() {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_TransactionSuccessState, init)
}

SquiDBSquidDatabase_TransactionSuccessState *create_SquiDBSquidDatabase_TransactionSuccessState_init() {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_TransactionSuccessState, init)
}

void SquiDBSquidDatabase_TransactionSuccessState_beginTransaction(SquiDBSquidDatabase_TransactionSuccessState *self) {
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pushWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
}

jboolean SquiDBSquidDatabase_TransactionSuccessState_inTransaction(SquiDBSquidDatabase_TransactionSuccessState *self) {
  return [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) size] > 0;
}

void SquiDBSquidDatabase_TransactionSuccessState_setTransactionSuccessful(SquiDBSquidDatabase_TransactionSuccessState *self) {
  (void) [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pop];
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pushWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
}

void SquiDBSquidDatabase_TransactionSuccessState_unsetTransactionSuccessful(SquiDBSquidDatabase_TransactionSuccessState *self) {
  (void) [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pop];
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pushWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
}

void SquiDBSquidDatabase_TransactionSuccessState_endTransaction(SquiDBSquidDatabase_TransactionSuccessState *self) {
  JavaLangBoolean *mostRecentTransactionSuccess = [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) pop];
  if (![((JavaLangBoolean *) nil_chk(mostRecentTransactionSuccess)) booleanValue]) {
    self->outerTransactionSuccess_ = false;
  }
}

void SquiDBSquidDatabase_TransactionSuccessState_reset(SquiDBSquidDatabase_TransactionSuccessState *self) {
  [((id<JavaUtilDeque>) nil_chk(self->nestedSuccessStack_)) clear];
  self->outerTransactionSuccess_ = true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSquidDatabase_TransactionSuccessState)

@implementation SquiDBSquidDatabase_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSquidDatabase_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (SquiDBSquidDatabase_TransactionSuccessState *)initialValue {
  return new_SquiDBSquidDatabase_TransactionSuccessState_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSquiDBSquidDatabase_TransactionSuccessState;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LSquiDBSquidDatabase;", "Ljava/lang/ThreadLocal<Lcom/yahoo/squidb/data/SquidDatabase$TransactionSuccessState;>;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_2 = { "", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 0, -1, -1, 1, -1 };
  return &_SquiDBSquidDatabase_2;
}

@end

void SquiDBSquidDatabase_2_init(SquiDBSquidDatabase_2 *self) {
  JavaLangThreadLocal_init(self);
}

SquiDBSquidDatabase_2 *new_SquiDBSquidDatabase_2_init() {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_2, init)
}

SquiDBSquidDatabase_2 *create_SquiDBSquidDatabase_2_init() {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_2, init)
}

@implementation SquiDBSquidDatabase_OpenHelperDelegate

- (instancetype)initWithSquiDBSquidDatabase:(SquiDBSquidDatabase *)outer$ {
  SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(self, outer$);
  return self;
}

- (void)onCreateWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(this$0_, db);
  JavaLangStringBuilder *sql = new_JavaLangStringBuilder_initWithInt_(SquiDBSquidDatabase_STRING_BUILDER_INITIAL_CAPACITY);
  SquiDBSquidDatabase_SqlConstructorVisitor *sqlVisitor = new_SquiDBSquidDatabase_SqlConstructorVisitor_init();
  IOSObjectArray *tables = [this$0_ getTables];
  if (tables != nil) {
    {
      IOSObjectArray *a__ = tables;
      SquiDBTable * const *b__ = a__->buffer_;
      SquiDBTable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        SquiDBTable *table = *b__++;
        [((SquiDBTable *) nil_chk(table)) appendCreateTableSqlWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(this$0_) withJavaLangStringBuilder:sql withSquiDBProperty_PropertyVisitor:sqlVisitor];
        [((id<SquiDBISQLiteDatabase>) nil_chk(db)) execSQLWithNSString:[sql description]];
        [sql setLengthWithInt:0];
      }
    }
  }
  IOSObjectArray *views = [this$0_ getViews];
  if (views != nil) {
    {
      IOSObjectArray *a__ = views;
      SquiDBView * const *b__ = a__->buffer_;
      SquiDBView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        SquiDBView *view = *b__++;
        [((SquiDBView *) nil_chk(view)) createViewSqlWithSquiDBCompileContext:SquiDBSquidDatabase_getCompileContext(this$0_) withJavaLangStringBuilder:sql];
        [((id<SquiDBISQLiteDatabase>) nil_chk(db)) execSQLWithNSString:[sql description]];
        [sql setLengthWithInt:0];
      }
    }
  }
  IOSObjectArray *indexes = [this$0_ getIndexes];
  if (indexes != nil) {
    {
      IOSObjectArray *a__ = indexes;
      SquiDBIndex * const *b__ = a__->buffer_;
      SquiDBIndex * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        SquiDBIndex *idx = *b__++;
        [this$0_ tryCreateIndexWithSquiDBIndex:idx];
      }
    }
  }
  [this$0_ onTablesCreatedWithSquiDBISQLiteDatabase:db];
}

- (void)onUpgradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                   withInt:(jint)oldVersion
                                   withInt:(jint)newVersion {
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(this$0_, db);
  jboolean success = false;
  JavaLangException *thrown = nil;
  this$0_->isInMigration_ = true;
  @try {
    success = [this$0_ onUpgradeWithSquiDBISQLiteDatabase:db withInt:oldVersion withInt:newVersion];
  }
  @catch (JavaLangException *e) {
    thrown = e;
    success = false;
  }
  @finally {
    this$0_->isInMigration_ = false;
  }
  if ([thrown isKindOfClass:[SquiDBSquidDatabase_RecreateDuringMigrationException class]]) {
    @throw nil_chk((SquiDBSquidDatabase_RecreateDuringMigrationException *) thrown);
  }
  else if ([thrown isKindOfClass:[SquiDBSquidDatabase_MigrationFailedException class]]) {
    @throw nil_chk((SquiDBSquidDatabase_MigrationFailedException *) thrown);
  }
  else if (!success) {
    @throw new_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_([this$0_ getName], oldVersion, newVersion, thrown);
  }
}

- (void)onDowngradeWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db
                                     withInt:(jint)oldVersion
                                     withInt:(jint)newVersion {
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(this$0_, db);
  jboolean success = false;
  JavaLangException *thrown = nil;
  this$0_->isInMigration_ = true;
  @try {
    success = [this$0_ onDowngradeWithSquiDBISQLiteDatabase:db withInt:oldVersion withInt:newVersion];
  }
  @catch (JavaLangException *e) {
    thrown = e;
    success = false;
  }
  @finally {
    this$0_->isInMigration_ = false;
  }
  if ([thrown isKindOfClass:[SquiDBSquidDatabase_RecreateDuringMigrationException class]]) {
    @throw nil_chk((SquiDBSquidDatabase_RecreateDuringMigrationException *) thrown);
  }
  else if ([thrown isKindOfClass:[SquiDBSquidDatabase_MigrationFailedException class]]) {
    @throw nil_chk((SquiDBSquidDatabase_MigrationFailedException *) thrown);
  }
  else if (!success) {
    @throw new_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_([this$0_ getName], oldVersion, newVersion, thrown);
  }
}

- (void)onConfigureWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(this$0_, db);
  [this$0_ onConfigureWithSquiDBISQLiteDatabase:db];
}

- (void)onOpenWithSquiDBISQLiteDatabase:(id<SquiDBISQLiteDatabase>)db {
  SquiDBSquidDatabase_setDatabaseWithSquiDBISQLiteDatabase_(this$0_, db);
  [this$0_ onOpenWithSquiDBISQLiteDatabase:db];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBSquidDatabase:);
  methods[1].selector = @selector(onCreateWithSquiDBISQLiteDatabase:);
  methods[2].selector = @selector(onUpgradeWithSquiDBISQLiteDatabase:withInt:withInt:);
  methods[3].selector = @selector(onDowngradeWithSquiDBISQLiteDatabase:withInt:withInt:);
  methods[4].selector = @selector(onConfigureWithSquiDBISQLiteDatabase:);
  methods[5].selector = @selector(onOpenWithSquiDBISQLiteDatabase:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LSquiDBSquidDatabase;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSquidDatabase;", "onCreate", "LSquiDBISQLiteDatabase;", "onUpgrade", "LSquiDBISQLiteDatabase;II", "onDowngrade", "onConfigure", "onOpen" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_OpenHelperDelegate = { "OpenHelperDelegate", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x11, 6, 1, 0, -1, -1, -1, -1 };
  return &_SquiDBSquidDatabase_OpenHelperDelegate;
}

@end

void SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(SquiDBSquidDatabase_OpenHelperDelegate *self, SquiDBSquidDatabase *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

SquiDBSquidDatabase_OpenHelperDelegate *new_SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(SquiDBSquidDatabase *outer$) {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_OpenHelperDelegate, initWithSquiDBSquidDatabase_, outer$)
}

SquiDBSquidDatabase_OpenHelperDelegate *create_SquiDBSquidDatabase_OpenHelperDelegate_initWithSquiDBSquidDatabase_(SquiDBSquidDatabase *outer$) {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_OpenHelperDelegate, initWithSquiDBSquidDatabase_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSquidDatabase_OpenHelperDelegate)

@implementation SquiDBSquidDatabase_SqlConstructorVisitor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSquidDatabase_SqlConstructorVisitor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangVoid *)appendColumnDefinitionWithNSString:(NSString *)type
                                  withSquiDBProperty:(SquiDBProperty *)property
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, type, property, sql);
}

- (JavaLangVoid *)visitDoubleWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, @"REAL", property, sql);
}

- (JavaLangVoid *)visitIntegerWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, @"INTEGER", property, sql);
}

- (JavaLangVoid *)visitLongWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, @"INTEGER", property, sql);
}

- (JavaLangVoid *)visitStringWithSquiDBProperty:(SquiDBProperty *)property
                                         withId:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, @"TEXT", property, sql);
}

- (JavaLangVoid *)visitBooleanWithSquiDBProperty:(SquiDBProperty *)property
                                          withId:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, @"INTEGER", property, sql);
}

- (JavaLangVoid *)visitBlobWithSquiDBProperty:(SquiDBProperty *)property
                                       withId:(JavaLangStringBuilder *)sql {
  return SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(self, @"BLOB", property, sql);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x2, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 8, 4, -1, 9, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 10, 4, -1, 11, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 12, 4, -1, 13, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, 14, 4, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(appendColumnDefinitionWithNSString:withSquiDBProperty:withJavaLangStringBuilder:);
  methods[2].selector = @selector(visitDoubleWithSquiDBProperty:withId:);
  methods[3].selector = @selector(visitIntegerWithSquiDBProperty:withId:);
  methods[4].selector = @selector(visitLongWithSquiDBProperty:withId:);
  methods[5].selector = @selector(visitStringWithSquiDBProperty:withId:);
  methods[6].selector = @selector(visitBooleanWithSquiDBProperty:withId:);
  methods[7].selector = @selector(visitBlobWithSquiDBProperty:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "appendColumnDefinition", "LNSString;LSquiDBProperty;LJavaLangStringBuilder;", "(Ljava/lang/String;Lcom/yahoo/squidb/sql/Property<*>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitDouble", "LSquiDBProperty;LJavaLangStringBuilder;", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Double;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitInteger", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Integer;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitLong", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Long;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitString", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/String;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitBoolean", "(Lcom/yahoo/squidb/sql/Property<Ljava/lang/Boolean;>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "visitBlob", "(Lcom/yahoo/squidb/sql/Property<[B>;Ljava/lang/StringBuilder;)Ljava/lang/Void;", "LSquiDBSquidDatabase;", "Ljava/lang/Object;Lcom/yahoo/squidb/sql/Property$PropertyVisitor<Ljava/lang/Void;Ljava/lang/StringBuilder;>;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_SqlConstructorVisitor = { "SqlConstructorVisitor", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0xa, 8, 0, 16, -1, -1, 17, -1 };
  return &_SquiDBSquidDatabase_SqlConstructorVisitor;
}

@end

void SquiDBSquidDatabase_SqlConstructorVisitor_init(SquiDBSquidDatabase_SqlConstructorVisitor *self) {
  NSObject_init(self);
}

SquiDBSquidDatabase_SqlConstructorVisitor *new_SquiDBSquidDatabase_SqlConstructorVisitor_init() {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_SqlConstructorVisitor, init)
}

SquiDBSquidDatabase_SqlConstructorVisitor *create_SquiDBSquidDatabase_SqlConstructorVisitor_init() {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_SqlConstructorVisitor, init)
}

JavaLangVoid *SquiDBSquidDatabase_SqlConstructorVisitor_appendColumnDefinitionWithNSString_withSquiDBProperty_withJavaLangStringBuilder_(SquiDBSquidDatabase_SqlConstructorVisitor *self, NSString *type, SquiDBProperty *property, JavaLangStringBuilder *sql) {
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sql)) appendWithNSString:[((SquiDBProperty *) nil_chk(property)) getName]])) appendWithNSString:@" "])) appendWithNSString:type];
  if (!SquiDBSqlUtils_isEmptyWithNSString_([property getColumnDefinition])) {
    (void) [((JavaLangStringBuilder *) nil_chk([sql appendWithNSString:@" "])) appendWithNSString:[property getColumnDefinition]];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSquidDatabase_SqlConstructorVisitor)

@implementation SquiDBSquidDatabase_RecreateDuringMigrationException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSquidDatabase_RecreateDuringMigrationException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = SquiDBSquidDatabase_RecreateDuringMigrationException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSquidDatabase;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_RecreateDuringMigrationException = { "RecreateDuringMigrationException", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_SquiDBSquidDatabase_RecreateDuringMigrationException;
}

@end

void SquiDBSquidDatabase_RecreateDuringMigrationException_init(SquiDBSquidDatabase_RecreateDuringMigrationException *self) {
  JavaLangRuntimeException_init(self);
}

SquiDBSquidDatabase_RecreateDuringMigrationException *new_SquiDBSquidDatabase_RecreateDuringMigrationException_init() {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_RecreateDuringMigrationException, init)
}

SquiDBSquidDatabase_RecreateDuringMigrationException *create_SquiDBSquidDatabase_RecreateDuringMigrationException_init() {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_RecreateDuringMigrationException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSquidDatabase_RecreateDuringMigrationException)

@implementation SquiDBSquidDatabase_MigrationFailedException

- (instancetype)initWithNSString:(NSString *)dbName
                         withInt:(jint)oldVersion
                         withInt:(jint)newVersion {
  SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(self, dbName, oldVersion, newVersion);
  return self;
}

- (instancetype)initWithNSString:(NSString *)dbName
                         withInt:(jint)oldVersion
                         withInt:(jint)newVersion
           withJavaLangThrowable:(JavaLangThrowable *)throwable {
  SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(self, dbName, oldVersion, newVersion, throwable);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withInt:);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = SquiDBSquidDatabase_MigrationFailedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "dbName_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "oldVersion_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "newVersion_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;II", "LNSString;IILJavaLangThrowable;", "LSquiDBSquidDatabase;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_MigrationFailedException = { "MigrationFailedException", "com.yahoo.squidb.data", ptrTable, methods, fields, 7, 0x9, 2, 4, 2, -1, -1, -1, -1 };
  return &_SquiDBSquidDatabase_MigrationFailedException;
}

@end

void SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(SquiDBSquidDatabase_MigrationFailedException *self, NSString *dbName, jint oldVersion, jint newVersion) {
  SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(self, dbName, oldVersion, newVersion, nil);
}

SquiDBSquidDatabase_MigrationFailedException *new_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(NSString *dbName, jint oldVersion, jint newVersion) {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_, dbName, oldVersion, newVersion)
}

SquiDBSquidDatabase_MigrationFailedException *create_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_(NSString *dbName, jint oldVersion, jint newVersion) {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_, dbName, oldVersion, newVersion)
}

void SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(SquiDBSquidDatabase_MigrationFailedException *self, NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) {
  JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, JreStrcat("$$$I$I", @"Failed to migrate db ", dbName, @" from version ", oldVersion, @" to ", newVersion), throwable);
  self->dbName_ = dbName;
  self->oldVersion_ = oldVersion;
  self->newVersion_ = newVersion;
}

SquiDBSquidDatabase_MigrationFailedException *new_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_withJavaLangThrowable_, dbName, oldVersion, newVersion, throwable)
}

SquiDBSquidDatabase_MigrationFailedException *create_SquiDBSquidDatabase_MigrationFailedException_initWithNSString_withInt_withInt_withJavaLangThrowable_(NSString *dbName, jint oldVersion, jint newVersion, JavaLangThrowable *throwable) {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_MigrationFailedException, initWithNSString_withInt_withInt_withJavaLangThrowable_, dbName, oldVersion, newVersion, throwable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSquidDatabase_MigrationFailedException)

@implementation SquiDBSquidDatabase_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  SquiDBSquidDatabase_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilSet>)initialValue {
  return new_JavaUtilHashSet_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/Set<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;", "LSquiDBSquidDatabase;", "Ljava/lang/ThreadLocal<Ljava/util/Set<Lcom/yahoo/squidb/data/DataChangedNotifier<*>;>;>;" };
  static const J2ObjcClassInfo _SquiDBSquidDatabase_3 = { "", "com.yahoo.squidb.data", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 1, -1, -1, 2, -1 };
  return &_SquiDBSquidDatabase_3;
}

@end

void SquiDBSquidDatabase_3_init(SquiDBSquidDatabase_3 *self) {
  JavaLangThreadLocal_init(self);
}

SquiDBSquidDatabase_3 *new_SquiDBSquidDatabase_3_init() {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_3, init)
}

SquiDBSquidDatabase_3 *create_SquiDBSquidDatabase_3_init() {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_3, init)
}

J2OBJC_INITIALIZED_DEFN(SquiDBSquidDatabase_$Lambda$1)

@implementation SquiDBSquidDatabase_$Lambda$1

- (id)applyWithId:(id)x {
  return x != nil ? [x description] : @"";
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [SquiDBSquidDatabase_$Lambda$1 class]) {
    SquiDBSquidDatabase_$Lambda$1_instance = new_SquiDBSquidDatabase_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(SquiDBSquidDatabase_$Lambda$1)
  }
}

@end

void SquiDBSquidDatabase_$Lambda$1_init(SquiDBSquidDatabase_$Lambda$1 *self) {
  NSObject_init(self);
}

SquiDBSquidDatabase_$Lambda$1 *new_SquiDBSquidDatabase_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(SquiDBSquidDatabase_$Lambda$1, init)
}

SquiDBSquidDatabase_$Lambda$1 *create_SquiDBSquidDatabase_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(SquiDBSquidDatabase_$Lambda$1, init)
}
