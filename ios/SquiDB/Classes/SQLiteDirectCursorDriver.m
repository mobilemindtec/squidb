//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SQLiteDirectCursorDriver.java
//

#include "ICursor.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SQLiteCursor.h"
#include "SQLiteDatabase.h"
#include "SQLiteDirectCursorDriver.h"
#include "SQLiteQuery.h"
#include "java/lang/RuntimeException.h"

@interface SquiDBSQLiteDirectCursorDriver () {
 @public
  SquiDBSQLiteDatabase *mDatabase_;
  NSString *mEditTable_;
  NSString *mSql_;
  SquiDBSQLiteQuery *mQuery_;
}

@end

J2OBJC_FIELD_SETTER(SquiDBSQLiteDirectCursorDriver, mDatabase_, SquiDBSQLiteDatabase *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDirectCursorDriver, mEditTable_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDirectCursorDriver, mSql_, NSString *)
J2OBJC_FIELD_SETTER(SquiDBSQLiteDirectCursorDriver, mQuery_, SquiDBSQLiteQuery *)

@implementation SquiDBSQLiteDirectCursorDriver

- (instancetype)initWithSquiDBSQLiteDatabase:(SquiDBSQLiteDatabase *)db
                                withNSString:(NSString *)sql
                                withNSString:(NSString *)editTable {
  SquiDBSQLiteDirectCursorDriver_initWithSquiDBSQLiteDatabase_withNSString_withNSString_(self, db, sql, editTable);
  return self;
}

- (id<SquiDBICursor>)queryWithSquiDBSQLiteDatabase_CursorFactory:(id<SquiDBSQLiteDatabase_CursorFactory>)factory
                                               withNSStringArray:(IOSObjectArray *)selectionArgs {
  SquiDBSQLiteQuery *query = new_SquiDBSQLiteQuery_initWithSquiDBSQLiteDatabase_withNSString_(mDatabase_, mSql_);
  id<SquiDBICursor> cursor;
  @try {
    [query bindAllArgsAsStringsWithNSStringArray:selectionArgs];
    if (factory == nil) {
      cursor = new_SquiDBSQLiteCursor_initWithSquiDBSQLiteCursorDriver_withNSString_withSquiDBSQLiteQuery_(self, mEditTable_, query);
    }
    else {
      cursor = [factory newCursorWithSquiDBSQLiteDatabase:mDatabase_ withSquiDBSQLiteCursorDriver:self withNSString:mEditTable_ withSquiDBSQLiteQuery:query];
    }
  }
  @catch (JavaLangRuntimeException *ex) {
    [query close];
    @throw ex;
  }
  mQuery_ = query;
  return cursor;
}

- (void)cursorClosed {
}

- (void)setBindArgumentsWithNSStringArray:(IOSObjectArray *)bindArgs {
  [((SquiDBSQLiteQuery *) nil_chk(mQuery_)) bindAllArgsAsStringsWithNSStringArray:bindArgs];
}

- (void)cursorDeactivated {
}

- (void)cursorRequeriedWithSquiDBICursor:(id<SquiDBICursor>)cursor {
}

- (NSString *)description {
  return JreStrcat("$$", @"SQLiteDirectCursorDriver: ", mSql_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LSquiDBICursor;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithSquiDBSQLiteDatabase:withNSString:withNSString:);
  methods[1].selector = @selector(queryWithSquiDBSQLiteDatabase_CursorFactory:withNSStringArray:);
  methods[2].selector = @selector(cursorClosed);
  methods[3].selector = @selector(setBindArgumentsWithNSStringArray:);
  methods[4].selector = @selector(cursorDeactivated);
  methods[5].selector = @selector(cursorRequeriedWithSquiDBICursor:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDatabase_", "LSquiDBSQLiteDatabase;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mEditTable_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSql_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mQuery_", "LSquiDBSQLiteQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LSquiDBSQLiteDatabase;LNSString;LNSString;", "query", "LSquiDBSQLiteDatabase_CursorFactory;[LNSString;", "setBindArguments", "[LNSString;", "cursorRequeried", "LSquiDBICursor;", "toString" };
  static const J2ObjcClassInfo _SquiDBSQLiteDirectCursorDriver = { "SQLiteDirectCursorDriver", "com.yahoo.android.sqlite", ptrTable, methods, fields, 7, 0x11, 7, 4, -1, -1, -1, -1, -1 };
  return &_SquiDBSQLiteDirectCursorDriver;
}

@end

void SquiDBSQLiteDirectCursorDriver_initWithSquiDBSQLiteDatabase_withNSString_withNSString_(SquiDBSQLiteDirectCursorDriver *self, SquiDBSQLiteDatabase *db, NSString *sql, NSString *editTable) {
  NSObject_init(self);
  self->mDatabase_ = db;
  self->mEditTable_ = editTable;
  self->mSql_ = sql;
}

SquiDBSQLiteDirectCursorDriver *new_SquiDBSQLiteDirectCursorDriver_initWithSquiDBSQLiteDatabase_withNSString_withNSString_(SquiDBSQLiteDatabase *db, NSString *sql, NSString *editTable) {
  J2OBJC_NEW_IMPL(SquiDBSQLiteDirectCursorDriver, initWithSquiDBSQLiteDatabase_withNSString_withNSString_, db, sql, editTable)
}

SquiDBSQLiteDirectCursorDriver *create_SquiDBSQLiteDirectCursorDriver_initWithSquiDBSQLiteDatabase_withNSString_withNSString_(SquiDBSQLiteDatabase *db, NSString *sql, NSString *editTable) {
  J2OBJC_CREATE_IMPL(SquiDBSQLiteDirectCursorDriver, initWithSquiDBSQLiteDatabase_withNSString_withNSString_, db, sql, editTable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SquiDBSQLiteDirectCursorDriver)

J2OBJC_NAME_MAPPING(SquiDBSQLiteDirectCursorDriver, "com.yahoo.android.sqlite", "SquiDB")
