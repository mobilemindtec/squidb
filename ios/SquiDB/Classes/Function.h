//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Function.java
//

#ifndef Function_H
#define Function_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "Field.h"
#include "J2ObjC_header.h"

@class IOSObjectArray;
@class SquiDBCaseBuilder;
@class SquiDBCompileContext;
@class SquiDBCriterion;
@class SquiDBQuery;
@class SquiDBSqlBuilder;
@class SquiDBVersionCode;

@interface SquiDBFunction : SquiDBField
@property (readonly, class) SquiDBFunction *TRUE_ NS_SWIFT_NAME(TRUE_);
@property (readonly, class) SquiDBFunction *FALSE_ NS_SWIFT_NAME(FALSE_);

+ (SquiDBFunction *)TRUE_;

+ (SquiDBFunction *)FALSE_;

#pragma mark Public

- (instancetype __nonnull)init;

+ (SquiDBFunction *)absWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)addWithNSObjectArray:(IOSObjectArray *)args;

- (SquiDBField *)asWithNSString:(NSString *)arg0;

+ (SquiDBFunction *)avgWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)avgDistinctWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)bitwiseAndWithNSObjectArray:(IOSObjectArray *)args;

+ (SquiDBFunction *)bitwiseOrWithNSObjectArray:(IOSObjectArray *)args;

+ (SquiDBCaseBuilder *)caseExprWithId:(id)baseExpression;

+ (SquiDBFunction *)caseWhenWithSquiDBCriterion:(SquiDBCriterion *)when;

+ (SquiDBCaseBuilder *)caseWhenWithSquiDBCriterion:(SquiDBCriterion *)when
                                            withId:(id)then;

+ (SquiDBFunction *)caseWhenWithSquiDBCriterion:(SquiDBCriterion *)when
                                         withId:(id)ifTrue
                                         withId:(id)ifFalse;

+ (SquiDBFunction *)castWithSquiDBField:(SquiDBField *)field
                           withNSString:(NSString *)newType;

+ (SquiDBFunction *)coalesceWithNSObjectArray:(IOSObjectArray *)values;

+ (SquiDBFunction *)count;

+ (SquiDBFunction *)countWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)countDistinctWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)divideWithNSObjectArray:(IOSObjectArray *)args;

+ (SquiDBFunction *)fromQueryWithSquiDBQuery:(SquiDBQuery *)query;

+ (SquiDBFunction *)functionWithArgumentsWithNSString:(NSString *)functionName
                                    withNSObjectArray:(IOSObjectArray *)arguments;

- (NSString *)getExpression;

- (NSString *)getExpressionWithSquiDBCompileContext:(SquiDBCompileContext *)forCompileContext;

- (NSString *)getExpressionWithSquiDBVersionCode:(SquiDBVersionCode *)forSqliteVersion;

+ (SquiDBFunction *)groupConcatWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)groupConcatWithSquiDBField:(SquiDBField *)field
                                  withNSString:(NSString *)separator;

+ (SquiDBFunction *)groupConcatDistinctWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)lengthWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)lowerWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)maxWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)minWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)moduloWithId:(id)lhs
                          withId:(id)rhs;

+ (SquiDBFunction *)multiplyWithNSObjectArray:(IOSObjectArray *)args;

+ (SquiDBFunction *)rawFunctionWithNSString:(NSString *)expression;

+ (SquiDBFunction *)strConcatWithNSObjectArray:(IOSObjectArray *)objects;

+ (SquiDBFunction *)substrWithSquiDBField:(SquiDBField *)field
                                   withId:(id)start;

+ (SquiDBFunction *)substrWithSquiDBField:(SquiDBField *)field
                                   withId:(id)start
                                   withId:(id)length;

+ (SquiDBFunction *)subtractWithNSObjectArray:(IOSObjectArray *)args;

+ (SquiDBFunction *)sumWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)sumDistinctWithSquiDBField:(SquiDBField *)field;

+ (SquiDBFunction *)upperWithSquiDBField:(SquiDBField *)field;

#pragma mark Protected

- (instancetype __nonnull)initWithNSString:(NSString *)expression;

- (void)appendFunctionExpressionWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                         withBoolean:(jboolean)forSqlValidation;

- (void)appendQualifiedExpressionWithSquiDBSqlBuilder:(SquiDBSqlBuilder *)builder
                                          withBoolean:(jboolean)forSqlValidation;

- (NSString *)expressionForComparison;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(SquiDBFunction)

inline SquiDBFunction *SquiDBFunction_get_TRUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_TRUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBFunction, TRUE, SquiDBFunction *)

inline SquiDBFunction *SquiDBFunction_get_FALSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_FALSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBFunction, FALSE, SquiDBFunction *)

FOUNDATION_EXPORT void SquiDBFunction_init(SquiDBFunction *self);

FOUNDATION_EXPORT void SquiDBFunction_initWithNSString_(SquiDBFunction *self, NSString *expression);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_functionWithArgumentsWithNSString_withNSObjectArray_(NSString *functionName, IOSObjectArray *arguments);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_rawFunctionWithNSString_(NSString *expression);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_fromQueryWithSquiDBQuery_(SquiDBQuery *query);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_upperWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_lowerWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_substrWithSquiDBField_withId_(SquiDBField *field, id start);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_substrWithSquiDBField_withId_withId_(SquiDBField *field, id start, id length);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_strConcatWithNSObjectArray_(IOSObjectArray *objects);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_count(void);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_countWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_countDistinctWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_lengthWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_maxWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_minWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_sumWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_sumDistinctWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_avgWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_avgDistinctWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_absWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_groupConcatWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_groupConcatDistinctWithSquiDBField_(SquiDBField *field);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_groupConcatWithSquiDBField_withNSString_(SquiDBField *field, NSString *separator);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_caseWhenWithSquiDBCriterion_(SquiDBCriterion *when);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_caseWhenWithSquiDBCriterion_withId_withId_(SquiDBCriterion *when, id ifTrue, id ifFalse);

FOUNDATION_EXPORT SquiDBCaseBuilder *SquiDBFunction_caseWhenWithSquiDBCriterion_withId_(SquiDBCriterion *when, id then);

FOUNDATION_EXPORT SquiDBCaseBuilder *SquiDBFunction_caseExprWithId_(id baseExpression);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_castWithSquiDBField_withNSString_(SquiDBField *field, NSString *newType);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_coalesceWithNSObjectArray_(IOSObjectArray *values);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_addWithNSObjectArray_(IOSObjectArray *args);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_subtractWithNSObjectArray_(IOSObjectArray *args);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_multiplyWithNSObjectArray_(IOSObjectArray *args);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_divideWithNSObjectArray_(IOSObjectArray *args);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_moduloWithId_withId_(id lhs, id rhs);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_bitwiseAndWithNSObjectArray_(IOSObjectArray *args);

FOUNDATION_EXPORT SquiDBFunction *SquiDBFunction_bitwiseOrWithNSObjectArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBFunction)

@compatibility_alias ComYahooSquidbSqlFunction SquiDBFunction;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Function_H
