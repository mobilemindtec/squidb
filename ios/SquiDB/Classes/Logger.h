//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Logger.java
//

#ifndef Logger_H
#define Logger_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class JavaLangThrowable;
@class SquiDBLogger_Level;

@interface SquiDBLogger : NSObject
@property (readonly, copy, class) NSString *LOG_TAG NS_SWIFT_NAME(LOG_TAG);

+ (NSString *)LOG_TAG;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)message;

+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)message
withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)eWithNSString:(NSString *)tag
         withNSString:(NSString *)message;

+ (void)eWithNSString:(NSString *)tag
         withNSString:(NSString *)message
withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)iWithNSString:(NSString *)tag
         withNSString:(NSString *)message;

+ (void)iWithNSString:(NSString *)tag
         withNSString:(NSString *)message
withJavaLangThrowable:(JavaLangThrowable *)t;

+ (jboolean)isLoggableWithNSString:(NSString *)tag
            withSquiDBLogger_Level:(SquiDBLogger_Level *)level;

- (void)logWithSquiDBLogger_Level:(SquiDBLogger_Level *)level
                     withNSString:(NSString *)tag
                     withNSString:(NSString *)message
            withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)setLoggerWithSquiDBLogger:(SquiDBLogger *)newLogger;

+ (void)setLogLevelWithSquiDBLogger_Level:(SquiDBLogger_Level *)newLevel;

+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)message;

+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)message
withJavaLangThrowable:(JavaLangThrowable *)t;

+ (void)wtfWithNSString:(NSString *)tag
           withNSString:(NSString *)message;

+ (void)wtfWithNSString:(NSString *)tag
           withNSString:(NSString *)message
  withJavaLangThrowable:(JavaLangThrowable *)t;

@end

J2OBJC_STATIC_INIT(SquiDBLogger)

inline NSString *SquiDBLogger_get_LOG_TAG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *SquiDBLogger_LOG_TAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(SquiDBLogger, LOG_TAG, NSString *)

FOUNDATION_EXPORT void SquiDBLogger_init(SquiDBLogger *self);

FOUNDATION_EXPORT void SquiDBLogger_setLoggerWithSquiDBLogger_(SquiDBLogger *newLogger);

FOUNDATION_EXPORT jboolean SquiDBLogger_isLoggableWithNSString_withSquiDBLogger_Level_(NSString *tag, SquiDBLogger_Level *level);

FOUNDATION_EXPORT void SquiDBLogger_setLogLevelWithSquiDBLogger_Level_(SquiDBLogger_Level *newLevel);

FOUNDATION_EXPORT void SquiDBLogger_iWithNSString_withNSString_(NSString *tag, NSString *message);

FOUNDATION_EXPORT void SquiDBLogger_iWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *message, JavaLangThrowable *t);

FOUNDATION_EXPORT void SquiDBLogger_dWithNSString_withNSString_(NSString *tag, NSString *message);

FOUNDATION_EXPORT void SquiDBLogger_dWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *message, JavaLangThrowable *t);

FOUNDATION_EXPORT void SquiDBLogger_wWithNSString_withNSString_(NSString *tag, NSString *message);

FOUNDATION_EXPORT void SquiDBLogger_wWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *message, JavaLangThrowable *t);

FOUNDATION_EXPORT void SquiDBLogger_eWithNSString_withNSString_(NSString *tag, NSString *message);

FOUNDATION_EXPORT void SquiDBLogger_eWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *message, JavaLangThrowable *t);

FOUNDATION_EXPORT void SquiDBLogger_wtfWithNSString_withNSString_(NSString *tag, NSString *message);

FOUNDATION_EXPORT void SquiDBLogger_wtfWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *message, JavaLangThrowable *t);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBLogger)

@compatibility_alias ComYahooSquidbUtilityLogger SquiDBLogger;

typedef NS_ENUM(NSUInteger, SquiDBLogger_Level_Enum) {
  SquiDBLogger_Level_Enum_ASSERT = 0,
  SquiDBLogger_Level_Enum_ERROR = 1,
  SquiDBLogger_Level_Enum_WARN = 2,
  SquiDBLogger_Level_Enum_DEBUG = 3,
  SquiDBLogger_Level_Enum_INFO = 4,
};

@interface SquiDBLogger_Level : JavaLangEnum

@property (readonly, class, nonnull) SquiDBLogger_Level *ASSERT NS_SWIFT_NAME(ASSERT);
@property (readonly, class, nonnull) SquiDBLogger_Level *ERROR NS_SWIFT_NAME(ERROR);
@property (readonly, class, nonnull) SquiDBLogger_Level *WARN NS_SWIFT_NAME(WARN);
@property (readonly, class, nonnull) SquiDBLogger_Level *DEBUG_ NS_SWIFT_NAME(DEBUG_);
@property (readonly, class, nonnull) SquiDBLogger_Level *INFO NS_SWIFT_NAME(INFO);
+ (SquiDBLogger_Level * __nonnull)ASSERT;

+ (SquiDBLogger_Level * __nonnull)ERROR;

+ (SquiDBLogger_Level * __nonnull)WARN;

+ (SquiDBLogger_Level * __nonnull)DEBUG_;

+ (SquiDBLogger_Level * __nonnull)INFO;

#pragma mark Public

+ (SquiDBLogger_Level *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (SquiDBLogger_Level_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(SquiDBLogger_Level)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT SquiDBLogger_Level *SquiDBLogger_Level_values_[];

inline SquiDBLogger_Level *SquiDBLogger_Level_get_ASSERT(void);
J2OBJC_ENUM_CONSTANT(SquiDBLogger_Level, ASSERT)

inline SquiDBLogger_Level *SquiDBLogger_Level_get_ERROR(void);
J2OBJC_ENUM_CONSTANT(SquiDBLogger_Level, ERROR)

inline SquiDBLogger_Level *SquiDBLogger_Level_get_WARN(void);
J2OBJC_ENUM_CONSTANT(SquiDBLogger_Level, WARN)

inline SquiDBLogger_Level *SquiDBLogger_Level_get_DEBUG(void);
J2OBJC_ENUM_CONSTANT(SquiDBLogger_Level, DEBUG)

inline SquiDBLogger_Level *SquiDBLogger_Level_get_INFO(void);
J2OBJC_ENUM_CONSTANT(SquiDBLogger_Level, INFO)

FOUNDATION_EXPORT IOSObjectArray *SquiDBLogger_Level_values(void);

FOUNDATION_EXPORT SquiDBLogger_Level *SquiDBLogger_Level_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT SquiDBLogger_Level *SquiDBLogger_Level_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBLogger_Level)

@interface SquiDBLogger_DefaultLogger : SquiDBLogger

#pragma mark Public

- (instancetype __nonnull)init;

- (void)logWithSquiDBLogger_Level:(SquiDBLogger_Level *)level
                     withNSString:(NSString *)tag
                     withNSString:(NSString *)message
            withJavaLangThrowable:(JavaLangThrowable *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBLogger_DefaultLogger)

FOUNDATION_EXPORT void SquiDBLogger_DefaultLogger_init(SquiDBLogger_DefaultLogger *self);

FOUNDATION_EXPORT SquiDBLogger_DefaultLogger *new_SquiDBLogger_DefaultLogger_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBLogger_DefaultLogger *create_SquiDBLogger_DefaultLogger_init(void);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBLogger_DefaultLogger)


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // Logger_H
