//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/SQLiteSession.java
//

#ifndef SQLiteSession_H
#define SQLiteSession_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"

@class IOSObjectArray;
@class SquiDBCursorWindow;
@class SquiDBSQLiteConnectionPool;
@class SquiDBSQLiteStatementInfo;
@protocol SquiDBSQLiteTransactionListener;

@interface SquiDBSQLiteSession : NSObject
@property (readonly, class) jint TRANSACTION_MODE_DEFERRED NS_SWIFT_NAME(TRANSACTION_MODE_DEFERRED);
@property (readonly, class) jint TRANSACTION_MODE_IMMEDIATE NS_SWIFT_NAME(TRANSACTION_MODE_IMMEDIATE);
@property (readonly, class) jint TRANSACTION_MODE_EXCLUSIVE NS_SWIFT_NAME(TRANSACTION_MODE_EXCLUSIVE);

+ (jint)TRANSACTION_MODE_DEFERRED;

+ (jint)TRANSACTION_MODE_IMMEDIATE;

+ (jint)TRANSACTION_MODE_EXCLUSIVE;

#pragma mark Public

- (instancetype __nonnull)initWithSquiDBSQLiteConnectionPool:(SquiDBSQLiteConnectionPool *)connectionPool;

- (void)beginTransactionWithInt:(jint)transactionMode
withSquiDBSQLiteTransactionListener:(id<SquiDBSQLiteTransactionListener>)transactionListener
                        withInt:(jint)connectionFlags;

- (void)endTransaction;

- (void)executeWithNSString:(NSString *)sql
          withNSObjectArray:(IOSObjectArray *)bindArgs
                    withInt:(jint)connectionFlags;

- (jint)executeForChangedRowCountWithNSString:(NSString *)sql
                            withNSObjectArray:(IOSObjectArray *)bindArgs
                                      withInt:(jint)connectionFlags;

- (jint)executeForCursorWindowWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
                    withSquiDBCursorWindow:(SquiDBCursorWindow *)window
                                   withInt:(jint)startPos
                                   withInt:(jint)requiredPos
                               withBoolean:(jboolean)countAllRows
                                   withInt:(jint)connectionFlags;

- (jlong)executeForLastInsertedRowIdWithNSString:(NSString *)sql
                               withNSObjectArray:(IOSObjectArray *)bindArgs
                                         withInt:(jint)connectionFlags;

- (jlong)executeForLongWithNSString:(NSString *)sql
                  withNSObjectArray:(IOSObjectArray *)bindArgs
                            withInt:(jint)connectionFlags;

- (NSString *)executeForStringWithNSString:(NSString *)sql
                         withNSObjectArray:(IOSObjectArray *)bindArgs
                                   withInt:(jint)connectionFlags;

- (jboolean)hasConnection;

- (jboolean)hasNestedTransaction;

- (jboolean)hasTransaction;

- (void)prepareWithNSString:(NSString *)sql
                    withInt:(jint)connectionFlags
withSquiDBSQLiteStatementInfo:(SquiDBSQLiteStatementInfo *)outStatementInfo;

- (void)setTransactionSuccessful;

- (jboolean)yieldTransactionWithLong:(jlong)sleepAfterYieldDelayMillis
                         withBoolean:(jboolean)throwIfUnsafe;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(SquiDBSQLiteSession)

inline jint SquiDBSQLiteSession_get_TRANSACTION_MODE_DEFERRED(void);
#define SquiDBSQLiteSession_TRANSACTION_MODE_DEFERRED 0
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteSession, TRANSACTION_MODE_DEFERRED, jint)

inline jint SquiDBSQLiteSession_get_TRANSACTION_MODE_IMMEDIATE(void);
#define SquiDBSQLiteSession_TRANSACTION_MODE_IMMEDIATE 1
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteSession, TRANSACTION_MODE_IMMEDIATE, jint)

inline jint SquiDBSQLiteSession_get_TRANSACTION_MODE_EXCLUSIVE(void);
#define SquiDBSQLiteSession_TRANSACTION_MODE_EXCLUSIVE 2
J2OBJC_STATIC_FIELD_CONSTANT(SquiDBSQLiteSession, TRANSACTION_MODE_EXCLUSIVE, jint)

FOUNDATION_EXPORT void SquiDBSQLiteSession_initWithSquiDBSQLiteConnectionPool_(SquiDBSQLiteSession *self, SquiDBSQLiteConnectionPool *connectionPool);

FOUNDATION_EXPORT SquiDBSQLiteSession *new_SquiDBSQLiteSession_initWithSquiDBSQLiteConnectionPool_(SquiDBSQLiteConnectionPool *connectionPool) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT SquiDBSQLiteSession *create_SquiDBSQLiteSession_initWithSquiDBSQLiteConnectionPool_(SquiDBSQLiteConnectionPool *connectionPool);

J2OBJC_TYPE_LITERAL_HEADER(SquiDBSQLiteSession)

@compatibility_alias ComYahooAndroidSqliteSQLiteSession SquiDBSQLiteSession;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // SQLiteSession_H
